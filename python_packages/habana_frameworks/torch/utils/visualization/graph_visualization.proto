/******************************************************************************
 * Copyright (C) 2024 HabanaLabs, Ltd. an Intel Company
 * All Rights Reserved.
 *
 * This file contains Habana Labs, Ltd. proprietary and confidential information
 * and is subject to the confidentiality and license agreements under which it
 * was provided.
 *
 ******************************************************************************
 * This file contains definitions for messages to resemble TF protobuf graph
 * outputs. Definitions are borrowed as a subset on a need basis, e.g. to support
 * control dependencies and tensor visualization. original files were at
 * Tensorflow Github:
 * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/
 * List of changes:
 * - Structs copied and modified from following files:
 *    - tensor.proto
 *    - graph.proto
 *    - attr_value.proto
 *    - node_def.proto
 *    - tensor_shape.proto
 *    - types.proto
*/
/* Copyright The TensorFlow Authors. All Rights Reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package graph_visualization;

enum DataType {
  DT_INVALID = 0;
  DT_FLOAT = 1;
  DT_DOUBLE = 2;
  DT_INT32 = 3;
  DT_UINT8 = 4;
  DT_INT16 = 5;
  DT_INT8 = 6;
  DT_STRING = 7;
  DT_COMPLEX64 = 8;
  DT_INT64 = 9;
  DT_BOOL = 10;
  DT_QINT8 = 11;
  DT_QUINT8 = 12;
  DT_QINT32 = 13;
  DT_BFLOAT16 = 14;
  DT_QINT16 = 15;
  DT_QUINT16 = 16;
  DT_UINT16 = 17;
  DT_COMPLEX128 = 18;
  DT_HALF = 19;
  DT_RESOURCE = 20;
  DT_VARIANT = 21;
  DT_UINT32 = 22;
  DT_UINT64 = 23;
  DT_FLOAT8_E5M2 = 24;
  DT_FLOAT8_E4M3FN = 25;
  DT_NA = 26;

  // Do not use!  These are only for parameters.  Every enum above
  // should have a corresponding value below (verified by TF types_test).
  DT_FLOAT_REF = 101;
  DT_DOUBLE_REF = 102;
  DT_INT32_REF = 103;
  DT_UINT8_REF = 104;
  DT_INT16_REF = 105;
  DT_INT8_REF = 106;
  DT_STRING_REF = 107;
  DT_COMPLEX64_REF = 108;
  DT_INT64_REF = 109;
  DT_BOOL_REF = 110;
  DT_QINT8_REF = 111;
  DT_QUINT8_REF = 112;
  DT_QINT32_REF = 113;
  DT_BFLOAT16_REF = 114;
  DT_QINT16_REF = 115;
  DT_QUINT16_REF = 116;
  DT_UINT16_REF = 117;
  DT_COMPLEX128_REF = 118;
  DT_HALF_REF = 119;
  DT_RESOURCE_REF = 120;
  DT_VARIANT_REF = 121;
  DT_UINT32_REF = 122;
  DT_UINT64_REF = 123;
}

message Tensor {
  string name = 1;
  DataType dtype = 2;
  Shape tensor_shape = 3;
}

message Shape {

  message Dim {
    int64 size = 1;
    string name = 2;
  };

  repeated Dim dim = 2;

};


// Node Attributes are accessible via the attribute map
message Attribute {

  message ValueList {
    repeated Shape shape = 1;                     // a list of shapes
    repeated Tensor tensor = 2;                   // a list of tensors
    repeated bytes s = 3;                         // a list of strings
    repeated int64 i = 4 [packed = true];         // a list of ints
    repeated float f = 5 [packed = true];         // a list of floats
    repeated bool b = 6 [packed = true];          // a list of bools
  }

  oneof value {
    ValueList list = 1;             // any list
    DataType type = 2;              // TF DataType
    Shape shape = 3;                // shape
    Tensor tensor = 4;              // tensor
    bytes s = 5;                    // string
    int64 i = 6;                    // int
    float f = 7;                    // float
    bool b = 8;                     // bool
  }

}

// Node with name, input list and attribute map.
message Node {

  string name = 1;
  string op = 2;
  repeated string input = 3;
  map<string, Attribute> attr = 5;

}


// Graph as a collection of nodes
message Graph {
  repeated Node node = 1;
}
