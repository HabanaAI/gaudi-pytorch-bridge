###############################################################################
# Copyright (C) 2021-2024 Habana Labs, Ltd. an Intel Company
# All Rights Reserved.
#
# Unauthorized copying of this file or any element(s) within it, via any medium
# is strictly prohibited.
# This file contains Habana Labs, Ltd. proprietary and confidential information
# and is subject to the confidentiality and license agreements under which it
# was provided.
#
###############################################################################

cmake_minimum_required(VERSION 3.25 FATAL_ERROR)

if(POLICY CMP0076)
  cmake_policy(SET CMP0076 OLD)
endif()

include(CMakeDependentOption)

project(habana_pytorch_plugin VERSION 0.8.0 LANGUAGES CXX)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)

option(SANITIZER "build sanitizer configuration" OFF)
cmake_dependent_option(THREAD_SANITIZER "build thread sanitizer configuration" OFF "NOT SANITIZER" OFF)
option(MANYLINUX "build for manylinux configuration, synapse shim will be used" ON)
option(UPSTREAM_COMPILE "build for pytorch-fork upstream branch" OFF)

if(MANYLINUX)
  message("Building with shim layer")
  set(PYTORCH_SYNAPSE_UTILS_LIB pytorch_synapse_utils_shim)
else()
  message("Building without shim layer")
  set(PYTORCH_SYNAPSE_UTILS_LIB SynapseUtils)
endif()

if(UPSTREAM_COMPILE)
  ADD_DEFINITIONS(-DUPSTREAM_COMPILE)
endif(UPSTREAM_COMPILE)

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

find_package(Python REQUIRED COMPONENTS Interpreter Development NumPy)
find_package(Torch REQUIRED)
find_package(ZLIB REQUIRED)

include(pt_ver)
set_up_pt_ver_mechanism()

set(CMAKE_CONFIGURABLE_FILE_CONTENT "${TORCH_VERSION_MAJOR}.${TORCH_VERSION_MINOR}")
configure_file("${CMAKE_ROOT}/Modules/CMakeConfigurableFile.in" "${PROJECT_SOURCE_DIR}/python_packages/habana_frameworks/torch/required_version.txt" @ONLY)
unset(CMAKE_CONFIGURABLE_FILE_CONTENT)

include(Targets)

find_program(CCACHE ccache)

if(CCACHE)
  set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE}")
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(NOT DEFINED CLANG_TIDY OR CLANG_TIDY)
  find_program(CLANG_TIDY NAMES clang-tidy-10)

  if(CLANG_TIDY)
    set(CMAKE_CXX_CLANG_TIDY "${CLANG_TIDY}")
    message(STATUS "clang-tidy (${CLANG_TIDY}) --version:")
    execute_process(COMMAND ${CLANG_TIDY} --version OUTPUT_VARIABLE CLANG_TIDY_VERSION)
    message(${CLANG_TIDY_VERSION})

    # make clang-tidy work correctly with autogenerated files
    configure_file(.clang-tidy ${PROJECT_BINARY_DIR}/.clang-tidy COPYONLY)
  else()
    message(STATUS "clang-tidy-10 not detected or disabled")
  endif()
endif()

get_property(torch_flags TARGET torch PROPERTY INTERFACE_COMPILE_OPTIONS)

if(NOT "${torch_flags}" STREQUAL "")
  add_compile_options("${torch_flags}")
endif()

include(AddNPUStackDependencies)

set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH "$ORIGIN")

set(CMAKE_INSTALL_PREFIX "")
message(STATUS "Installation prefix set to ${CMAKE_INSTALL_PREFIX}")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
add_subdirectory(pytorch_helpers)
add_subdirectory(backend)

# workaround for cmake3.5. Starting from 3.13 sources are optional and we can add them in add_subdirectories
add_habana_library(habana_pytorch_plugin SHARED
  common/lazy/utils.cpp
  pytorch_helpers/lazy_to_backend.cpp
  pytorch_helpers/habana_helpers/logging.cpp
  pytorch_helpers/habana_helpers/signal_handler.cpp
  pytorch_helpers/habana_helpers/stats.cpp
  pytorch_helpers/habana_helpers/frontend_utils.cpp
  pytorch_helpers/habana_helpers/kernels_accumulation.cpp
  pytorch_helpers/habana_helpers/misc_utils.cpp
  pytorch_helpers/habana_helpers/thread_pool/acc_thread_pool.cpp
  pytorch_helpers/habana_helpers/thread_pool/thread_pool.cpp
  pytorch_helpers/habana_helpers/dtype_helpers.cpp
  pytorch_helpers/habana_helpers/towl.cpp
  pytorch_helpers/serialize/export.cpp
  pytorch_helpers/visualize/visualize.cpp
  habana_kernels/basic_kernels.cpp
  habana_kernels/binary_kernels.cpp
  habana_kernels/binary_inplace_kernels.cpp
  habana_kernels/compare_kernels.cpp
  habana_kernels/conv_pool_utils.cpp
  habana_kernels/embedding_kernels.cpp
  habana_kernels/fallback_helper.cpp
  habana_kernels/shape_agnostic_helper.cpp
  habana_kernels/hccl_kernels.cpp
  habana_kernels/index_kernels.cpp
  habana_kernels/instance_norm_utils.cpp
  habana_kernels/nonzero_kernel.cpp
  habana_kernels/kernel_input_checks.cpp
  habana_kernels/kernels_register.cpp
  habana_kernels/kernel_utils.cpp
  habana_kernels/lazy_kernels.cpp
  habana_kernels/lazy_optimizer_kernels.cpp
  habana_kernels/lazy_op.cpp
  habana_kernels/linear_kernels.cpp
  habana_kernels/loss_kernels.cpp
  habana_kernels/nms_kernels.cpp
  habana_kernels/norm_kernels.cpp
  habana_kernels/optimizer_kernels.cpp
  habana_kernels/random_gen_kernels.cpp
  habana_kernels/reduction_kernels.cpp
  habana_kernels/repeat.cpp
  habana_kernels/roi_align_kernels.cpp
  habana_kernels/softmax_kernels.cpp
  habana_kernels/tensor_shape_kernels.cpp
  habana_kernels/threshold_kernels.cpp
  habana_kernels/topk_kernels.cpp
  habana_kernels/unary_kernels.cpp
  habana_kernels/custom_op_kernel.cpp
  habana_lazy/aten_lazy_bridge.cpp
  habana_lazy/lazy_graph_hash_disabler.cpp
  habana_lazy/debug_utils.cpp
  habana_lazy/memlog.cpp
  habana_lazy/hpu_lazy_tensors.cpp
  habana_lazy/ir.cpp
  habana_lazy/ir_utils.cpp
  habana_lazy/tensor_impl.cpp
  habana_lazy/hlexec.cpp
  habana_lazy/habana_custom_op.cpp
  habana_lazy/user_custom_op_frontend.cpp
  habana_lazy/passes/pass_utils.cpp
  habana_lazy/passes/recalculate_batchnorm_params.cpp
  habana_lazy/passes/fold_conv_batchnorm.cpp
  habana_lazy/passes/fuse_mm_transpose.cpp
  habana_lazy/passes/fuse_bn_relu_residual_add.cpp
  habana_lazy/passes/transform_graph.cpp
  habana_lazy/passes/replace_inplace_ops.cpp
  habana_lazy/passes/replace_views_with_reshapes.cpp
  habana_lazy/lazy_arg_spec.cpp
  habana_lazy/lazy_executor.cpp
  habana_lazy/permute_tensors.cpp
  habana_lazy/sbs_debug.cpp
  habana_lazy/sbs_runner.cpp
  habana_lazy/lazy_storage.cpp
  habana_lazy/lazy_graph_hash_builder.cpp
  habana_lazy/view_utils.cpp
  habana_lazy/hpu_stage_submission.cpp
)
add_subdirectory(hpu_ops)
add_subdirectory(python_packages/habana_frameworks/torch)
target_compile_features(habana_pytorch_plugin PRIVATE cxx_std_17)
# Link against LibTorch and synapse
target_link_libraries(habana_pytorch_plugin
  PRIVATE
  Python::Python
  habana_serialization
  tensor_comparator_core
  nlohmann_json::nlohmann_json
  PUBLIC
  habana_pytorch_backend
  habana_pytorch_frontend_ops
  torch
  absl::hash
  ZLIB::ZLIB
)

target_include_directories(habana_pytorch_plugin PRIVATE ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/pytorch_helpers ${CMAKE_BINARY_DIR})

# Create symlink to latest build from tests dir
# TODO: make it play nicely with building multiple versions in build.py
add_custom_command(TARGET habana_pytorch_plugin POST_BUILD COMMAND
  ${CMAKE_COMMAND} -E create_symlink $<TARGET_FILE:habana_pytorch_plugin>
  ${CMAKE_SOURCE_DIR}/tests/$<TARGET_FILE_NAME:habana_pytorch_plugin>
  COMMAND ${CMAKE_COMMAND} -E create_symlink $<TARGET_FILE:habana_pytorch_plugin>
  $ENV{BUILD_ROOT_LATEST}/$<TARGET_FILE_NAME:habana_pytorch_plugin>
)

install(TARGETS habana_pytorch_plugin LIBRARY DESTINATION habana_torch_plugin/lib)

add_subdirectory(habana_eager)
add_habana_library(habana_pytorch2_plugin SHARED
  common/eager/utils.cpp
  pytorch_helpers/lazy_to_backend.cpp
  pytorch_helpers/habana_helpers/dtype_helpers.cpp
  pytorch_helpers/habana_helpers/frontend_utils.cpp
  pytorch_helpers/habana_helpers/kernels_accumulation.cpp
  pytorch_helpers/habana_helpers/logging.cpp
  pytorch_helpers/habana_helpers/misc_utils.cpp
  pytorch_helpers/habana_helpers/signal_handler.cpp
  pytorch_helpers/habana_helpers/stats.cpp
  pytorch_helpers/habana_helpers/thread_pool/acc_thread_pool.cpp
  pytorch_helpers/habana_helpers/thread_pool/thread_pool.cpp
  pytorch_helpers/habana_helpers/towl.cpp
  pytorch_helpers/visualize/visualize.cpp
  pytorch_helpers/serialize/export.cpp
  habana_kernels/basic_kernels.cpp
  habana_kernels/binary_inplace_kernels.cpp
  habana_kernels/binary_kernels.cpp
  habana_kernels/compare_kernels.cpp
  habana_kernels/conv_pool_utils.cpp
  habana_kernels/embedding_kernels.cpp
  habana_kernels/fallback_helper.cpp
  habana_kernels/shape_agnostic_helper.cpp
  habana_kernels/hccl_kernels.cpp
  habana_kernels/index_kernels.cpp
  habana_kernels/instance_norm_utils.cpp
  habana_kernels/kernel_input_checks.cpp
  habana_kernels/kernel_utils.cpp
  habana_kernels/linear_kernels.cpp
  habana_kernels/loss_kernels.cpp
  habana_kernels/nms_kernels.cpp
  habana_kernels/nonzero_kernel.cpp
  habana_kernels/norm_kernels.cpp
  habana_kernels/optimizer_kernels.cpp
  habana_kernels/random_gen_kernels.cpp
  habana_kernels/reduction_kernels.cpp
  habana_kernels/repeat.cpp
  habana_kernels/roi_align_kernels.cpp
  habana_kernels/softmax_kernels.cpp
  habana_kernels/tensor_shape_kernels.cpp
  habana_kernels/threshold_kernels.cpp
  habana_kernels/topk_kernels.cpp
  habana_kernels/unary_kernels.cpp
  habana_lazy/aten_lazy_bridge.cpp
  habana_lazy/debug_utils.cpp
  habana_lazy/hlexec.cpp
  habana_lazy/hpu_lazy_tensors.cpp
  habana_lazy/hpu_stage_submission.cpp
  habana_lazy/ir_utils.cpp
  habana_lazy/ir.cpp
  habana_lazy/lazy_arg_spec.cpp
  habana_lazy/lazy_executor.cpp
  habana_lazy/lazy_graph_hash_builder.cpp
  habana_lazy/lazy_graph_hash_disabler.cpp
  habana_lazy/lazy_storage.cpp
  habana_lazy/memlog.cpp
  habana_lazy/passes/fold_conv_batchnorm.cpp
  habana_lazy/passes/fuse_bn_relu_residual_add.cpp
  habana_lazy/passes/fuse_mm_transpose.cpp
  habana_lazy/passes/pass_utils.cpp
  habana_lazy/passes/recalculate_batchnorm_params.cpp
  habana_lazy/passes/replace_inplace_ops.cpp
  habana_lazy/passes/replace_views_with_reshapes.cpp
  habana_lazy/passes/transform_graph.cpp
  habana_lazy/sbs_debug.cpp
  habana_lazy/sbs_runner.cpp
  habana_lazy/tensor_impl.cpp
  habana_lazy/view_utils.cpp
  hpu_ops/lazy/binarycrossentropy_gen.cpp
  hpu_ops/lazy/binaryscalar2tensor.cpp
  hpu_ops/lazy/bitwise_gen.cpp
  hpu_ops/lazy/bitwise_shift_gen.cpp
  hpu_ops/lazy/compare_gen.cpp
  hpu_ops/lazy/div_round_gen.cpp
  hpu_ops/lazy/embedding_gen.cpp
  hpu_ops/lazy/index_select_gen.cpp
  hpu_ops/lazy/maxpool_gen.cpp
  hpu_ops/lazy/pow_gen.cpp
  hpu_ops/lazy/sort_gen.cpp
  hpu_ops/lazy/unique_gen.cpp
  hpu_ops/lazy/upsample_gen.cpp
  hpu_ops/lazy/xlogy_gen.cpp
  ${habana_pytorch2_plugin_glob_files}
)

target_include_directories(habana_pytorch2_plugin PRIVATE ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/pytorch_helpers ${CMAKE_BINARY_DIR})
target_compile_features(habana_pytorch2_plugin PRIVATE cxx_std_17)
# Link against LibTorch and synapse
target_link_libraries(habana_pytorch2_plugin
  PRIVATE
  Python::Python
  habana_serialization
  tensor_comparator_core
  nlohmann_json::nlohmann_json
  PUBLIC
  habana_pytorch_backend
  habana_pytorch2_frontend
  torch
  absl::hash
  npu::hllogger
  npu::fmt
  ZLIB::ZLIB
)

# Create symlink to latest build from tests dir
# TODO: make it play nicely with building multiple versions in build.py
add_custom_command(TARGET habana_pytorch2_plugin POST_BUILD COMMAND
  ${CMAKE_COMMAND} -E create_symlink $<TARGET_FILE:habana_pytorch2_plugin>
  ${CMAKE_SOURCE_DIR}/tests/$<TARGET_FILE_NAME:habana_pytorch2_plugin>
  COMMAND ${CMAKE_COMMAND} -E create_symlink $<TARGET_FILE:habana_pytorch2_plugin>
  $ENV{BUILD_ROOT_LATEST}/$<TARGET_FILE_NAME:habana_pytorch2_plugin>
)
add_dependencies(habana_pytorch2_plugin habana_pytorch_frontend_ops)
add_dependencies(habana_serialization pytorch_generate_env)
install(TARGETS habana_pytorch2_plugin LIBRARY DESTINATION habana_torch_plugin/lib)

option(BUILD_TESTS "Build gtest binaries" ON)

if(BUILD_TESTS)
  add_subdirectory("$ENV{HABANA_SOFTWARE_STACK}/3rd-parties/googletest_1_13/"
    ${CMAKE_BINARY_DIR}/ThirdParty/googletest/
    EXCLUDE_FROM_ALL
    SYSTEM)
  add_subdirectory(tests/cpp)
endif()

option(BUILD_PKGS "Build python packages" OFF)
option(INSTALL_PKGS "Install python packages" OFF)

# additional args will be treated as dependencies - relative to the PACKAGE location
function(build_or_install_wheel PACKAGE)
  get_filename_component(name ${PACKAGE} NAME)
  set(OUTPUT "${CMAKE_BINARY_DIR}/pkgs/${name}")

  set(PIP ${Python_EXECUTABLE} -m pip)

  if(INSTALL_PKGS)
    set(PIPARGS install -U ${PACKAGE}/)
  else()
    set(PIPARGS wheel --no-deps --wheel-dir=${CMAKE_BINARY_DIR}/pkgs ${PACKAGE})
  endif()

  list(TRANSFORM ARGN PREPEND "${PACKAGE}/" OUTPUT_VARIABLE DEPS)
  add_custom_command(OUTPUT ${OUTPUT}
    COMMAND ${PIP} ${PIPARGS}
    COMMAND ${CMAKE_COMMAND} -E touch ${OUTPUT}
    DEPENDS habana_pytorch_plugin habana_pytorch2_plugin
    DEPENDS ${DEPS})
  add_custom_target(${name} ALL DEPENDS ${OUTPUT})
endfunction()

if(BUILD_PKGS)
  build_or_install_wheel(${PROJECT_SOURCE_DIR}/pytorch_helpers/dataloader/habana_dataloader
    __init__.py
    habana_dataloader/__init__.py
    habana_dataloader/aeon_config.py
    habana_dataloader/aeon_manifest.py
    habana_dataloader/aeon_ssd_configurator.py
    habana_dataloader/aeon_transformers.py
    habana_dataloader/habana_dataset.py
    include/blocking_queue.h
    include/data_loader.h
    include/pybind11_json.hpp
    LICENSE.txt
    main.cpp
    setup.py
  )
  build_or_install_wheel(${PROJECT_SOURCE_DIR}/python_packages
    habana_frameworks/torch/__init__.py
    habana_frameworks/torch/activity_profiler/__init__.py
    habana_frameworks/torch/activity_profiler/activity_profiler.py
    habana_frameworks/torch/activity_profiler/csrc/bindings.cpp
    habana_frameworks/torch/core/__init__.py
    habana_frameworks/torch/core/bindings.cpp
    habana_frameworks/torch/core/hccl/__init__.py
    habana_frameworks/torch/core/step_closure.py
    habana_frameworks/torch/core/weight_sharing.py
    habana_frameworks/torch/distributed/__init__.py
    habana_frameworks/torch/distributed/hccl/__init__.py
    habana_frameworks/torch/distributed/hccl/process_group_lazy_hccl.cpp
    habana_frameworks/torch/distributed/hccl/process_group_lazy_hccl.hpp
    habana_frameworks/torch/distributed/hccl/process_group_eager_hccl.cpp
    habana_frameworks/torch/distributed/hccl/process_group_eager_hccl.hpp
    habana_frameworks/torch/distributed/hccl/ProcessGroupHCCL.cpp
    habana_frameworks/torch/distributed/hccl/ProcessGroupHCCL.hpp
    habana_frameworks/torch/distributed/hccl/reducer_timer.cpp
    habana_frameworks/torch/dynamo/compile_backend/recipe_compiler.cpp
    habana_frameworks/torch/hpex/__init__.py
    habana_frameworks/torch/hpex/csrc/bindings.cpp
    habana_frameworks/torch/hpex/csrc/bindings.h
    habana_frameworks/torch/hpex/csrc/embedding_bag_preproc_main.cpp
    habana_frameworks/torch/hpex/csrc/embedding_bag_preproc.cpp
    habana_frameworks/torch/hpex/csrc/radix_sort.h
    habana_frameworks/torch/hpex/kernels/__init__.py
    habana_frameworks/torch/hpex/kernels/CustomNms.py
    habana_frameworks/torch/hpex/kernels/CustomRoiAlign.py
    habana_frameworks/torch/hpex/kernels/EmbeddingBag.py
    habana_frameworks/torch/hpex/kernels/EmbeddingBagPreproc.py
    habana_frameworks/torch/hpex/kernels/fbgemm.py
    habana_frameworks/torch/hpex/kernels/Fp8Ops.py
    habana_frameworks/torch/hpex/movingavrg/__init__.py
    habana_frameworks/torch/hpex/movingavrg/FusedEMA.py
    habana_frameworks/torch/hpex/normalization/__init__.py
    habana_frameworks/torch/hpex/normalization/FusedClipNorm.py
    habana_frameworks/torch/hpex/optimizers/__init__.py
    habana_frameworks/torch/hpex/optimizers/distributed/__init__.py
    habana_frameworks/torch/hpex/optimizers/distributed/FusedAdamW.py
    habana_frameworks/torch/hpex/optimizers/FusedAdagrad.py
    habana_frameworks/torch/hpex/optimizers/FusedAdamW.py
    habana_frameworks/torch/hpex/optimizers/FusedLamb.py
    habana_frameworks/torch/hpex/optimizers/FusedLars.py
    habana_frameworks/torch/hpex/optimizers/FusedResourceApplyMomentum.py
    habana_frameworks/torch/hpex/optimizers/FusedSGD.py
    habana_frameworks/torch/hpex/optimizers/SparseAdagrad.py
    habana_frameworks/torch/hpex/optimizers/SparseSGD.py
    habana_frameworks/torch/hpu/__init__.py
    habana_frameworks/torch/hpu/_utils.py
    habana_frameworks/torch/hpu/csrc/Stream.cpp
    habana_frameworks/torch/hpu/csrc/Event.cpp
    habana_frameworks/torch/hpu/csrc/Module.cpp
    habana_frameworks/torch/hpu/csrc/bindings.cpp
    habana_frameworks/torch/hpu/events.py
    habana_frameworks/torch/hpu/graphs.py
    habana_frameworks/torch/hpu/memory.py
    habana_frameworks/torch/hpu/random.py
    habana_frameworks/torch/hpu/streams.py
    habana_frameworks/torch/hpu/metrics/__init__.py
    habana_frameworks/torch/hpu/metrics/exceptions.py
    habana_frameworks/torch/hpu/metrics/metrics.py
    habana_frameworks/torch/hpu/metrics/saver.py
    habana_frameworks/torch/profiler/__init__.py
    habana_frameworks/torch/profiler/ProfilerApi.py
    habana_frameworks/torch/utils/__init__.py
    habana_frameworks/torch/utils/debug/__init__.py
    habana_frameworks/torch/utils/debug/csrc/bindings.cpp
    habana_frameworks/torch/utils/debug/README.txt
    habana_frameworks/torch/utils/distributed_utils.py
    habana_frameworks/torch/utils/event_dispatcher/__init__.py
    habana_frameworks/torch/utils/event_dispatcher/csrc/bindings.cpp
    habana_frameworks/torch/utils/experimental/__init__.py
    habana_frameworks/torch/utils/experimental/csrc/bindings.cpp
    habana_frameworks/torch/utils/experimental/distributed_emulation.py
    habana_frameworks/torch/utils/lib_utils.py
    habana_frameworks/torch/utils/library_loader.py
    habana_frameworks/torch/utils/profiler/__init__.py
    habana_frameworks/torch/utils/profiler/csrc/bindings.cpp
    LICENSE.txt
    setup.py
    torch_hpu/__init__.py
  )
endif()
