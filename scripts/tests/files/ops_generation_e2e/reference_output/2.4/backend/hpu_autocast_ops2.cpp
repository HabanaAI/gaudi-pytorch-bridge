// Autogenerated file by gen_op.py. Do not edit directly!
/******************************************************************************
 * Copyright (C) 2022-2023 Habana Labs, Ltd. an Intel Company
 * All Rights Reserved.
 *
 * Unauthorized copying of this file or any element(s) within it, via any medium
 * is strictly prohibited.
 * This file contains Habana Labs, Ltd. proprietary and confidential information
 * and is subject to the confidentiality and license agreements under which it
 * was provided.
 *
 *******************************************************************************
 */

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
#if IS_PYTORCH_AT_LEAST(2, 4)
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
#endif

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(_cufft_set_plan_cache_max_size, "_cufft_set_plan_cache_max_size", void(DeviceIndex, int64_t))
  Hpu_KERNEL(_cufft_clear_plan_cache, "_cufft_clear_plan_cache", void(DeviceIndex))
  Hpu_KERNEL(index, "index.Tensor", at::Tensor(const at::Tensor &, const c10::List<c10::optional<at::Tensor>> &))
  Hpu_KERNEL(_unsafe_index, "_unsafe_index.Tensor", at::Tensor(const at::Tensor &, const c10::List<c10::optional<at::Tensor>> &))
  Hpu_KERNEL(index_copy, "index_copy", at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(index_copy, "index_copy.dimname", at::Tensor(const at::Tensor &, at::Dimname, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(index_put, "index_put", at::Tensor(const at::Tensor &, const c10::List<c10::optional<at::Tensor>> &, const at::Tensor &, bool))
  Hpu_KERNEL(_unsafe_index_put, "_unsafe_index_put", at::Tensor(const at::Tensor &, const c10::List<c10::optional<at::Tensor>> &, const at::Tensor &, bool))
  Hpu_KERNEL(instance_norm, "instance_norm", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool, double, double, bool))
  Hpu_KERNEL(isclose, "isclose", at::Tensor(const at::Tensor &, const at::Tensor &, double, double, bool))
  Hpu_KERNEL(isin, "isin.Tensor_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(isin, "isin.Tensor_Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, bool, bool))
  Hpu_KERNEL(isin, "isin.Scalar_Tensor", at::Tensor(const at::Scalar &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(isnan, "isnan", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(is_distributed, "is_distributed", bool(const at::Tensor &))
  Hpu_KERNEL(is_floating_point, "is_floating_point", bool(const at::Tensor &))
  Hpu_KERNEL(is_complex, "is_complex", bool(const at::Tensor &))
  Hpu_KERNEL(is_conj, "is_conj", bool(const at::Tensor &))
  Hpu_KERNEL(_is_zerotensor, "_is_zerotensor", bool(const at::Tensor &))
  Hpu_KERNEL(is_neg, "is_neg", bool(const at::Tensor &))
  Hpu_KERNEL(isreal, "isreal", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(is_nonzero, "is_nonzero", bool(const at::Tensor &))
  Hpu_KERNEL(is_same_size, "is_same_size", bool(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(is_signed, "is_signed", bool(const at::Tensor &))
  Hpu_KERNEL(is_inference, "is_inference", bool(const at::Tensor &))
  Hpu_KERNEL(kl_div, "kl_div", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(kron, "kron", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(kthvalue, "kthvalue", tuple_2_tensors(const at::Tensor &, int64_t, int64_t, bool))
  Hpu_KERNEL(kthvalue, "kthvalue.dimname", tuple_2_tensors(const at::Tensor &, int64_t, at::Dimname, bool))
  Hpu_KERNEL(layer_norm, "layer_norm", at::Tensor(const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, double, bool))
  Hpu_KERNEL(native_layer_norm, "native_layer_norm", tuple_3_tensors(const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, double))
  Hpu_KERNEL(nan_to_num, "nan_to_num", at::Tensor(const at::Tensor &, c10::optional<double>, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(linear, "linear", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(mkldnn_linear, "mkldnn_linear", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(_cslt_compress, "_cslt_compress", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_cslt_sparse_mm, "_cslt_sparse_mm", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, c10::optional<at::ScalarType>, bool))
  Hpu_KERNEL(_sparse_semi_structured_linear, "_sparse_semi_structured_linear", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::optional<c10::string_view>))
  Hpu_KERNEL(_mixed_dtypes_linear, "_mixed_dtypes_linear", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::optional<c10::string_view>))
  Hpu_KERNEL(fbgemm_linear_int8_weight_fp32_activation, "fbgemm_linear_int8_weight_fp32_activation", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(fbgemm_linear_int8_weight, "fbgemm_linear_int8_weight", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(fbgemm_linear_quantize_weight, "fbgemm_linear_quantize_weight", tuple_2_tensors_double_int64(const at::Tensor &))
  Hpu_KERNEL(fbgemm_pack_gemm_matrix_fp16, "fbgemm_pack_gemm_matrix_fp16", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(fbgemm_linear_fp16_weight_fp32_activation, "fbgemm_linear_fp16_weight_fp32_activation", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(fbgemm_linear_fp16_weight, "fbgemm_linear_fp16_weight", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(fbgemm_pack_quantized_matrix, "fbgemm_pack_quantized_matrix", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(fbgemm_pack_quantized_matrix, "fbgemm_pack_quantized_matrix.KN", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(ldexp, "ldexp.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(linspace, "linspace", at::Tensor(const at::Scalar &, const at::Scalar &, int64_t, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(linspace, "linspace.Tensor_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(linspace, "linspace.Tensor_Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, int64_t, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(linspace, "linspace.Scalar_Tensor", at::Tensor(const at::Scalar &, const at::Tensor &, int64_t, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(log, "log", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(log10, "log10", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(log1p, "log1p", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(log2, "log2", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(logaddexp, "logaddexp", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(logaddexp2, "logaddexp2", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(xlogy, "xlogy.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(xlogy, "xlogy.Scalar_Self", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(xlogy, "xlogy.Scalar_Other", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(logspace, "logspace", at::Tensor(const at::Scalar &, const at::Scalar &, int64_t, double, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(logspace, "logspace.Tensor_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, double, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(logspace, "logspace.Tensor_Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, int64_t, double, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(logspace, "logspace.Scalar_Tensor", at::Tensor(const at::Scalar &, const at::Tensor &, int64_t, double, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(log_softmax, "log_softmax.int", at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>))
  Hpu_KERNEL(log_softmax, "log_softmax.Dimname", at::Tensor(const at::Tensor &, at::Dimname, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_log_softmax, "_log_softmax", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(_logcumsumexp, "_logcumsumexp", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(logcumsumexp, "logcumsumexp", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(logcumsumexp, "logcumsumexp.dimname", at::Tensor(const at::Tensor &, at::Dimname))
  Hpu_KERNEL(logsumexp, "logsumexp", at::Tensor(const at::Tensor &, at::IntArrayRef, bool))
  Hpu_KERNEL(logsumexp, "logsumexp.names", at::Tensor(const at::Tensor &, at::DimnameList, bool))
  Hpu_KERNEL(margin_ranking_loss, "margin_ranking_loss", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, int64_t))
  Hpu_KERNEL(matmul, "matmul", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(matrix_power, "matrix_power", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(matrix_exp, "matrix_exp", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_aminmax, "_aminmax", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(_aminmax, "_aminmax.dim", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(aminmax, "aminmax", tuple_2_tensors(const at::Tensor &, c10::optional<int64_t>, bool))
  Hpu_KERNEL(_compute_linear_combination, "_compute_linear_combination", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(max, "max.dim", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(max, "max.names_dim", tuple_2_tensors(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(amax, "amax", at::Tensor(const at::Tensor &, at::IntArrayRef, bool))
  Hpu_KERNEL(max_pool1d_with_indices, "max_pool1d_with_indices", tuple_2_tensors(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(max_pool1d, "max_pool1d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(max_pool2d, "max_pool2d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(mkldnn_max_pool2d, "mkldnn_max_pool2d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(mkldnn_max_pool3d, "mkldnn_max_pool3d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(quantized_max_pool1d, "quantized_max_pool1d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(quantized_max_pool2d, "quantized_max_pool2d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(quantized_max_pool3d, "quantized_max_pool3d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(max_pool3d, "max_pool3d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(mean, "mean", at::Tensor(const at::Tensor &, c10::optional<at::ScalarType>))
  Hpu_KERNEL(mean, "mean.dim", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(mean, "mean.names_dim", at::Tensor(const at::Tensor &, at::DimnameList, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(nanmean, "nanmean", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(median, "median", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(median, "median.dim", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(median, "median.names_dim", tuple_2_tensors(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(nanmedian, "nanmedian", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(nanmedian, "nanmedian.dim", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(nanmedian, "nanmedian.names_dim", tuple_2_tensors(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(min, "min.dim", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(min, "min.names_dim", tuple_2_tensors(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(amin, "amin", at::Tensor(const at::Tensor &, at::IntArrayRef, bool))
  Hpu_KERNEL(_mps_convolution, "_mps_convolution", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t))
  Hpu_KERNEL(mkldnn_convolution, "mkldnn_convolution", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t))
  Hpu_KERNEL(mkldnn_rnn_layer, "mkldnn_rnn_layer", tuple_4_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, at::IntArrayRef, int64_t, int64_t, int64_t, bool, bool, bool, bool))
  Hpu_KERNEL(miopen_batch_norm, "miopen_batch_norm", tuple_3_tensors(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool, double, double))
  Hpu_KERNEL(miopen_convolution, "miopen_convolution", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t, bool, bool))
  Hpu_KERNEL(miopen_convolution_transpose, "miopen_convolution_transpose", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t, bool, bool))
  Hpu_KERNEL(miopen_depthwise_convolution, "miopen_depthwise_convolution", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t, bool, bool))
  Hpu_KERNEL(miopen_convolution_relu, "miopen_convolution_relu", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t))
  Hpu_KERNEL(miopen_convolution_add_relu, "miopen_convolution_add_relu", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Scalar> &, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, int64_t))
  Hpu_KERNEL(miopen_rnn, "miopen_rnn", tuple_5_tensors(const at::Tensor &, at::TensorList, int64_t, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t, int64_t, bool, double, bool, bool, at::IntArrayRef, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(mm, "mm", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_int_mm, "_int_mm", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_convert_weight_to_int4pack, "_convert_weight_to_int4pack", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(_weight_int4pack_mm, "_weight_int4pack_mm", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &))
  Hpu_KERNEL(_sparse_mm, "_sparse_mm", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_sparse_mm, "_sparse_mm.reduce", at::Tensor(const at::Tensor &, const at::Tensor &, c10::string_view))
  Hpu_KERNEL(_sparse_sparse_matmul, "_sparse_sparse_matmul", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(mode, "mode", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(mode, "mode.dimname", tuple_2_tensors(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(mul, "mul.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(mul, "mul.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(multiply, "multiply.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(multiply, "multiply.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(mv, "mv", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(mvlgamma, "mvlgamma", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(narrow_copy, "narrow_copy", at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t))
  Hpu_KERNEL(narrow, "narrow", at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t))
  Hpu_KERNEL(narrow, "narrow.Tensor", at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, int64_t))
  Hpu_KERNEL(native_batch_norm, "native_batch_norm", tuple_3_tensors(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool, double, double))
  Hpu_KERNEL(_native_batch_norm_legit_no_training, "_native_batch_norm_legit_no_training", tuple_3_tensors(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const at::Tensor &, const at::Tensor &, double, double))
  Hpu_KERNEL(_native_batch_norm_legit, "_native_batch_norm_legit.no_stats", tuple_3_tensors(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool, double, double))
}

} // namespace
} // namespace autocast
} // namespace at

