// Autogenerated file by gen_op.py. Do not edit directly!
/******************************************************************************
 * Copyright (C) 2022-2023 Habana Labs, Ltd. an Intel Company
 * All Rights Reserved.
 *
 * Unauthorized copying of this file or any element(s) within it, via any medium
 * is strictly prohibited.
 * This file contains Habana Labs, Ltd. proprietary and confidential information
 * and is subject to the confidentiality and license agreements under which it
 * was provided.
 *
 *******************************************************************************
 */

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
#if IS_PYTORCH_AT_LEAST(2, 4)
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
#endif

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(_make_dual_copy, "_make_dual_copy", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(view_as_real_copy, "view_as_real_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(view_as_complex_copy, "view_as_complex_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_conj_copy, "_conj_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_neg_view_copy, "_neg_view_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(as_strided_copy, "as_strided_copy", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::IntArrayRef, c10::optional<int64_t>))
  Hpu_KERNEL(_sparse_broadcast_to_copy, "_sparse_broadcast_to_copy", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(diagonal_copy, "diagonal_copy", at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t))
  Hpu_KERNEL(expand_copy, "expand_copy", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool))
  Hpu_KERNEL(permute_copy, "permute_copy", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(_reshape_alias_copy, "_reshape_alias_copy", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(select_copy, "select_copy.int", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(detach_copy, "detach_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(slice_copy, "slice_copy.Tensor", at::Tensor(const at::Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, int64_t))
  Hpu_KERNEL(split_copy, "split_copy.Tensor", ::std::vector<at::Tensor>(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(split_with_sizes_copy, "split_with_sizes_copy", ::std::vector<at::Tensor>(const at::Tensor &, c10::IntArrayRef, int64_t))
  Hpu_KERNEL(squeeze_copy, "squeeze_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(squeeze_copy, "squeeze_copy.dim", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(squeeze_copy, "squeeze_copy.dims", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(t_copy, "t_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(transpose_copy, "transpose_copy.int", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(unsqueeze_copy, "unsqueeze_copy", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(_indices_copy, "_indices_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_values_copy, "_values_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(indices_copy, "indices_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(values_copy, "values_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(crow_indices_copy, "crow_indices_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(col_indices_copy, "col_indices_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(ccol_indices_copy, "ccol_indices_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(row_indices_copy, "row_indices_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(unbind_copy, "unbind_copy.int", ::std::vector<at::Tensor>(const at::Tensor &, int64_t))
  Hpu_KERNEL(view_copy, "view_copy", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(view_copy, "view_copy.dtype", at::Tensor(const at::Tensor &, at::ScalarType))
  Hpu_KERNEL(unfold_copy, "unfold_copy", at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t))
  Hpu_KERNEL(alias_copy, "alias_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_nested_tensor_softmax_with_shape, "_nested_tensor_softmax_with_shape", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_transformer_encoder_layer_fwd, "_transformer_encoder_layer_fwd", at::Tensor(const at::Tensor &, int64_t, int64_t, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool, double, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::optional<int64_t>))
  Hpu_KERNEL(_native_multi_head_attention, "_native_multi_head_attention", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, bool, bool, c10::optional<int64_t>))
  Hpu_KERNEL(scaled_dot_product_attention, "scaled_dot_product_attention", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, double, bool, c10::optional<double>))
  Hpu_KERNEL(_fused_sdp_choice, "_fused_sdp_choice", int64_t(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, double, bool, c10::optional<double>))
  Hpu_KERNEL(_scaled_dot_product_attention_math, "_scaled_dot_product_attention_math", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, double, bool, const c10::optional<at::Tensor> &, c10::optional<double>))
  Hpu_KERNEL(_scaled_dot_product_efficient_attention, "_scaled_dot_product_efficient_attention", tuple_4_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, bool, double, bool, c10::optional<double>))
  Hpu_KERNEL(_flash_attention_forward, "_flash_attention_forward", tuple_5_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, int64_t, int64_t, double, bool, bool, c10::optional<double>))
  Hpu_KERNEL(_triton_scaled_dot_attention, "_triton_scaled_dot_attention", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double))
  Hpu_KERNEL(_triton_multi_head_attention, "_triton_multi_head_attention", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(special_airy_ai, "special_airy_ai", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_bessel_j0, "special_bessel_j0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_bessel_j1, "special_bessel_j1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_bessel_y0, "special_bessel_y0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_bessel_y1, "special_bessel_y1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_t, "special_chebyshev_polynomial_t", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_t, "special_chebyshev_polynomial_t.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_t, "special_chebyshev_polynomial_t.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_chebyshev_polynomial_u, "special_chebyshev_polynomial_u", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_u, "special_chebyshev_polynomial_u.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_u, "special_chebyshev_polynomial_u.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_chebyshev_polynomial_v, "special_chebyshev_polynomial_v", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_v, "special_chebyshev_polynomial_v.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_v, "special_chebyshev_polynomial_v.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_chebyshev_polynomial_w, "special_chebyshev_polynomial_w", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_w, "special_chebyshev_polynomial_w.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_chebyshev_polynomial_w, "special_chebyshev_polynomial_w.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_hermite_polynomial_h, "special_hermite_polynomial_h", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_hermite_polynomial_h, "special_hermite_polynomial_h.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_hermite_polynomial_h, "special_hermite_polynomial_h.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_hermite_polynomial_he, "special_hermite_polynomial_he", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_hermite_polynomial_he, "special_hermite_polynomial_he.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_hermite_polynomial_he, "special_hermite_polynomial_he.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_laguerre_polynomial_l, "special_laguerre_polynomial_l", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_laguerre_polynomial_l, "special_laguerre_polynomial_l.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_laguerre_polynomial_l, "special_laguerre_polynomial_l.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_legendre_polynomial_p, "special_legendre_polynomial_p", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_legendre_polynomial_p, "special_legendre_polynomial_p.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_legendre_polynomial_p, "special_legendre_polynomial_p.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_modified_bessel_i0, "special_modified_bessel_i0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_modified_bessel_i1, "special_modified_bessel_i1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_modified_bessel_k0, "special_modified_bessel_k0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_modified_bessel_k1, "special_modified_bessel_k1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_scaled_modified_bessel_k0, "special_scaled_modified_bessel_k0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_scaled_modified_bessel_k1, "special_scaled_modified_bessel_k1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_t, "special_shifted_chebyshev_polynomial_t", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_t, "special_shifted_chebyshev_polynomial_t.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_t, "special_shifted_chebyshev_polynomial_t.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_u, "special_shifted_chebyshev_polynomial_u", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_u, "special_shifted_chebyshev_polynomial_u.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_u, "special_shifted_chebyshev_polynomial_u.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_v, "special_shifted_chebyshev_polynomial_v", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_v, "special_shifted_chebyshev_polynomial_v.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_v, "special_shifted_chebyshev_polynomial_v.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_w, "special_shifted_chebyshev_polynomial_w", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_w, "special_shifted_chebyshev_polynomial_w.x_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_shifted_chebyshev_polynomial_w, "special_shifted_chebyshev_polynomial_w.n_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_spherical_bessel_j0, "special_spherical_bessel_j0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_foobar, "_foobar", at::Tensor(const at::Tensor &, bool, bool, bool))
  Hpu_KERNEL(_propagate_xla_data, "_propagate_xla_data", void(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(bernoulli, "bernoulli.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(embedding_renorm, "embedding_renorm", at::Tensor(const at::Tensor &, const at::Tensor &, double, double))
  Hpu_KERNEL(resize, "resize", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<at::MemoryFormat>))
  Hpu_KERNEL(_resize_output, "_resize_output", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::Device))
  Hpu_KERNEL(_index_put_impl, "_index_put_impl", at::Tensor(const at::Tensor &, const c10::List<c10::optional<at::Tensor>> &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(_native_batch_norm_legit_functional, "_native_batch_norm_legit_functional", tuple_5_tensors(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const at::Tensor &, const at::Tensor &, bool, double, double))
  Hpu_KERNEL(resize_as, "resize_as", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<at::MemoryFormat>))
  Hpu_KERNEL(resize_as_sparse, "resize_as_sparse", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(zero, "zero", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(sparse_resize, "sparse_resize", at::Tensor(const at::Tensor &, at::IntArrayRef, int64_t, int64_t))
  Hpu_KERNEL(sparse_resize_and_clear, "sparse_resize_and_clear", at::Tensor(const at::Tensor &, at::IntArrayRef, int64_t, int64_t))
  Hpu_KERNEL(_coalesced, "_coalesced", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(copy_sparse_to_sparse, "copy_sparse_to_sparse", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(_fused_moving_avg_obs_fq_helper_functional, "_fused_moving_avg_obs_fq_helper_functional", tuple_6_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, double, int64_t, int64_t, int64_t, bool, bool))
  Hpu_KERNEL(set, "set.source_Storage", at::Tensor(const at::Tensor &, at::Storage))
  Hpu_KERNEL(set, "set.source_Storage_storage_offset", at::Tensor(const at::Tensor &, at::Storage, int64_t, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(set, "set.source_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(set, "set", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(random, "random.from", at::Tensor(const at::Tensor &, int64_t, c10::optional<int64_t>, c10::optional<at::Generator>))
  Hpu_KERNEL(random, "random.to", at::Tensor(const at::Tensor &, int64_t, c10::optional<at::Generator>))
  Hpu_KERNEL(random, "random", at::Tensor(const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(uniform, "uniform", at::Tensor(const at::Tensor &, double, double, c10::optional<at::Generator>))
  Hpu_KERNEL(cauchy, "cauchy", at::Tensor(const at::Tensor &, double, double, c10::optional<at::Generator>))
  Hpu_KERNEL(log_normal, "log_normal", at::Tensor(const at::Tensor &, double, double, c10::optional<at::Generator>))
  Hpu_KERNEL(exponential, "exponential", at::Tensor(const at::Tensor &, double, c10::optional<at::Generator>))
  Hpu_KERNEL(geometric, "geometric", at::Tensor(const at::Tensor &, double, c10::optional<at::Generator>))
  Hpu_KERNEL(_amp_foreach_non_finite_check_and_unscale, "_amp_foreach_non_finite_check_and_unscale", tuple_vector_tensor(at::TensorList, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_amp_update_scale, "_amp_update_scale", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, double, int64_t))
  Hpu_KERNEL(_foreach_zero, "_foreach_zero", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_copy, "_foreach_copy", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, bool))
  Hpu_KERNEL(_fused_adam, "_fused_adam", tuple_5_vectors(at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, double, double, double, double, double, bool, bool, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(_fused_adam, "_fused_adam.tensor_lr", tuple_5_vectors(at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, const at::Tensor &, double, double, double, double, bool, bool, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(_fused_adamw, "_fused_adamw", tuple_5_vectors(at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, double, double, double, double, double, bool, bool, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(_fused_adamw, "_fused_adamw.tensor_lr", tuple_5_vectors(at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, at::TensorList, const at::Tensor &, double, double, double, double, bool, bool, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &))
}

} // namespace
} // namespace autocast
} // namespace at

