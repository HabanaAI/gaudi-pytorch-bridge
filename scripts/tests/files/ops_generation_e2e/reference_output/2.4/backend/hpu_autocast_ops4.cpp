// Autogenerated file by gen_op.py. Do not edit directly!
/******************************************************************************
 * Copyright (C) 2022-2023 Habana Labs, Ltd. an Intel Company
 * All Rights Reserved.
 *
 * Unauthorized copying of this file or any element(s) within it, via any medium
 * is strictly prohibited.
 * This file contains Habana Labs, Ltd. proprietary and confidential information
 * and is subject to the confidentiality and license agreements under which it
 * was provided.
 *
 *******************************************************************************
 */

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
#if IS_PYTORCH_AT_LEAST(2, 4)
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
#endif

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(std, "std.names_dim", at::Tensor(const at::Tensor &, at::DimnameList, bool, bool))
  Hpu_KERNEL(std, "std.correction_names", at::Tensor(const at::Tensor &, at::DimnameList, const c10::optional<at::Scalar> &, bool))
  Hpu_KERNEL(prod, "prod", at::Tensor(const at::Tensor &, c10::optional<at::ScalarType>))
  Hpu_KERNEL(prod, "prod.dim_int", at::Tensor(const at::Tensor &, int64_t, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(prod, "prod.dim_Dimname", at::Tensor(const at::Tensor &, at::Dimname, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(t, "t", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(tan, "tan", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(tanh, "tanh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(tensordot, "tensordot", at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef))
  Hpu_KERNEL(threshold, "threshold", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(tile, "tile", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(transpose, "transpose.int", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(transpose, "transpose.Dimname", at::Tensor(const at::Tensor &, at::Dimname, at::Dimname))
  Hpu_KERNEL(_mkldnn_transpose, "_mkldnn_transpose", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(one_hot, "one_hot", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(flip, "flip", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(fliplr, "fliplr", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(flipud, "flipud", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(roll, "roll", at::Tensor(const at::Tensor &, c10::IntArrayRef, at::IntArrayRef))
  Hpu_KERNEL(rot90, "rot90", at::Tensor(const at::Tensor &, int64_t, at::IntArrayRef))
  Hpu_KERNEL(trapezoid, "trapezoid.x", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(trapezoid, "trapezoid.dx", at::Tensor(const at::Tensor &, const at::Scalar &, int64_t))
  Hpu_KERNEL(trapz, "trapz.x", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(trapz, "trapz.dx", at::Tensor(const at::Tensor &, double, int64_t))
  Hpu_KERNEL(_transform_bias_rescale_qkv, "_transform_bias_rescale_qkv", tuple_3_tensors(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(_nested_tensor_from_mask, "_nested_tensor_from_mask", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(_nested_tensor_from_mask_left_aligned, "_nested_tensor_from_mask_left_aligned", bool(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_nested_from_padded, "_nested_from_padded", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(_nested_from_padded_and_nested_example, "_nested_from_padded_and_nested_example", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_nested_view_from_buffer, "_nested_view_from_buffer", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_nested_view_from_buffer_copy, "_nested_view_from_buffer_copy", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_trilinear, "_trilinear", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t))
  Hpu_KERNEL(triplet_margin_loss, "triplet_margin_loss", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, double, double, bool, int64_t))
  Hpu_KERNEL(trunc, "trunc", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(fix, "fix", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_has_compatible_shallow_copy_type, "_has_compatible_shallow_copy_type", bool(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_unique, "_unique", tuple_2_tensors(const at::Tensor &, bool, bool))
  Hpu_KERNEL(unique_dim, "unique_dim", tuple_3_tensors(const at::Tensor &, int64_t, bool, bool, bool))
  Hpu_KERNEL(unique_consecutive, "unique_consecutive", tuple_3_tensors(const at::Tensor &, bool, bool, c10::optional<int64_t>))
  Hpu_KERNEL(unique_dim_consecutive, "unique_dim_consecutive", tuple_3_tensors(const at::Tensor &, int64_t, bool, bool))
  Hpu_KERNEL(_unique2, "_unique2", tuple_3_tensors(const at::Tensor &, bool, bool, bool))
  Hpu_KERNEL(_unsafe_view, "_unsafe_view", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(unsqueeze, "unsqueeze", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(vander, "vander", at::Tensor(const at::Tensor &, c10::optional<int64_t>, bool))
  Hpu_KERNEL(var, "var", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(var, "var.dim", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, bool))
  Hpu_KERNEL(var, "var.correction", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, const c10::optional<at::Scalar> &, bool))
  Hpu_KERNEL(var, "var.names_dim", at::Tensor(const at::Tensor &, at::DimnameList, bool, bool))
  Hpu_KERNEL(var, "var.correction_names", at::Tensor(const at::Tensor &, at::DimnameList, const c10::optional<at::Scalar> &, bool))
  Hpu_KERNEL(var_mean, "var_mean", tuple_2_tensors(const at::Tensor &, bool))
  Hpu_KERNEL(var_mean, "var_mean.dim", tuple_2_tensors(const at::Tensor &, at::OptionalIntArrayRef, bool, bool))
  Hpu_KERNEL(var_mean, "var_mean.correction", tuple_2_tensors(const at::Tensor &, at::OptionalIntArrayRef, const c10::optional<at::Scalar> &, bool))
  Hpu_KERNEL(var_mean, "var_mean.names_dim", tuple_2_tensors(const at::Tensor &, at::DimnameList, bool, bool))
  Hpu_KERNEL(var_mean, "var_mean.correction_names", tuple_2_tensors(const at::Tensor &, at::DimnameList, const c10::optional<at::Scalar> &, bool))
  Hpu_KERNEL(where, "where.self", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(where, "where.ScalarSelf", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(where, "where.ScalarOther", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(where, "where.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(where, "where", ::std::vector<at::Tensor>(const at::Tensor &))
  Hpu_KERNEL(norm_except_dim, "norm_except_dim", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(_weight_norm, "_weight_norm", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(_weight_norm_interface, "_weight_norm_interface", tuple_2_tensors(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(zeros, "zeros.names", at::Tensor(at::IntArrayRef, c10::optional<at::DimnameList>, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_efficientzerotensor, "_efficientzerotensor", at::Tensor(c10::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(zeros, "zeros", at::Tensor(c10::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(zeros_like, "zeros_like", at::Tensor(const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<at::MemoryFormat>))
  Hpu_KERNEL(_standard_gamma_grad, "_standard_gamma_grad", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_standard_gamma, "_standard_gamma", at::Tensor(const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(_dirichlet_grad, "_dirichlet_grad", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_sample_dirichlet, "_sample_dirichlet", at::Tensor(const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(poisson, "poisson", at::Tensor(const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(binomial, "binomial", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(native_norm, "native_norm", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(native_norm, "native_norm.ScalarOpt_dim_dtype", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::IntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_sum, "_sparse_sum", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_sparse_sum, "_sparse_sum.dtype", at::Tensor(const at::Tensor &, at::ScalarType))
  Hpu_KERNEL(_sparse_sum, "_sparse_sum.dim", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(_sparse_sum, "_sparse_sum.dim_dtype", at::Tensor(const at::Tensor &, at::IntArrayRef, at::ScalarType))
  Hpu_KERNEL(_sparse_csr_sum, "_sparse_csr_sum.dim_dtype", at::Tensor(const at::Tensor &, at::IntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_csr_prod, "_sparse_csr_prod.dim_dtype", at::Tensor(const at::Tensor &, at::IntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_softmax, "_sparse_softmax.int", at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_softmax, "_sparse_softmax.Dimname", at::Tensor(const at::Tensor &, at::Dimname, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_softmax, "_sparse_softmax", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(_sparse_log_softmax, "_sparse_log_softmax.int", at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_log_softmax, "_sparse_log_softmax.Dimname", at::Tensor(const at::Tensor &, at::Dimname, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_sparse_log_softmax, "_sparse_log_softmax", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(_spdiags, "_spdiags", at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::Layout>))
  Hpu_KERNEL(norm, "norm.ScalarOpt_dtype", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::ScalarType))
  Hpu_KERNEL(norm, "norm.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(norm, "norm.ScalarOpt_dim_dtype", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::IntArrayRef, bool, at::ScalarType))
  Hpu_KERNEL(norm, "norm.ScalarOpt_dim", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::IntArrayRef, bool))
  Hpu_KERNEL(norm, "norm.names_ScalarOpt_dim_dtype", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::DimnameList, bool, at::ScalarType))
  Hpu_KERNEL(norm, "norm.names_ScalarOpt_dim", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::DimnameList, bool))
  Hpu_KERNEL(frexp, "frexp.Tensor", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(frobenius_norm, "frobenius_norm.dim", at::Tensor(const at::Tensor &, at::IntArrayRef, bool))
  Hpu_KERNEL(nuclear_norm, "nuclear_norm", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(nuclear_norm, "nuclear_norm.dim", at::Tensor(const at::Tensor &, at::IntArrayRef, bool))
  Hpu_KERNEL(clone, "clone", at::Tensor(const at::Tensor &, c10::optional<at::MemoryFormat>))
  Hpu_KERNEL(positive, "positive", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(sub, "sub.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(sub, "sub.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(subtract, "subtract.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(subtract, "subtract.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(rsub, "rsub.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(heaviside, "heaviside", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(rsub, "rsub.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(_sparse_addmm, "_sparse_addmm", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(sparse_sampled_addmm, "sparse_sampled_addmm", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(_sparse_mm_reduce_impl, "_sparse_mm_reduce_impl", tuple_2_tensors(const at::Tensor &, const at::Tensor &, c10::string_view))
  Hpu_KERNEL(addmm, "addmm", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(_addmm_activation, "_addmm_activation", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &, bool))
  Hpu_KERNEL(_scaled_mm, "_scaled_mm", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, c10::optional<at::ScalarType>, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(sparse_compressed_tensor, "sparse_compressed_tensor.comp_plain_value_size", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_csr_tensor, "sparse_csr_tensor.crow_col_value_size", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_csc_tensor, "sparse_csc_tensor.ccol_row_value_size", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_bsr_tensor, "sparse_bsr_tensor.crow_col_value_size", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_bsc_tensor, "sparse_bsc_tensor.ccol_row_value_size", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_compressed_tensor, "sparse_compressed_tensor.comp_plain_value", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_csr_tensor, "sparse_csr_tensor.crow_col_value", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_csc_tensor, "sparse_csc_tensor.ccol_row_value", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_bsr_tensor, "sparse_bsr_tensor.crow_col_value", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_bsc_tensor, "sparse_bsc_tensor.ccol_row_value", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_sparse_compressed_tensor_unsafe, "_sparse_compressed_tensor_unsafe", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_sparse_csr_tensor_unsafe, "_sparse_csr_tensor_unsafe", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_sparse_csc_tensor_unsafe, "_sparse_csc_tensor_unsafe", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_sparse_bsr_tensor_unsafe, "_sparse_bsr_tensor_unsafe", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_sparse_bsc_tensor_unsafe, "_sparse_bsc_tensor_unsafe", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_coo_tensor, "sparse_coo_tensor.size", at::Tensor(at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(sparse_coo_tensor, "sparse_coo_tensor.indices", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<bool>))
  Hpu_KERNEL(sparse_coo_tensor, "sparse_coo_tensor.indices_size", at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<bool>))
  Hpu_KERNEL(_sparse_coo_tensor_unsafe, "_sparse_coo_tensor_unsafe", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<bool>))
  Hpu_KERNEL(_validate_sparse_coo_tensor_args, "_validate_sparse_coo_tensor_args", void(const at::Tensor &, const at::Tensor &, at::IntArrayRef, c10::optional<bool>))
  Hpu_KERNEL(_validate_sparse_compressed_tensor_args, "_validate_sparse_compressed_tensor_args", void(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::Layout))
  Hpu_KERNEL(_validate_sparse_csr_tensor_args, "_validate_sparse_csr_tensor_args", void(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(_validate_sparse_csc_tensor_args, "_validate_sparse_csc_tensor_args", void(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(_validate_sparse_bsr_tensor_args, "_validate_sparse_bsr_tensor_args", void(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef))
}

} // namespace
} // namespace autocast
} // namespace at

