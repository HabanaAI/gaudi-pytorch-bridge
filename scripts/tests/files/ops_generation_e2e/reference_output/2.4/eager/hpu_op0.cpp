// Autogenerated file by gen_op.py. Do not edit directly!
#include "hpu_ops/cpu_fallback.h"
#include "hpu_ops/op_validator.h"
#include "hpu_ops/op_logger.h"
#include "common/dump_args.h"
#include "hpu_ops/eager/reduction_template.h"
#include "habana_eager/eager_exec.h"
#include "habana_eager/ops/eager_op.h"
#include "habana_eager/ops/override_fns.h"
#include "__ilshift__.h"


using habana_helpers::DTypeHelper;
using synapse_helpers::graph;
using torch::jit::Stack;


namespace habana {



at::Tensor & __ilshift__(at::Tensor & self, const at::Scalar & other) {
  PT_EAGER_TRACE;
  PT_OP_INFO("__ilshift__: ", DUMP_2ARGS(self, other));

  [[maybe_unused]] bool require_h2d = false;
  [[maybe_unused]] bool require_st = false;

  HPU_SUPPORTED_DTYPES(({{-1, {at::kInt, at::kChar, at::kByte, at::kShort, at::kBool}}}))
  FALLBACK_IF_UNSUPPORTED_DTYPE2(self, __ilshift__, Scalar, self, other)

  eager::EagerOp<at::Tensor &> hpu_op{"aten::__ilshift__", {self, other}};
  hpu_op.set_eager_op_info({eager::eagerOpKind::Inplace, "aten::__lshift__", require_h2d, require_st, decltype(eager::EagerOpMetaData::out_indices_){0}});
  return hpu_op.call(self);
}





static const auto& kr_gen_0 = KernelRegistry()
;

TORCH_LIBRARY_IMPL(aten, HPU, m) {
  m.impl("__ilshift__.Scalar", static_cast<at::Tensor & (*)(at::Tensor &, const at::Scalar &)>(&habana::__ilshift__));

}



}  // namespace habana

