// Autogenerated file by gen_op.py. Do not edit directly!
#include "hpu_ops/cpu_fallback.h"
#include "hpu_ops/op_validator.h"
#include "hpu_ops/op_logger.h"
#include "common/dump_args.h"
#include "hpu_ops/eager/reduction_template.h"
#include "habana_eager/eager_exec.h"
#include "habana_eager/ops/eager_op.h"
#include "habana_eager/ops/override_fns.h"
#include "_foreach_add.h"


using habana_helpers::DTypeHelper;
using synapse_helpers::graph;
using torch::jit::Stack;


namespace habana {



void _foreach_add_(at::TensorList self, const at::Scalar & scalar) {
  PT_EAGER_TRACE;
  PT_OP_INFO("_foreach_add_: ", DUMP_2ARGS(self, scalar));

  [[maybe_unused]] bool require_h2d = false;
  [[maybe_unused]] bool require_st = false;

  HPU_SUPPORTED_DTYPES(({{synDeviceGaudi, {at::kBFloat16, at::kFloat, at::kLong, at::kInt, at::kShort, at::kChar, at::kDouble, at::kBool}},
   {synDeviceGaudi2, {at::kBFloat16, at::kFloat, at::kLong, at::kInt, at::kShort, at::kChar, at::kHalf, at::kDouble, at::kBool}},
   {synDeviceGaudi3, {at::kBFloat16, at::kFloat, at::kLong, at::kInt, at::kShort, at::kChar, at::kHalf, at::kDouble, at::kBool}}}))

  eager::EagerOp<void> hpu_op{"aten::_foreach_add_", {self, scalar}};
  hpu_op.set_eager_op_info({eager::eagerOpKind::Inplace, "aten::_foreach_add", require_h2d, require_st, decltype(eager::EagerOpMetaData::out_indices_){0}});
  hpu_op.call(self);
}





static const auto& kr_gen_1 = KernelRegistry()
;

TORCH_LIBRARY_IMPL(aten, HPU, m) {
  m.impl("_foreach_add_.Scalar", static_cast<void (*)(at::TensorList, const at::Scalar &)>(&habana::_foreach_add_));

}



}  // namespace habana

