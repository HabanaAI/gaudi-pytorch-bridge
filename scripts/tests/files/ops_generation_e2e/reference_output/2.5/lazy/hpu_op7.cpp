// Autogenerated file by gen_op.py. Do not edit directly!

#include "hpu_ops/cpu_fallback.h"
#include "hpu_ops/op_validator.h"
#include "hpu_ops/op_logger.h"
#include "common/dump_args.h"
#include "habana_kernels/lazy_kernels_declarations.h"
#include "habana_kernels/lazy_kernels.h"
#include "habana_lazy/hpu_stage_submission.h"
using habana_lazy::LazyOp;
using habana_lazy::GraphHashBuilder;

#include "bitwise_left_shift.h"
#include "isfinite.h"


using habana_helpers::DTypeHelper;
using synapse_helpers::graph;
using torch::jit::Stack;


namespace habana {



at::Tensor isfinite(const at::Tensor & self) {
  PT_LAZY_OP_TRACE;
  PT_LAZY_TRACE;
  PT_OP_INFO("isfinite: ", DUMP_ARG(self));

  [[maybe_unused]] bool require_h2d = false;
  [[maybe_unused]] bool require_st = false;

  HPU_SUPPORTED_DTYPES(({{synDeviceGaudi, {at::kBFloat16, at::kFloat, at::kInt, at::kDouble}},
   {synDeviceGaudi2, {at::kBFloat16, at::kFloat, at::kHalf, at::kInt, at::kDouble}},
   {synDeviceGaudi3, {at::kBFloat16, at::kFloat, at::kHalf, at::kInt, at::kDouble}}}))
  FALLBACK_IF_UNSUPPORTED_DTYPE(self, isfinite, self)

  LazyOp<at::Tensor> hpu_op{"aten::isfinite", {self}};
  RUN_MAYBE_WITH_ACC_THREAD(isfinite, hpu_op);
}

at::Tensor bitwise_left_shift(const at::Tensor & self, const at::Scalar & other) {
  PT_LAZY_OP_TRACE;
  PT_LAZY_TRACE;
  PT_OP_INFO("bitwise_left_shift: ", DUMP_2ARGS(self, other));

  [[maybe_unused]] bool require_h2d = false;
  [[maybe_unused]] bool require_st = false;

  HPU_SUPPORTED_DTYPES(({{-1, {at::kInt, at::kChar, at::kByte, at::kShort, at::kBool}}}))
  FALLBACK_IF_UNSUPPORTED_DTYPE2(self, bitwise_left_shift, Tensor_Scalar, self, other)

  LazyOp<at::Tensor> hpu_op{"aten::bitwise_left_shift", {self, other}};
  RUN_MAYBE_WITH_ACC_THREAD(bitwise_left_shift, hpu_op);
}





static const auto& kr_gen_7 = KernelRegistry()
;

TORCH_LIBRARY_IMPL(aten, HPU, m) {
  m.impl("isfinite", static_cast<at::Tensor (*)(const at::Tensor &)>(&habana::isfinite));
  m.impl("bitwise_left_shift.Tensor_Scalar", static_cast<at::Tensor (*)(const at::Tensor &, const at::Scalar &)>(&habana::bitwise_left_shift));

}



}  // namespace habana

