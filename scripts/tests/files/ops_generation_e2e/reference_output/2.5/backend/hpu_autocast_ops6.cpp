// Autogenerated file by gen_op.py. Do not edit directly!
/**
* Copyright (c) 2021-2024 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(lt, "lt.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(less, "less.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(less, "less.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(take, "take", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(take_along_dim, "take_along_dim", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<int64_t>))
  Hpu_KERNEL(index_select, "index_select", at::Tensor(const at::Tensor &, int64_t, const at::Tensor &))
  Hpu_KERNEL(index_select, "index_select.dimname", at::Tensor(const at::Tensor &, at::Dimname, const at::Tensor &))
  Hpu_KERNEL(masked_select, "masked_select", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(nonzero, "nonzero", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(nonzero_static, "nonzero_static", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(nonzero_numpy, "nonzero_numpy", ::std::vector<at::Tensor>(const at::Tensor &))
  Hpu_KERNEL(argwhere, "argwhere", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(gather, "gather", at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, bool))
  Hpu_KERNEL(gather, "gather.dimname", at::Tensor(const at::Tensor &, at::Dimname, const at::Tensor &, bool))
  Hpu_KERNEL(addcmul, "addcmul", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(addcdiv, "addcdiv", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(cross_entropy_loss, "cross_entropy_loss", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t, double))
  Hpu_KERNEL(triangular_solve, "triangular_solve", tuple_2_tensors(const at::Tensor &, const at::Tensor &, bool, bool, bool))
  Hpu_KERNEL(_linalg_check_errors, "_linalg_check_errors", void(const at::Tensor &, c10::string_view, bool))
  Hpu_KERNEL(linalg_solve_triangular, "linalg_solve_triangular", at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool, bool))
  Hpu_KERNEL(linalg_vander, "linalg_vander", at::Tensor(const at::Tensor &, c10::optional<int64_t>))
  Hpu_KERNEL(svd, "svd", tuple_3_tensors(const at::Tensor &, bool, bool))
  Hpu_KERNEL(swapaxes, "swapaxes", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(swapdims, "swapdims", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(cholesky, "cholesky", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(cholesky_solve, "cholesky_solve", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(_cholesky_solve_helper, "_cholesky_solve_helper", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(cholesky_inverse, "cholesky_inverse", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(qr, "qr", tuple_2_tensors(const at::Tensor &, bool))
  Hpu_KERNEL(geqrf, "geqrf", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(orgqr, "orgqr", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(ormqr, "ormqr", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(_lu_with_info, "_lu_with_info", tuple_3_tensors(const at::Tensor &, bool, bool))
  Hpu_KERNEL(lu_solve, "lu_solve", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(lu_unpack, "lu_unpack", tuple_3_tensors(const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(multinomial, "multinomial", at::Tensor(const at::Tensor &, int64_t, bool, c10::optional<at::Generator>))
  Hpu_KERNEL(lgamma, "lgamma", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(digamma, "digamma", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(polygamma, "polygamma", at::Tensor(int64_t, const at::Tensor &))
  Hpu_KERNEL(erfinv, "erfinv", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(i0, "i0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(sign, "sign", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(signbit, "signbit", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(dist, "dist", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(atan2, "atan2", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(arctan2, "arctan2", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(lerp, "lerp.Scalar", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(lerp, "lerp.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(histc, "histc", at::Tensor(const at::Tensor &, int64_t, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(histogram, "histogram.bins_tensor", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(histogram, "histogram.bin_ct", tuple_2_tensors(const at::Tensor &, int64_t, c10::optional<at::ArrayRef<double>>, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(_histogramdd_bin_edges, "_histogramdd_bin_edges", ::std::vector<at::Tensor>(const at::Tensor &, at::IntArrayRef, c10::optional<at::ArrayRef<double>>, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(_histogramdd_from_bin_cts, "_histogramdd_from_bin_cts", at::Tensor(const at::Tensor &, at::IntArrayRef, c10::optional<at::ArrayRef<double>>, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(_histogramdd_from_bin_tensors, "_histogramdd_from_bin_tensors", at::Tensor(const at::Tensor &, at::TensorList, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(histogramdd, "histogramdd", tuple_tensor_vector(const at::Tensor &, at::IntArrayRef, c10::optional<at::ArrayRef<double>>, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(histogramdd, "histogramdd.int_bins", tuple_tensor_vector(const at::Tensor &, int64_t, c10::optional<at::ArrayRef<double>>, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(histogramdd, "histogramdd.TensorList_bins", tuple_tensor_vector(const at::Tensor &, at::TensorList, c10::optional<at::ArrayRef<double>>, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(fmod, "fmod.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(fmod, "fmod.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(hypot, "hypot", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(igamma, "igamma", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(igammac, "igammac", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(nextafter, "nextafter", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(remainder, "remainder.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(remainder, "remainder.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(remainder, "remainder.Scalar_Tensor", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(min, "min", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(fmin, "fmin", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(max, "max", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(fmax, "fmax", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(maximum, "maximum", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(max, "max.other", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(minimum, "minimum", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(min, "min.other", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(quantile, "quantile", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<int64_t>, bool, c10::string_view))
  Hpu_KERNEL(quantile, "quantile.scalar", at::Tensor(const at::Tensor &, double, c10::optional<int64_t>, bool, c10::string_view))
  Hpu_KERNEL(nanquantile, "nanquantile", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<int64_t>, bool, c10::string_view))
  Hpu_KERNEL(nanquantile, "nanquantile.scalar", at::Tensor(const at::Tensor &, double, c10::optional<int64_t>, bool, c10::string_view))
  Hpu_KERNEL(sort, "sort", tuple_2_tensors(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(sort, "sort.stable", tuple_2_tensors(const at::Tensor &, c10::optional<bool>, int64_t, bool))
  Hpu_KERNEL(sort, "sort.dimname", tuple_2_tensors(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(sort, "sort.dimname_stable", tuple_2_tensors(const at::Tensor &, c10::optional<bool>, at::Dimname, bool))
  Hpu_KERNEL(msort, "msort", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(argsort, "argsort", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(argsort, "argsort.stable", at::Tensor(const at::Tensor &, bool, int64_t, bool))
  Hpu_KERNEL(argsort, "argsort.dimname", at::Tensor(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(topk, "topk", tuple_2_tensors(const at::Tensor &, int64_t, int64_t, bool, bool))
  Hpu_KERNEL(all, "all", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(any, "any", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(renorm, "renorm", at::Tensor(const at::Tensor &, const at::Scalar &, int64_t, const at::Scalar &))
  Hpu_KERNEL(equal, "equal", bool(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(pow, "pow.Tensor_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(pow, "pow.Scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(pow, "pow.Tensor_Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(float_power, "float_power.Tensor_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(float_power, "float_power.Scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(float_power, "float_power.Tensor_Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(normal_functional, "normal_functional", at::Tensor(const at::Tensor &, double, double, c10::optional<at::Generator>))
  Hpu_KERNEL(normal, "normal.Tensor_float", at::Tensor(const at::Tensor &, double, c10::optional<at::Generator>))
  Hpu_KERNEL(normal, "normal.float_Tensor", at::Tensor(double, const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(normal, "normal.Tensor_Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(normal, "normal.float_float", at::Tensor(double, double, c10::IntArrayRef, c10::optional<at::Generator>, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(alias, "alias", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_foreach_add, "_foreach_add.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_add, "_foreach_add.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_add, "_foreach_add.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_add, "_foreach_add.Tensor", ::std::vector<at::Tensor>(at::TensorList, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(_foreach_sub, "_foreach_sub.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_sub, "_foreach_sub.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_sub, "_foreach_sub.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_mul, "_foreach_mul.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_mul, "_foreach_mul.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_mul, "_foreach_mul.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_mul, "_foreach_mul.Tensor", ::std::vector<at::Tensor>(at::TensorList, const at::Tensor &))
  Hpu_KERNEL(_foreach_div, "_foreach_div.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_div, "_foreach_div.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_div, "_foreach_div.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_div, "_foreach_div.Tensor", ::std::vector<at::Tensor>(at::TensorList, const at::Tensor &))
  Hpu_KERNEL(_foreach_clamp_max, "_foreach_clamp_max.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_clamp_max, "_foreach_clamp_max.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_clamp_max, "_foreach_clamp_max.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_clamp_min, "_foreach_clamp_min.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_clamp_min, "_foreach_clamp_min.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_clamp_min, "_foreach_clamp_min.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_maximum, "_foreach_maximum.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_maximum, "_foreach_maximum.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_maximum, "_foreach_maximum.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_minimum, "_foreach_minimum.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_minimum, "_foreach_minimum.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_minimum, "_foreach_minimum.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_addcdiv, "_foreach_addcdiv.Scalar", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_addcdiv, "_foreach_addcdiv.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_addcdiv, "_foreach_addcdiv.Tensor", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList, const at::Tensor &))
  Hpu_KERNEL(_foreach_addcmul, "_foreach_addcmul.Scalar", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_addcmul, "_foreach_addcmul.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_addcmul, "_foreach_addcmul.Tensor", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList, const at::Tensor &))
}

} // namespace
} // namespace autocast
} // namespace at

