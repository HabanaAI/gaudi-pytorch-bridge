// Autogenerated file by gen_op.py. Do not edit directly!
/**
* Copyright (c) 2021-2024 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(special_log_ndtr, "special_log_ndtr", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_expm1, "special_expm1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_exp2, "special_exp2", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_psi, "special_psi", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_digamma, "special_digamma", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_gammaln, "special_gammaln", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_erf, "special_erf", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_erfc, "special_erfc", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_erfcx, "special_erfcx", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_erfinv, "special_erfinv", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_ndtr, "special_ndtr", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_xlog1py, "special_xlog1py", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_xlog1py, "special_xlog1py.self_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_xlog1py, "special_xlog1py.other_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_xlogy, "special_xlogy", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_xlogy, "special_xlogy.self_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_xlogy, "special_xlogy.other_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_zeta, "special_zeta", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_zeta, "special_zeta.self_scalar", at::Tensor(const at::Scalar &, const at::Tensor &))
  Hpu_KERNEL(special_zeta, "special_zeta.other_scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(special_i0, "special_i0", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_i0e, "special_i0e", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_i1, "special_i1", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_i1e, "special_i1e", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_logit, "special_logit", at::Tensor(const at::Tensor &, c10::optional<double>))
  Hpu_KERNEL(special_polygamma, "special_polygamma", at::Tensor(int64_t, const at::Tensor &))
  Hpu_KERNEL(special_logsumexp, "special_logsumexp", at::Tensor(const at::Tensor &, at::IntArrayRef, bool))
  Hpu_KERNEL(special_expit, "special_expit", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_sinc, "special_sinc", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_round, "special_round", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(special_log1p, "special_log1p", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_log_softmax, "special_log_softmax", at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>))
  Hpu_KERNEL(special_gammainc, "special_gammainc", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_gammaincc, "special_gammaincc", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(special_multigammaln, "special_multigammaln", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(special_softmax, "special_softmax", at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>))
  Hpu_KERNEL(fft_fft, "fft_fft", at::Tensor(const at::Tensor &, c10::optional<int64_t>, int64_t, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_ifft, "fft_ifft", at::Tensor(const at::Tensor &, c10::optional<int64_t>, int64_t, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_rfft, "fft_rfft", at::Tensor(const at::Tensor &, c10::optional<int64_t>, int64_t, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_irfft, "fft_irfft", at::Tensor(const at::Tensor &, c10::optional<int64_t>, int64_t, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_hfft, "fft_hfft", at::Tensor(const at::Tensor &, c10::optional<int64_t>, int64_t, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_ihfft, "fft_ihfft", at::Tensor(const at::Tensor &, c10::optional<int64_t>, int64_t, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_fft2, "fft_fft2", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::IntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_ifft2, "fft_ifft2", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::IntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_rfft2, "fft_rfft2", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::IntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_irfft2, "fft_irfft2", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::IntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_hfft2, "fft_hfft2", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::IntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_ihfft2, "fft_ihfft2", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::IntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_fftn, "fft_fftn", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_ifftn, "fft_ifftn", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_rfftn, "fft_rfftn", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_irfftn, "fft_irfftn", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_hfftn, "fft_hfftn", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_ihfftn, "fft_ihfftn", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<c10::string_view>))
  Hpu_KERNEL(fft_fftfreq, "fft_fftfreq", at::Tensor(int64_t, double, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(fft_rfftfreq, "fft_rfftfreq", at::Tensor(int64_t, double, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(fft_fftshift, "fft_fftshift", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef))
  Hpu_KERNEL(fft_ifftshift, "fft_ifftshift", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef))
  Hpu_KERNEL(linalg_cholesky_ex, "linalg_cholesky_ex", tuple_2_tensors(const at::Tensor &, bool, bool))
  Hpu_KERNEL(linalg_cholesky, "linalg_cholesky", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(linalg_cross, "linalg_cross", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(linalg_lu_factor, "linalg_lu_factor", tuple_2_tensors(const at::Tensor &, bool))
  Hpu_KERNEL(linalg_lu_factor_ex, "linalg_lu_factor_ex", tuple_3_tensors(const at::Tensor &, bool, bool))
  Hpu_KERNEL(linalg_lu, "linalg_lu", tuple_3_tensors(const at::Tensor &, bool))
  Hpu_KERNEL(linalg_lu_solve, "linalg_lu_solve", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(_linalg_det, "_linalg_det", tuple_3_tensors(const at::Tensor &))
  Hpu_KERNEL(linalg_det, "linalg_det", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(det, "det", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(linalg_ldl_factor_ex, "linalg_ldl_factor_ex", tuple_3_tensors(const at::Tensor &, bool, bool))
  Hpu_KERNEL(linalg_ldl_factor, "linalg_ldl_factor", tuple_2_tensors(const at::Tensor &, bool))
  Hpu_KERNEL(linalg_ldl_solve, "linalg_ldl_solve", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(linalg_lstsq, "linalg_lstsq", tuple_4_tensors(const at::Tensor &, const at::Tensor &, c10::optional<double>, c10::optional<c10::string_view>))
  Hpu_KERNEL(linalg_matmul, "linalg_matmul", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(linalg_vecdot, "linalg_vecdot", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(linalg_matrix_exp, "linalg_matrix_exp", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_linalg_slogdet, "_linalg_slogdet", tuple_4_tensors(const at::Tensor &))
  Hpu_KERNEL(linalg_slogdet, "linalg_slogdet", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(slogdet, "slogdet", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(logdet, "logdet", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(linalg_eig, "linalg_eig", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(linalg_eigvals, "linalg_eigvals", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_linalg_eigh, "_linalg_eigh", tuple_2_tensors(const at::Tensor &, c10::string_view, bool))
  Hpu_KERNEL(linalg_eigh, "linalg_eigh", tuple_2_tensors(const at::Tensor &, c10::string_view))
  Hpu_KERNEL(linalg_eigvalsh, "linalg_eigvalsh", at::Tensor(const at::Tensor &, c10::string_view))
  Hpu_KERNEL(linalg_householder_product, "linalg_householder_product", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(linalg_inv_ex, "linalg_inv_ex", tuple_2_tensors(const at::Tensor &, bool))
  Hpu_KERNEL(linalg_inv, "linalg_inv", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(inverse, "inverse", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(inner, "inner", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(outer, "outer", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(ger, "ger", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(linalg_norm, "linalg_norm", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, at::OptionalIntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(linalg_norm, "linalg_norm.ord_str", at::Tensor(const at::Tensor &, c10::string_view, at::OptionalIntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(linalg_vector_norm, "linalg_vector_norm", at::Tensor(const at::Tensor &, const at::Scalar &, at::OptionalIntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(linalg_matrix_norm, "linalg_matrix_norm", at::Tensor(const at::Tensor &, const at::Scalar &, at::IntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(linalg_matrix_norm, "linalg_matrix_norm.str_ord", at::Tensor(const at::Tensor &, c10::string_view, at::IntArrayRef, bool, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_linalg_svd, "_linalg_svd", tuple_3_tensors(const at::Tensor &, bool, bool, c10::optional<c10::string_view>))
  Hpu_KERNEL(linalg_svd, "linalg_svd", tuple_3_tensors(const at::Tensor &, bool, c10::optional<c10::string_view>))
  Hpu_KERNEL(linalg_svdvals, "linalg_svdvals", at::Tensor(const at::Tensor &, c10::optional<c10::string_view>))
  Hpu_KERNEL(linalg_cond, "linalg_cond", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &))
  Hpu_KERNEL(linalg_cond, "linalg_cond.p_str", at::Tensor(const at::Tensor &, c10::string_view))
  Hpu_KERNEL(linalg_pinv, "linalg_pinv.atol_rtol_tensor", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(linalg_pinv, "linalg_pinv.atol_rtol_float", at::Tensor(const at::Tensor &, c10::optional<double>, c10::optional<double>, bool))
  Hpu_KERNEL(linalg_pinv, "linalg_pinv", at::Tensor(const at::Tensor &, double, bool))
  Hpu_KERNEL(linalg_pinv, "linalg_pinv.rcond_tensor", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(_linalg_solve_ex, "_linalg_solve_ex", tuple_4_tensors(const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(linalg_solve_ex, "linalg_solve_ex", tuple_2_tensors(const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(linalg_solve, "linalg_solve", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(linalg_tensorinv, "linalg_tensorinv", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(linalg_tensorsolve, "linalg_tensorsolve", at::Tensor(const at::Tensor &, const at::Tensor &, at::OptionalIntArrayRef))
  Hpu_KERNEL(linalg_qr, "linalg_qr", tuple_2_tensors(const at::Tensor &, c10::string_view))
  Hpu_KERNEL(linalg_matrix_power, "linalg_matrix_power", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(linalg_matrix_rank, "linalg_matrix_rank.atol_rtol_tensor", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool))
  Hpu_KERNEL(linalg_matrix_rank, "linalg_matrix_rank.atol_rtol_float", at::Tensor(const at::Tensor &, c10::optional<double>, c10::optional<double>, bool))
  Hpu_KERNEL(linalg_matrix_rank, "linalg_matrix_rank", at::Tensor(const at::Tensor &, double, bool))
  Hpu_KERNEL(linalg_matrix_rank, "linalg_matrix_rank.tol_tensor", at::Tensor(const at::Tensor &, const at::Tensor &, bool))
  Hpu_KERNEL(linalg_multi_dot, "linalg_multi_dot", at::Tensor(at::TensorList))
  Hpu_KERNEL(nested_to_padded_tensor, "nested_to_padded_tensor", at::Tensor(const at::Tensor &, double, at::OptionalIntArrayRef))
  Hpu_KERNEL(_test_serialization_subcmul, "_test_serialization_subcmul", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(_test_optional_intlist, "_test_optional_intlist", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef))
  Hpu_KERNEL(_test_optional_filled_intlist, "_test_optional_filled_intlist", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef))
  Hpu_KERNEL(_test_optional_floatlist, "_test_optional_floatlist", at::Tensor(const at::Tensor &, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(_test_string_default, "_test_string_default", at::Tensor(const at::Tensor &, c10::string_view, c10::string_view))
  Hpu_KERNEL(_test_ambiguous_defaults, "_test_ambiguous_defaults.a", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(_test_ambiguous_defaults, "_test_ambiguous_defaults.b", at::Tensor(const at::Tensor &, int64_t, c10::string_view))
  Hpu_KERNEL(_test_warn_in_autograd, "_test_warn_in_autograd", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_test_autograd_multiple_dispatch, "_test_autograd_multiple_dispatch.fullcoverage", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_test_autograd_multiple_dispatch, "_test_autograd_multiple_dispatch.ntonly", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_test_autograd_multiple_dispatch_view, "_test_autograd_multiple_dispatch_view", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_test_autograd_multiple_dispatch_view_copy, "_test_autograd_multiple_dispatch_view_copy", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(segment_reduce, "segment_reduce", at::Tensor(const at::Tensor &, c10::string_view, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, int64_t, bool, const c10::optional<at::Scalar> &))
  Hpu_KERNEL(pad_sequence, "pad_sequence", at::Tensor(at::TensorList, bool, double))
  Hpu_KERNEL(flatten_dense_tensors, "flatten_dense_tensors", at::Tensor(at::TensorList))
  Hpu_KERNEL(unflatten_dense_tensors, "unflatten_dense_tensors", ::std::vector<at::Tensor>(const at::Tensor &, at::TensorList))
  Hpu_KERNEL(_nested_tensor_from_tensor_list, "_nested_tensor_from_tensor_list", at::Tensor(at::TensorList, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_fw_primal_copy, "_fw_primal_copy", at::Tensor(const at::Tensor &, int64_t))
}

} // namespace
} // namespace autocast
} // namespace at

