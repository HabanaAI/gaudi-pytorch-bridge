// Autogenerated file by gen_op.py. Do not edit directly!
/**
* Copyright (c) 2021-2024 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(_foreach_abs, "_foreach_abs", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_acos, "_foreach_acos", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_asin, "_foreach_asin", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_atan, "_foreach_atan", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_ceil, "_foreach_ceil", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_cos, "_foreach_cos", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_cosh, "_foreach_cosh", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_erf, "_foreach_erf", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_erfc, "_foreach_erfc", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_exp, "_foreach_exp", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_expm1, "_foreach_expm1", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_floor, "_foreach_floor", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_frac, "_foreach_frac", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_lerp, "_foreach_lerp.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_lerp, "_foreach_lerp.Scalar", ::std::vector<at::Tensor>(at::TensorList, at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_lgamma, "_foreach_lgamma", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_log, "_foreach_log", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_log10, "_foreach_log10", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_log1p, "_foreach_log1p", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_log2, "_foreach_log2", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_neg, "_foreach_neg", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_norm, "_foreach_norm.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_pow, "_foreach_pow.List", ::std::vector<at::Tensor>(at::TensorList, at::TensorList))
  Hpu_KERNEL(_foreach_pow, "_foreach_pow.Scalar", ::std::vector<at::Tensor>(at::TensorList, const at::Scalar &))
  Hpu_KERNEL(_foreach_pow, "_foreach_pow.ScalarList", ::std::vector<at::Tensor>(at::TensorList, at::ArrayRef<at::Scalar>))
  Hpu_KERNEL(_foreach_pow, "_foreach_pow.ScalarAndTensor", ::std::vector<at::Tensor>(const at::Scalar &, at::TensorList))
  Hpu_KERNEL(_foreach_reciprocal, "_foreach_reciprocal", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_round, "_foreach_round", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_sigmoid, "_foreach_sigmoid", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_sign, "_foreach_sign", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_sin, "_foreach_sin", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_sinh, "_foreach_sinh", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_sqrt, "_foreach_sqrt", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_tan, "_foreach_tan", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_tanh, "_foreach_tanh", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_foreach_trunc, "_foreach_trunc", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(bucketize, "bucketize.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(bucketize, "bucketize.Scalar", at::Tensor(const at::Scalar &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(searchsorted, "searchsorted.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool, c10::optional<c10::string_view>, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(searchsorted, "searchsorted.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, bool, bool, c10::optional<c10::string_view>, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(_convert_indices_from_coo_to_csr, "_convert_indices_from_coo_to_csr", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(_convert_indices_from_csr_to_coo, "_convert_indices_from_csr_to_coo", at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool))
  Hpu_KERNEL(mse_loss, "mse_loss", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(l1_loss, "l1_loss", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(multi_margin_loss, "multi_margin_loss", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &, const c10::optional<at::Tensor> &, int64_t))
  Hpu_KERNEL(multilabel_margin_loss, "multilabel_margin_loss", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(multilabel_margin_loss_forward, "multilabel_margin_loss_forward", tuple_2_tensors(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(nll_loss_nd, "nll_loss_nd", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t))
  Hpu_KERNEL(nll_loss, "nll_loss", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t))
  Hpu_KERNEL(nll_loss_forward, "nll_loss_forward", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t))
  Hpu_KERNEL(nll_loss2d, "nll_loss2d", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t))
  Hpu_KERNEL(nll_loss2d_forward, "nll_loss2d_forward", tuple_2_tensors(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t, int64_t))
  Hpu_KERNEL(smooth_l1_loss, "smooth_l1_loss", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, double))
  Hpu_KERNEL(huber_loss, "huber_loss", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, double))
  Hpu_KERNEL(soft_margin_loss, "soft_margin_loss", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(elu, "elu", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(glu, "glu", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(glu_jvp, "glu_jvp", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(hardsigmoid, "hardsigmoid", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(hardtanh, "hardtanh", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(hardswish, "hardswish", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(leaky_relu, "leaky_relu", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(log_sigmoid, "log_sigmoid", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(log_sigmoid_forward, "log_sigmoid_forward", tuple_2_tensors(const at::Tensor &))
  Hpu_KERNEL(rrelu_with_noise, "rrelu_with_noise", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &, bool, c10::optional<at::Generator>))
  Hpu_KERNEL(softplus, "softplus", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(softshrink, "softshrink", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(adaptive_avg_pool2d, "adaptive_avg_pool2d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(mkldnn_adaptive_avg_pool2d, "mkldnn_adaptive_avg_pool2d", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(_adaptive_avg_pool2d, "_adaptive_avg_pool2d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(adaptive_avg_pool3d, "adaptive_avg_pool3d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(_adaptive_avg_pool3d, "_adaptive_avg_pool3d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(adaptive_max_pool2d, "adaptive_max_pool2d", tuple_2_tensors(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(adaptive_max_pool3d, "adaptive_max_pool3d", tuple_2_tensors(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(avg_pool2d, "avg_pool2d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>))
  Hpu_KERNEL(avg_pool3d, "avg_pool3d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>))
  Hpu_KERNEL(fractional_max_pool2d, "fractional_max_pool2d", tuple_2_tensors(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &))
  Hpu_KERNEL(fractional_max_pool3d, "fractional_max_pool3d", tuple_2_tensors(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &))
  Hpu_KERNEL(max_pool2d_with_indices, "max_pool2d_with_indices", tuple_2_tensors(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(max_pool3d_with_indices, "max_pool3d_with_indices", tuple_2_tensors(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool))
  Hpu_KERNEL(max_unpool2d, "max_unpool2d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(max_unpool3d, "max_unpool3d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, at::IntArrayRef, at::IntArrayRef))
  Hpu_KERNEL(reflection_pad1d, "reflection_pad1d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(reflection_pad2d, "reflection_pad2d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(reflection_pad3d, "reflection_pad3d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(replication_pad1d, "replication_pad1d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(replication_pad2d, "replication_pad2d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(replication_pad3d, "replication_pad3d", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(_pad_circular, "_pad_circular", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(_pad_enum, "_pad_enum", at::Tensor(const at::Tensor &, c10::IntArrayRef, int64_t, c10::optional<double>))
  Hpu_KERNEL(pad, "pad", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::string_view, c10::optional<double>))
  Hpu_KERNEL(upsample_linear1d, "upsample_linear1d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_bilinear2d, "upsample_bilinear2d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(_upsample_bilinear2d_aa, "_upsample_bilinear2d_aa.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_trilinear3d, "upsample_trilinear3d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_bicubic2d, "upsample_bicubic2d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(_upsample_bicubic2d_aa, "_upsample_bicubic2d_aa.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_nearest1d, "upsample_nearest1d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(_upsample_nearest_exact1d, "_upsample_nearest_exact1d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_nearest2d, "upsample_nearest2d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(_upsample_nearest_exact2d, "_upsample_nearest_exact2d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_nearest3d, "upsample_nearest3d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(_upsample_nearest_exact3d, "_upsample_nearest_exact3d.vec", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, c10::optional<at::ArrayRef<double>>))
  Hpu_KERNEL(upsample_linear1d, "upsample_linear1d", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool, c10::optional<double>))
  Hpu_KERNEL(upsample_bilinear2d, "upsample_bilinear2d", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(_upsample_bilinear2d_aa, "_upsample_bilinear2d_aa", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(upsample_bicubic2d, "upsample_bicubic2d", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(_upsample_bicubic2d_aa, "_upsample_bicubic2d_aa", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(upsample_trilinear3d, "upsample_trilinear3d", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(upsample_nearest1d, "upsample_nearest1d", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<double>))
  Hpu_KERNEL(_upsample_nearest_exact1d, "_upsample_nearest_exact1d", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<double>))
  Hpu_KERNEL(upsample_nearest2d, "upsample_nearest2d", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(_upsample_nearest_exact2d, "_upsample_nearest_exact2d", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(upsample_nearest3d, "upsample_nearest3d", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(_upsample_nearest_exact3d, "_upsample_nearest_exact3d", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>))
  Hpu_KERNEL(slow_conv_transpose2d, "slow_conv_transpose2d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(slow_conv_transpose3d, "slow_conv_transpose3d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(thnn_conv2d, "thnn_conv2d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(_slow_conv2d_forward, "_slow_conv2d_forward", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(_conv_depthwise2d, "_conv_depthwise2d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(conv_depthwise3d, "conv_depthwise3d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(slow_conv3d, "slow_conv3d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(slow_conv3d_forward, "slow_conv3d_forward", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(slow_conv_dilated2d, "slow_conv_dilated2d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(slow_conv_dilated3d, "slow_conv_dilated3d", at::Tensor(const at::Tensor &, const at::Tensor &, c10::IntArrayRef, const c10::optional<at::Tensor> &, c10::IntArrayRef, c10::IntArrayRef, c10::IntArrayRef))
  Hpu_KERNEL(col2im, "col2im", at::Tensor(const at::Tensor &, c10::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef))
  Hpu_KERNEL(column_stack, "column_stack", at::Tensor(at::TensorList))
  Hpu_KERNEL(im2col, "im2col", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef))
  Hpu_KERNEL(isfinite, "isfinite", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(isinf, "isinf", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(isposinf, "isposinf", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(isneginf, "isneginf", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_add_batch_dim, "_add_batch_dim", at::Tensor(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(_remove_batch_dim, "_remove_batch_dim", at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t))
  Hpu_KERNEL(special_entr, "special_entr", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(special_ndtri, "special_ndtri", at::Tensor(const at::Tensor &))
}

} // namespace
} // namespace autocast
} // namespace at

