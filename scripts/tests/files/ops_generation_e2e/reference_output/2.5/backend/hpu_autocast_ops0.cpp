// Autogenerated file by gen_op.py. Do not edit directly!
/**
* Copyright (c) 2021-2024 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#include "pytorch_helpers/habana_helpers/pt_version_check.h"

#include <ATen/ATen.h>
#include <ATen/NativeFunctions.h>
#include <torch/library.h>
#include "hpu_ops/autocast_helpers.h"

namespace at {
namespace autocast {
namespace {

using tuple_2_tensors = std::tuple<Tensor, Tensor>;
using tuple_3_tensors = std::tuple<Tensor, Tensor, Tensor>;
using tuple_4_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor>;
using tuple_5_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_6_tensors = std::tuple<Tensor, Tensor, Tensor, Tensor, Tensor, Tensor>;
using tuple_4_tensors_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t>;
using tuple_2_tensors_double_int64 = std::tuple<Tensor,Tensor,double,int64_t>;
using tuple_3_tensors_vector = std::tuple<Tensor,Tensor,Tensor,::std::vector<Tensor>>;
using tuple_double_int64 = std::tuple<double,int64_t>;
using tuple_tensor_vector = std::tuple<Tensor,::std::vector<Tensor>>;
using tuple_vector_tensor = std::tuple<::std::vector<Tensor>,Tensor>;
using tuple_tensor_2_vectors = std::tuple<Tensor,::std::vector<Tensor>,::std::vector<Tensor>>;
using tuple_4_tensors_2_int64_2_tensors = std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t,int64_t,at::Tensor,at::Tensor>;
using tuple_4_tensors_4_int64_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,int64_t,int64_t,Tensor>;
using tuple_2_tensors_2_int64_tensor = std::tuple<Tensor,Tensor,int64_t,int64_t,Tensor>;
using tuple_4_tensors_2_int64_3_tensor = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t,Tensor,Tensor,Tensor>;
using tuple_4_tensors_2_int64 = std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t,int64_t>;
using tuple_3_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_5_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;
using tuple_4_vectors = std::tuple<::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>,::std::vector<at::Tensor>>;

TORCH_LIBRARY_IMPL(_, AutocastHPU, m) {{
  m.fallback(torch::CppFunction::makeFallthrough());
}}

TORCH_LIBRARY_IMPL(aten, AutocastHPU, m) {
  Hpu_KERNEL(_cast_Byte, "_cast_Byte", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Char, "_cast_Char", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Double, "_cast_Double", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Float, "_cast_Float", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Int, "_cast_Int", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Long, "_cast_Long", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Short, "_cast_Short", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_cast_Half, "_cast_Half", at::Tensor(const at::Tensor &, bool))
  Hpu_KERNEL(_make_dual, "_make_dual", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(_unpack_dual, "_unpack_dual", tuple_2_tensors(const at::Tensor &, int64_t))
  Hpu_KERNEL(_new_zeros_with_same_feature_meta, "_new_zeros_with_same_feature_meta", at::Tensor(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(_has_same_storage_numel, "_has_same_storage_numel", bool(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(align_tensors, "align_tensors", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(_assert_async, "_assert_async", void(const at::Tensor &))
  Hpu_KERNEL(_assert_async, "_assert_async.msg", void(const at::Tensor &, c10::string_view))
  Hpu_KERNEL(_functional_assert_async, "_functional_assert_async.msg", at::Tensor(const at::Tensor &, c10::string_view, const at::Tensor &))
  Hpu_KERNEL(_assert_tensor_metadata, "_assert_tensor_metadata", void(const at::Tensor &, at::OptionalIntArrayRef, at::OptionalIntArrayRef, c10::optional<at::ScalarType>))
  Hpu_KERNEL(sym_constrain_range, "sym_constrain_range", void(const at::Scalar &, c10::optional<int64_t>, c10::optional<int64_t>))
  Hpu_KERNEL(sym_constrain_range_for_size, "sym_constrain_range_for_size", void(const at::Scalar &, c10::optional<int64_t>, c10::optional<int64_t>))
  Hpu_KERNEL(_functional_sym_constrain_range, "_functional_sym_constrain_range", at::Tensor(const at::Scalar &, c10::optional<int64_t>, c10::optional<int64_t>, const at::Tensor &))
  Hpu_KERNEL(_functional_sym_constrain_range_for_size, "_functional_sym_constrain_range_for_size", at::Tensor(const at::Scalar &, c10::optional<int64_t>, c10::optional<int64_t>, const at::Tensor &))
  Hpu_KERNEL(_make_dep_token, "_make_dep_token", at::Tensor(c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<at::MemoryFormat>))
  Hpu_KERNEL(_debug_has_internal_overlap, "_debug_has_internal_overlap", int64_t(const at::Tensor &))
  Hpu_KERNEL(_fused_dropout, "_fused_dropout", tuple_2_tensors(const at::Tensor &, double, c10::optional<at::Generator>))
  Hpu_KERNEL(_masked_scale, "_masked_scale", at::Tensor(const at::Tensor &, const at::Tensor &, double))
  Hpu_KERNEL(native_dropout, "native_dropout", tuple_2_tensors(const at::Tensor &, double, c10::optional<bool>))
  Hpu_KERNEL(_sobol_engine_draw, "_sobol_engine_draw", tuple_2_tensors(const at::Tensor &, int64_t, const at::Tensor &, int64_t, int64_t, c10::optional<at::ScalarType>))
  Hpu_KERNEL(_reshape_from_tensor, "_reshape_from_tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(_shape_as_tensor, "_shape_as_tensor", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(dropout, "dropout", at::Tensor(const at::Tensor &, double, bool))
  Hpu_KERNEL(feature_dropout, "feature_dropout", at::Tensor(const at::Tensor &, double, bool))
  Hpu_KERNEL(alpha_dropout, "alpha_dropout", at::Tensor(const at::Tensor &, double, bool))
  Hpu_KERNEL(feature_alpha_dropout, "feature_alpha_dropout", at::Tensor(const at::Tensor &, double, bool))
  Hpu_KERNEL(abs, "abs", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(absolute, "absolute", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(angle, "angle", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(view_as_real, "view_as_real", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(view_as_complex, "view_as_complex", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(sgn, "sgn", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(real, "real", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(imag, "imag", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_conj, "_conj", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(conj, "conj", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_conj_physical, "_conj_physical", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(conj_physical, "conj_physical", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(resolve_conj, "resolve_conj", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(resolve_neg, "resolve_neg", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_neg_view, "_neg_view", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(acos, "acos", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(arccos, "arccos", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(avg_pool1d, "avg_pool1d", at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool))
  Hpu_KERNEL(adaptive_avg_pool1d, "adaptive_avg_pool1d", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(adaptive_max_pool1d, "adaptive_max_pool1d", tuple_2_tensors(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(add, "add.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(_add_relu, "_add_relu.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(_add_relu, "_add_relu.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(add, "add.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(addmv, "addmv", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(addr, "addr", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(affine_grid_generator, "affine_grid_generator", at::Tensor(const at::Tensor &, c10::IntArrayRef, bool))
  Hpu_KERNEL(_is_all_true, "_is_all_true", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_is_any_true, "_is_any_true", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_test_check_tensor, "_test_check_tensor", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(_test_functorch_fallback, "_test_functorch_fallback", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(all, "all.dim", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(all, "all.dims", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool))
  Hpu_KERNEL(all, "all.dimname", at::Tensor(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(allclose, "allclose", bool(const at::Tensor &, const at::Tensor &, double, double, bool))
  Hpu_KERNEL(any, "any.dim", at::Tensor(const at::Tensor &, int64_t, bool))
  Hpu_KERNEL(any, "any.dims", at::Tensor(const at::Tensor &, at::OptionalIntArrayRef, bool))
  Hpu_KERNEL(any, "any.dimname", at::Tensor(const at::Tensor &, at::Dimname, bool))
  Hpu_KERNEL(arange, "arange", at::Tensor(const at::Scalar &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(arange, "arange.start", at::Tensor(const at::Scalar &, const at::Scalar &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(arange, "arange.start_step", at::Tensor(const at::Scalar &, const at::Scalar &, const at::Scalar &, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(_dim_arange, "_dim_arange", at::Tensor(const at::Tensor &, int64_t))
  Hpu_KERNEL(argmax, "argmax", at::Tensor(const at::Tensor &, c10::optional<int64_t>, bool))
  Hpu_KERNEL(argmin, "argmin", at::Tensor(const at::Tensor &, c10::optional<int64_t>, bool))
  Hpu_KERNEL(acosh, "acosh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(arccosh, "arccosh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(asinh, "asinh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(arcsinh, "arcsinh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(atanh, "atanh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(arctanh, "arctanh", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(as_strided, "as_strided", at::Tensor(const at::Tensor &, c10::IntArrayRef, c10::IntArrayRef, c10::optional<int64_t>))
  Hpu_KERNEL(asin, "asin", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(arcsin, "arcsin", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(atan, "atan", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(arctan, "arctan", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(atleast_1d, "atleast_1d", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(atleast_1d, "atleast_1d.Sequence", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(atleast_2d, "atleast_2d", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(atleast_2d, "atleast_2d.Sequence", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(atleast_3d, "atleast_3d", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(atleast_3d, "atleast_3d.Sequence", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(baddbmm, "baddbmm", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Scalar &, const at::Scalar &))
  Hpu_KERNEL(bartlett_window, "bartlett_window", at::Tensor(int64_t, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(bartlett_window, "bartlett_window.periodic", at::Tensor(int64_t, bool, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(batch_norm, "batch_norm", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool, double, double, bool))
  Hpu_KERNEL(quantized_batch_norm, "quantized_batch_norm", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const at::Tensor &, const at::Tensor &, double, double, int64_t))
  Hpu_KERNEL(_batch_norm_impl_index, "_batch_norm_impl_index", tuple_4_tensors_int64(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, bool, double, double, bool))
  Hpu_KERNEL(bernoulli, "bernoulli", at::Tensor(const at::Tensor &, c10::optional<at::Generator>))
  Hpu_KERNEL(bernoulli, "bernoulli.p", at::Tensor(const at::Tensor &, double, c10::optional<at::Generator>))
  Hpu_KERNEL(bilinear, "bilinear", at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(binary_cross_entropy, "binary_cross_entropy", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, int64_t))
  Hpu_KERNEL(binary_cross_entropy_with_logits, "binary_cross_entropy_with_logits", at::Tensor(const at::Tensor &, const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &, int64_t))
  Hpu_KERNEL(bincount, "bincount", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, int64_t))
  Hpu_KERNEL(bitwise_not, "bitwise_not", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(copysign, "copysign.Tensor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(copysign, "copysign.Scalar", at::Tensor(const at::Tensor &, const at::Scalar &))
  Hpu_KERNEL(logical_not, "logical_not", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(logical_xor, "logical_xor", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(logical_and, "logical_and", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(logical_or, "logical_or", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(blackman_window, "blackman_window", at::Tensor(int64_t, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(blackman_window, "blackman_window.periodic", at::Tensor(int64_t, bool, c10::optional<at::ScalarType>, c10::optional<at::Layout>, c10::optional<c10::Device>, c10::optional<bool>))
  Hpu_KERNEL(bmm, "bmm", at::Tensor(const at::Tensor &, const at::Tensor &))
  Hpu_KERNEL(broadcast_tensors, "broadcast_tensors", ::std::vector<at::Tensor>(at::TensorList))
  Hpu_KERNEL(broadcast_to, "broadcast_to", at::Tensor(const at::Tensor &, c10::IntArrayRef))
  Hpu_KERNEL(_sparse_broadcast_to, "_sparse_broadcast_to", at::Tensor(const at::Tensor &, at::IntArrayRef))
  Hpu_KERNEL(cat, "cat", at::Tensor(const at::ITensorListRef &, int64_t))
  Hpu_KERNEL(cat, "cat.names", at::Tensor(at::TensorList, at::Dimname))
  Hpu_KERNEL(concat, "concat", at::Tensor(at::TensorList, int64_t))
  Hpu_KERNEL(concat, "concat.names", at::Tensor(at::TensorList, at::Dimname))
  Hpu_KERNEL(concatenate, "concatenate", at::Tensor(at::TensorList, int64_t))
  Hpu_KERNEL(concatenate, "concatenate.names", at::Tensor(at::TensorList, at::Dimname))
  Hpu_KERNEL(block_diag, "block_diag", at::Tensor(at::TensorList))
  Hpu_KERNEL(ceil, "ceil", at::Tensor(const at::Tensor &))
  Hpu_KERNEL(chain_matmul, "chain_matmul", at::Tensor(at::TensorList))
  Hpu_KERNEL(unsafe_chunk, "unsafe_chunk", ::std::vector<at::Tensor>(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(chunk, "chunk", ::std::vector<at::Tensor>(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(tensor_split, "tensor_split.sections", ::std::vector<at::Tensor>(const at::Tensor &, int64_t, int64_t))
  Hpu_KERNEL(tensor_split, "tensor_split.indices", ::std::vector<at::Tensor>(const at::Tensor &, c10::IntArrayRef, int64_t))
  Hpu_KERNEL(tensor_split, "tensor_split.tensor_indices_or_sections", ::std::vector<at::Tensor>(const at::Tensor &, const at::Tensor &, int64_t))
  Hpu_KERNEL(clamp, "clamp", at::Tensor(const at::Tensor &, const c10::optional<at::Scalar> &, const c10::optional<at::Scalar> &))
  Hpu_KERNEL(clamp, "clamp.Tensor", at::Tensor(const at::Tensor &, const c10::optional<at::Tensor> &, const c10::optional<at::Tensor> &))
  Hpu_KERNEL(clamp_max, "clamp_max", at::Tensor(const at::Tensor &, const at::Scalar &))
}

} // namespace
} // namespace autocast
} // namespace at

