// Autogenerated file by gen_op.py. Do not edit directly!
#include "hpu_ops/cpu_fallback.h"
#include "hpu_ops/op_validator.h"
#include "hpu_ops/op_logger.h"
#include "common/dump_args.h"
#include "habana_eager/eager_exec.h"
#include "habana_eager/ops/eager_op.h"
#include "habana_eager/ops/override_fns.h"
#include "quantize_per_channel.h"


using habana_helpers::DTypeHelper;
using synapse_helpers::graph;
using torch::jit::Stack;


namespace habana {



at::Tensor quantize_per_channel(const at::Tensor & input, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, int64_t quant_min, int64_t quant_max, at::ScalarType type) {
  PT_EAGER_TRACE;
  PT_OP_INFO("quantize_per_channel: ", DUMP_7ARGS(input, scales, zero_points, axis, quant_min, quant_max, type));

  [[maybe_unused]] bool require_h2d = false;
  [[maybe_unused]] bool require_st = false;

  eager::EagerOp<at::Tensor> hpu_op{"quantized_decomposed::quantize_per_channel", {input, scales, zero_points, axis, quant_min, quant_max, type}};
  hpu_op.SetOutputMetaFn(QuantizePerChannelMeta);
  hpu_op.set_eager_op_info({eager::eagerOpKind::OutOfPlace, "quantized_decomposed::quantize_per_channel", require_h2d, require_st, decltype(eager::EagerOpMetaData::out_indices_){}});
  return hpu_op.call();
}





static const auto& kr_gen__quant = KernelRegistry()
;

TORCH_LIBRARY_IMPL(quantized_decomposed, HPU, m) {
  m.impl("quantize_per_channel", static_cast<at::Tensor (*)(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, int64_t, at::ScalarType)>(&habana::quantize_per_channel));

}



}  // namespace habana

