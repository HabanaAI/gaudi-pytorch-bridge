###############################################################################
# Copyright (C) 2022-2024 Habana Labs, Ltd. an Intel Company
# All Rights Reserved.
#
# Unauthorized copying of this file or any element(s) within it, via any medium
# is strictly prohibited.
# This file contains Habana Labs, Ltd. proprietary and confidential information
# and is subject to the confidentiality and license agreements under which it
# was provided.
#
###############################################################################

# Manual
# Fields descriptions:
#  - guid - the name of kernel/cguid executing operation.
#  - out_ids - indices of input tensors, based on which outputs are allocated.
#              Not applicable for inplace/out ops. Overriden by output_meta.
#  - inplace_ids - indices of inplace input tensors.
#  - scalar_ids - these input Scalars will be converted to Tensors.
#  - op_backend - custom OpBackend class overriding AddNode. Overrides most other fields.
#  - op_frontend - custom frontend class overriding LazyOp/EagerOp, e.g. for op signature change.
#  - schema_args - overriden signature of the op. Used with op_frontend.
#  - reduction - sets op_backend to ReductionBackendTemplate and op_frontend to ReductionFrontendTemplate.
#  - dtypes - dtypes supported by the operator. Not needed if op_validator used.
#  - output_meta - function for output tensors metadata calculation.
#  - custom_fill_params - function filling params structure for kernel/cguid. Not needed if op_backend used.
#  - promote_to_common_type - names of inputs to execute type promotion on.
#  - promote_int_to_float - names of inputs casted automatically to float.
#  - promote_int_to_long - names of inputs casted automatically to long.
#  - synapse_layouts - inputs/outputs layouts for non-layout-agnostic ops.
#  - custom_op_schema - signature of a custom op. Used for custom ops only.
#  - op_validator:
#      if not given, op support validated based on dtypes field,
#      if set to check-node-with-shared-layer, automatic validation by shared layer will be executed,
#             applicable only for ops mapped directly to one kernel/cguid, without op_backend and op_frontend,
#      other value points to the function which performs manual validation, e.g. for multiple kernels.
#  - only_shared_layer - mark ops registered and implemented manually in the backend just for shared layer validation.
#  - override_fn - function for full override of the op frontend and backend.
#  - lazy - separate flow for lazy mode.
#  - custom_output_shape - function for outputs shape calculation. Deprecated, use output_meta.
#  - out_dtypes - dtypes of output tensors. Deprecated, use output_meta.

_assert_async:
  guid: assert_async
  out_ids: [0]
  op_backend: AssertAsync

__ilshift__.Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__ilshift__.Tensor:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__irshift__.Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__irshift__.Tensor:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__lshift__.Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__lshift__.Scalar_out:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__lshift__.Tensor:
  broadcast: true
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__lshift__.Tensor_out:
  broadcast: true
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__rshift__.Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__rshift__.Scalar_out:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__rshift__.Tensor:
  broadcast: true
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

__rshift__.Tensor_out:
  broadcast: true
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

_copy_from:
  override_fn: _copy_from

_copy_from_and_resize:
  override_fn: _copy_from_and_resize

_efficientzerotensor:
  output_meta: EfficientZeroMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  op_backend: EfficientZeroTensor
  out_ids: [0]

_foreach_abs:
  dtypes: [BFloat16, Float]
  guid: abs_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachAbsSharedMeta

_foreach_abs_:
  dtypes: [BFloat16, Float]
  guid: abs_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachAbsSharedMeta

_foreach_add.Scalar:
  # dtypes: [BFloat16, Float, Short, Int] https://jira.habana-labs.com/browse/SW-88870
  guid: add_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add.List:
  # dtypes: [BFloat16, Float, Short, Int] https://jira.habana-labs.com/browse/SW-88870
  guid: add_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add.Tensor:
  # dtypes: [BFloat16, Float, Short, Int] https://jira.habana-labs.com/browse/SW-88870
  guid: add_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add.ScalarList:
  # dtypes: [BFloat16, Float, Short, Int] https://jira.habana-labs.com/browse/SW-88870
  guid: add_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: add_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: add_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: add_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_add_.ScalarList:
  guid: add_fwd
  op_backend: ForeachBinary
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  inplace_ids: [0]
  op_validator: AddForeachBinarySharedMeta

_foreach_addcdiv.Scalar:

  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcdiv_fwd
  op_backend: ForeachCompound
  output_meta: ForeachCompoundMeta
  out_ids: [0]
  op_validator: ForeachAddcdivSharedMeta

_foreach_addcdiv.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcdiv_fwd
  op_backend: ForeachCompound
  output_meta: ForeachCompoundMeta
  out_ids: [0]
  op_validator: ForeachAddcdivSharedMeta

_foreach_addcdiv.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcdiv_fwd
  op_backend: ForeachCompound
  output_meta: ForeachCompoundMeta
  out_ids: [0]
  op_validator: ForeachAddcdivSharedMeta

_foreach_addcdiv_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcdiv_fwd
  op_backend: ForeachCompound
  inplace_ids: [0]
  op_validator: ForeachAddcdivSharedMeta

_foreach_addcdiv_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcdiv_fwd
  op_backend: ForeachCompound
  inplace_ids: [0]
  op_validator: ForeachAddcdivSharedMeta

_foreach_addcdiv_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcdiv_fwd
  op_backend: ForeachCompound
  inplace_ids: [0]
  op_validator: ForeachAddcdivSharedMeta

_foreach_addcmul.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcmul_fwd
  op_backend: ForeachCompound
  output_meta: ForeachCompoundMeta
  out_ids: [0]
  op_validator: ForeachAddcmulSharedMeta

_foreach_addcmul.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcmul_fwd
  op_backend: ForeachCompound
  output_meta: ForeachCompoundMeta
  out_ids: [0]
  op_validator: ForeachAddcmulSharedMeta

_foreach_addcmul.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcmul_fwd
  op_backend: ForeachCompound
  output_meta: ForeachCompoundMeta
  out_ids: [0]
  op_validator: ForeachAddcmulSharedMeta

_foreach_addcmul_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcmul_fwd
  op_backend: ForeachCompound
  inplace_ids: [0]
  op_validator: ForeachAddcmulSharedMeta

_foreach_addcmul_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcmul_fwd
  op_backend: ForeachCompound
  inplace_ids: [0]
  op_validator: ForeachAddcmulSharedMeta

_foreach_addcmul_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: addcmul_fwd
  op_backend: ForeachCompound
  inplace_ids: [0]
  op_validator: ForeachAddcmulSharedMeta

_foreach_acos:
  dtypes: [Float]
  guid: acos_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachAcosSharedMeta

_foreach_acos_:
  dtypes: [Float]
  guid: acos_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachAcosSharedMeta

_foreach_asin:
  dtypes: [Float]
  guid: asin_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachAsinSharedMeta

_foreach_asin_:
  dtypes: [Float]
  guid: asin_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachAsinSharedMeta

_foreach_atan:
  dtypes: [Float]
  guid: atan_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachAtanSharedMeta

_foreach_atan_:
  dtypes: [Float]
  guid: atan_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachAtanSharedMeta

_foreach_ceil:
  dtypes: [BFloat16, Float]
  guid: ceil_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachCeilSharedMeta

_foreach_ceil_:
  dtypes: [BFloat16, Float]
  guid: ceil_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachCeilSharedMeta

_foreach_clamp_max.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_max
  output_meta: ForeachBinaryMeta
  op_backend: ForeachClamp
  out_ids: [0]
  op_validator: ForeachClampMaxSharedMeta

_foreach_clamp_max.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_max
  output_meta: ForeachBinaryMeta
  op_backend: ForeachClamp
  out_ids: [0]
  op_validator: ForeachClampMaxSharedMeta

_foreach_clamp_max.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_max
  output_meta: ForeachBinaryMeta
  op_backend: ForeachClamp
  out_ids: [0]
  op_validator: ForeachClampMaxSharedMeta

_foreach_clamp_max_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_max
  op_backend: ForeachClamp
  inplace_ids: [0]
  op_validator: ForeachClampMaxSharedMeta

_foreach_clamp_max_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_max
  op_backend: ForeachClamp
  inplace_ids: [0]


_foreach_clamp_max_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_max
  op_backend: ForeachClamp
  inplace_ids: [0]
  op_validator: ForeachClampMaxSharedMeta

_foreach_clamp_min.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_min
  output_meta: ForeachBinaryMeta
  op_backend: ForeachClamp
  out_ids: [0]
  op_validator: ForeachClampMinSharedMeta

_foreach_clamp_min.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_min
  output_meta: ForeachBinaryMeta
  op_backend: ForeachClamp
  out_ids: [0]
  op_validator: ForeachClampMinSharedMeta

_foreach_clamp_min.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_min
  output_meta: ForeachBinaryMeta
  op_backend: ForeachClamp
  out_ids: [0]
  op_validator: ForeachClampMinSharedMeta

_foreach_clamp_min_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_min
  op_backend: ForeachClamp
  inplace_ids: [0]
  op_validator: ForeachClampMinSharedMeta

_foreach_clamp_min_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_min
  op_backend: ForeachClamp
  inplace_ids: [0]
  op_validator: ForeachClampMinSharedMeta

_foreach_clamp_min_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: foreach_clamp_min
  op_backend: ForeachClamp
  inplace_ids: [0]
  op_validator: ForeachClampMinSharedMeta

_foreach_cos:
  guid: cos_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachCosSharedMeta

_foreach_cos_:
  dtypes: [BFloat16, Float]
  guid: cos_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachCosSharedMeta

_foreach_cosh:
  dtypes: [Float]
  guid: cosh_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachCoshSharedMeta

_foreach_cosh_:
  dtypes: [Float]
  guid: cosh_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachCoshSharedMeta

_foreach_div.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  output_meta: DivForeachBinaryMeta
  out_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  output_meta: DivForeachBinaryMeta
  out_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  output_meta: DivForeachBinaryMeta
  out_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  output_meta: DivForeachBinaryMeta
  out_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_div_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: div_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: DivForeachBinarySharedMeta

_foreach_erf:
  dtypes: [BFloat16, Float]
  guid: erf_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachErfSharedMeta

_foreach_erf_:
  dtypes: [BFloat16, Float]
  guid: erf_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachErfSharedMeta

_foreach_erfc:
  dtypes: [BFloat16, Float]
  op_backend: ForeachErfc
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachErfcSharedMeta

_foreach_erfc_:
  dtypes: [BFloat16, Float]
  inplace_ids: [0]
  op_backend: ForeachErfc
  op_validator: UnaryForeachErfcSharedMeta

_foreach_exp:
  dtypes: [BFloat16, Float]
  guid: exp_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachExpSharedMeta

_foreach_exp_:
  dtypes: [BFloat16, Float]
  guid: exp_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachExpSharedMeta

_foreach_expm1:
  dtypes: [Float]
  guid: expm1_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachExpm1SharedMeta

_foreach_expm1_:
  dtypes: [Float]
  guid: expm1_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachExpm1SharedMeta

_foreach_floor:
  dtypes: [BFloat16, Float]
  guid: floor_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachFloorSharedMeta

_foreach_floor_:
  dtypes: [BFloat16, Float]
  guid: floor_fwd
  inplace_ids: [0]
  op_backend: Foreach

_foreach_frac:
  dtypes: [BFloat16, Float]
  op_backend: ForeachFrac
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachFracSharedMeta

_foreach_frac_:
  dtypes: [BFloat16, Float]
  inplace_ids: [0]
  op_backend: ForeachFrac
  op_validator: UnaryForeachFracSharedMeta

_foreach_lerp.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: ForeachLerp
  output_meta: ForeachLerpMeta
  out_ids: [0]
  op_validator: ForeachLerpSharedMeta

_foreach_lerp.List:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: ForeachLerp
  output_meta: ForeachLerpMeta
  out_ids: [0]
  op_validator: ForeachLerpSharedMeta

_foreach_lerp_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: ForeachLerp
  inplace_ids: [0]
  op_validator: ForeachLerpSharedMeta

_foreach_lerp_.List:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: ForeachLerp
  inplace_ids: [0]
  op_validator: ForeachLerpSharedMeta

_foreach_lgamma:
  dtypes: [Float]
  guid: gammaln_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachLgammaSharedMeta

_foreach_lgamma_:
  dtypes: [Float]
  guid: gammaln_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachLgammaSharedMeta

_foreach_log:
  dtypes: [BFloat16, Float]
  guid: log_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachLogSharedMeta

_foreach_log_:
  dtypes: [BFloat16, Float]
  guid: log_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachLogSharedMeta

_foreach_log10:
  dtypes: [BFloat16, Float]
  op_backend: ForeachLog10
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachLog10SharedMeta

_foreach_log10_:
  dtypes: [BFloat16, Float]
  inplace_ids: [0]
  op_backend: ForeachLog10
  op_validator: UnaryForeachLog10SharedMeta

_foreach_log1p:
  dtypes: [BFloat16, Float]
  guid: log1p_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachLog1pSharedMeta

_foreach_log1p_:
  dtypes: [BFloat16, Float]
  guid: log1p_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachLog1pSharedMeta

_foreach_log2:
  dtypes: [BFloat16, Float]
  guid: log2_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachLog2SharedMeta

_foreach_log2_:
  dtypes: [BFloat16, Float]
  guid: log2_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachLog2SharedMeta

_foreach_maximum.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: max_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MaxForeachBinarySharedMeta

_foreach_maximum.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: max_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MaxForeachBinarySharedMeta

_foreach_maximum.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: max_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MaxForeachBinarySharedMeta

_foreach_maximum_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: max_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MaxForeachBinarySharedMeta

_foreach_maximum_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: max_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MaxForeachBinarySharedMeta

_foreach_maximum_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: max_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MaxForeachBinarySharedMeta

_foreach_minimum.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: min_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MinForeachBinarySharedMeta

_foreach_minimum.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: min_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MinForeachBinarySharedMeta

_foreach_minimum.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: min_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MinForeachBinarySharedMeta

_foreach_minimum_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: min_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MinForeachBinarySharedMeta

_foreach_minimum_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: min_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MinForeachBinarySharedMeta

_foreach_minimum_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: min_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MinForeachBinarySharedMeta

_foreach_mul.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_mul_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: mult_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: MultForeachBinarySharedMeta

_foreach_neg:
  dtypes: [BFloat16, Float, Int]
  guid: neg_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachNegSharedMeta

_foreach_neg_:
  dtypes: [BFloat16, Float, Int]
  guid: neg_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachNegSharedMeta

_foreach_pow.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: PowForeachBinarySharedMeta

_foreach_pow.ScalarAndTensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [1]
  op_validator: PowForeachBinarySharedMeta

_foreach_pow.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: PowForeachBinarySharedMeta

_foreach_pow.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: PowForeachBinarySharedMeta

_foreach_pow_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  inplace_ids: [0]
  op_validator: PowForeachBinarySharedMeta

_foreach_pow_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  inplace_ids: [0]
  op_validator: PowForeachBinarySharedMeta

_foreach_pow_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: pow_fwd
  op_backend: PowForeachBinary
  inplace_ids: [0]
  op_validator: PowForeachBinarySharedMeta

_foreach_reciprocal:
  dtypes: [BFloat16, Float]
  guid: reciprocal_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachReciprocalSharedMeta

_foreach_reciprocal_:
  dtypes: [BFloat16, Float]
  guid: reciprocal_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachReciprocalSharedMeta

_foreach_round:
  custom_fill_params: FillRoundParams
  dtypes: [BFloat16, Float]
  guid: round_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachRoundSharedMeta

_foreach_round_:
  custom_fill_params: FillRoundParams
  dtypes: [BFloat16, Float]
  guid: round_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachRoundSharedMeta

_foreach_sign:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sign_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachSignSharedMeta

_foreach_sign_:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sign_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachSignSharedMeta

_foreach_sigmoid:
  dtypes: [BFloat16, Float]
  guid: sigmoid_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachSigmoidSharedMeta

_foreach_sigmoid_:
  dtypes: [BFloat16, Float]
  guid: sigmoid_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachSigmoidSharedMeta

_foreach_sin:
  dtypes: [BFloat16, Float]
  guid: sin_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachSinSharedMeta

_foreach_sin_:
  dtypes: [BFloat16, Float]
  guid: sin_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachSinSharedMeta

_foreach_sinh:
  dtypes: [Float]
  guid: sinh_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachSinhSharedMeta

_foreach_sinh_:
  dtypes: [Float]
  guid: sinh_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachSinhSharedMeta

_foreach_sqrt:
  dtypes: [BFloat16, Float]
  guid: sqrt_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachSqrtSharedMeta

_foreach_sqrt_:
  dtypes: [BFloat16, Float]
  guid: sqrt_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachSqrtSharedMeta

_foreach_sub.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sub_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: SubForeachBinarySharedMeta

_foreach_sub.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sub_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: SubForeachBinarySharedMeta

_foreach_sub.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sub_fwd
  op_backend: ForeachBinary
  output_meta: ForeachBinaryMeta
  out_ids: [0]
  op_validator: SubForeachBinarySharedMeta

_foreach_sub_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sub_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: SubForeachBinarySharedMeta

_foreach_sub_.List:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sub_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: SubForeachBinarySharedMeta

_foreach_sub_.ScalarList:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Short, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Short, Char, Half]
  guid: sub_fwd
  op_backend: ForeachBinary
  inplace_ids: [0]
  op_validator: SubForeachBinarySharedMeta

_foreach_tan:
  dtypes: [Float]
  guid: tan_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachTanSharedMeta

_foreach_tan_:
  dtypes: [Float]
  guid: tan_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachTanSharedMeta

_foreach_tanh:
  dtypes: [BFloat16, Float]
  guid: tanh_fwd
  op_backend: Foreach
  output_meta: NonIntegerForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachTanhSharedMeta

_foreach_tanh_:
  dtypes: [BFloat16, Float]
  guid: tanh_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachTanhSharedMeta

_foreach_trunc:
  dtypes: [BFloat16, Float]
  guid: trunc_fwd
  op_backend: Foreach
  output_meta: ForeachMeta
  out_ids: [0]
  op_validator: UnaryForeachTruncSharedMeta

_foreach_trunc_:
  dtypes: [BFloat16, Float]
  guid: trunc_fwd
  inplace_ids: [0]
  op_backend: Foreach
  op_validator: UnaryForeachTruncSharedMeta

_foreach_zero_:
  dtypes: [BFloat16, Float, Int, Short, Byte, Char]
  inplace_ids: [0]
  op_backend: ForeachZero
  op_validator: UnaryForeachZeroSharedMeta

_fused_dropout:
  output_meta: FusedNativeDropoutMeta
  custom_fill_params: FillFusedNativeDropoutParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: GeneratorToSeed
  op_backend: FusedNativeDropout
  out_ids: [0, 0]
  schema_args: "(Tensor self, float p, Tensor? seed) -> (Tensor, Tensor)"

_cdist_forward:
  output_meta: CdistFwdMeta
  custom_fill_params: FillCdistFwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: cdist_fwd
  promote_to_common_type: [x1, x2]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

_pdist_forward:
  output_meta: PdistFwdMeta
  custom_fill_params: FillPdistFwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: pdist_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

native_dropout:
  output_meta: FusedNativeDropoutMeta
  custom_fill_params: FillFusedNativeDropoutParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  early_exit: NativeDropoutEarlyExit
  op_frontend: NativeDropoutFE
  op_backend: FusedNativeDropout
  out_ids: [0, 0]
  schema_args: "(Tensor input, float p, Tensor? seed) -> (Tensor, Tensor)"

pixel_shuffle:
  output_meta: PixelShuffleMeta
  custom_fill_params: FillPixelShuffleParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Short]
  out_ids: [0]
  guid: pixel_shuffle
  op_validator: check-node-with-shared-layer

native_dropout_backward:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  op_backend: NativeDropoutBackward
  out_ids: [0]
  op_validator: NativeDropoutBackwardSharedMeta

as_strided:
  override_fn: as_strided_hpu
  acc_thread: true

as_strided_:
  override_fn: as_strided_hpu_lazy_
  acc_thread: true

set_:
  override_fn: set_

set_.source_Storage:
  override_fn: set_source_Storage

set_.source_Tensor:
  override_fn: set_source_Tensor

set_.source_Storage_storage_offset:
  override_fn: set_source_Storage_storage_offset

_local_scalar_dense:
  override_fn: _local_scalar_dense_hpu

abs:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Half]
  guid: abs_fwd
  out_ids: [0]
  promote_to_common_type: [self]
  op_validator: check-node-with-shared-layer

abs_:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Half]
    Gaudi3: [BFloat16, Float, Int, Half]
  guid: abs_fwd
  inplace_ids: [0]
  promote_to_common_type: [self]
  op_validator: check-node-with-shared-layer

abs.out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Half]
  guid: abs_fwd
  promote_to_common_type: [self, out]
  op_validator: check-node-with-shared-layer

acos:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: acos_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

acos.out:
  promote_int_to_float: [self]
  safe_cast_check: false
  dtypes: [Float]
  guid: acos_fwd
  op_validator: check-node-with-shared-layer

acos_:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: acos_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

acosh:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: acosh_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

acosh.out:
  dtypes: [Float]
  promote_int_to_float: [self]
  safe_cast_check: false
  guid: acosh_fwd
  op_validator: check-node-with-shared-layer

acosh_:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: acosh_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

add.Tensor:
  broadcast: true
  custom_fill_params: FillBinaryAddParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  out_ids: [0]
  promote_to_common_type: [self, other]
  lazy:
    acc_thread: true
    override_fn: add_tensor_hpu_lazy

add.Scalar:
  broadcast: true
  custom_fill_params: FillBinaryAddParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  scalar_ids: [1, 2]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  out_ids: [0]
  promote_to_common_type: [self, other]
  lazy:
    acc_thread: true
    override_fn: add_scalar_hpu_lazy

add_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  override_fn: add_scalar_hpu_lazy_
  acc_thread: true
  promote_to_common_type: [self, other]

add_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  override_fn: add_tensor_hpu_lazy_
  acc_thread: true
  promote_to_common_type: [self, other]

add.out:
  broadcast: true
  custom_fill_params: FillBinaryAddParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  promote_to_common_type: [self, other]

add.Scalar_out:
  custom_fill_params: FillBinaryAddParams
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  scalar_ids: [1, 2]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  promote_to_common_type: [self, other]

addbmm:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: batch_gemm
  op_backend: AddBMM
  output_meta: AddBMMMeta
  out_ids: [0]
  op_validator: AddBMMSharedMeta

addbmm_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: batch_gemm
  op_backend: AddBMM
  inplace_ids: [0]
  output_meta: AddBMMMeta
  op_validator: AddBMMSharedMeta

addbmm.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: batch_gemm
  op_backend: AddBMM
  output_meta: AddBMMMeta
  op_validator: AddBMMSharedMeta

addcdiv:
  output_meta: AddCOpsMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: AddCOpFE
  custom_fill_params: FillAddcdivParams
  guid: addcdiv_fwd
  out_ids: [0]
  schema_args: "(Tensor self, Tensor tensor1, Tensor tensor2, *, Tensor? value=None) -> Tensor"
  op_validator: AddCDivSharedMeta

addcdiv_:
  output_meta: AddCOpsMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: AddCOpFE
  custom_fill_params: FillAddcdivParams
  guid: addcdiv_fwd
  inplace_ids: [0]
  schema_args: "(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Tensor? value=None) -> Tensor(a!)"
  op_validator: AddCDivSharedMeta

addcdiv.out:
  output_meta: AddCOpsMeta
  dtypes: [BFloat16, Float]
  op_frontend: AddCOpFE
  custom_fill_params: FillAddcdivParams
  guid: addcdiv_fwd
  schema_args: "(Tensor self, Tensor tensor1, Tensor tensor2, *, Tensor? value=None, Tensor(a!) out) -> Tensor(a!)"
  op_validator: AddCDivSharedMeta

addcmul:
  output_meta: AddCOpsMeta
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Half]
    Gaudi3: [BFloat16, Float, Short, Int, Half]
  op_frontend: AddCOpFE
  custom_fill_params: FillAddcmulParams
  guid: addcmul_fwd
  out_ids: [0]
  schema_args: "(Tensor self, Tensor tensor1, Tensor tensor2, *, Tensor? value=None) -> Tensor"
  op_validator: AddCMulSharedMeta

addcmul_:
  output_meta: AddCOpsMeta
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Half]
    Gaudi3: [BFloat16, Float, Short, Int, Half]
  op_frontend: AddCOpFE
  custom_fill_params: FillAddcmulParams
  guid: addcmul_fwd
  inplace_ids: [0]
  schema_args: "(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Tensor? value=None) -> Tensor(a!)"
  op_validator: AddCMulSharedMeta

addcmul.out:
  output_meta: AddCOpsMeta
  dtypes: [BFloat16, Float, Short, Int]
  op_frontend: AddCOpFE
  custom_fill_params: FillAddcmulParams
  guid: addcmul_fwd
  schema_args: "(Tensor self, Tensor tensor1, Tensor tensor2, *, Tensor? value=None, Tensor(a!) out) -> Tensor(a!)"
  op_validator: AddCMulSharedMeta

addmm:
  output_meta: AddMMMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: addmm
  op_backend: AddMM
  out_ids: [0]

addmm_:
  output_meta: AddMMMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: addmm
  op_backend: AddMM
  inplace_ids: [0]

addmm.out:
  output_meta: AddMMMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: addmm
  op_backend: AddMM

_addmm_activation.out:
  output_meta: AddMMMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: addmm
  op_backend: AddMMActivation

_addmm_activation:
  output_meta: AddMMMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  guid: addmm
  op_backend: AddMMActivation

addmv:
  output_meta: AddMVMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  guid: addmv
  op_backend: AddMV

addmv_:
  output_meta: AddMVMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  inplace_ids: [0]
  guid: addmv
  op_backend: AddMV

addmv.out:
  output_meta: AddMVMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: addmv
  op_backend: AddMV

addr:
  output_meta: AddRMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: addr_fwd
  custom_fill_params: FillAddrParams
  out_ids: [0]
  op_validator: check-node-with-shared-layer

addr_:
  output_meta: AddRMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: addr_fwd
  custom_fill_params: FillAddrParams
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

addr.out:
  output_meta: AddRMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: addr_fwd
  custom_fill_params: FillAddrParams
  op_validator: check-node-with-shared-layer

alias:
  override_fn: alias_hpu_lazy
  acc_thread: true

all:
  output_meta: AllAnyMeta
  op_validator: AllSharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int, Short]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  out_ids: [0]
  op_backend: All

all.all_out:
  output_meta: AllAnyMeta
  op_validator: AllSharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int, Short]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: All

all.dim:
  output_meta: AllAnyDimMeta
  op_validator: AllSharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int, Short]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AllDim
  out_ids: [0]

all.out:
  output_meta: AllAnyDimMeta
  op_validator: AllSharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int, Short]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AllDim

all.dims:
  output_meta: AllAnyDimMeta
  op_validator: AllSharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int, Short]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AllDims
  out_ids: [0]

all.dims_out:
  output_meta: AllAnyDimMeta
  op_validator: AllSharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int, Short]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AllDims

amax:
  dtypes:
    Gaudi: [Float, BFloat16, Int, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_max_multi_dim_fwd
  output_meta: AminAmaxMeta
  custom_fill_params: FillAminAmaxParams
  op_backend: AminAmax
  out_ids: [0]

amax.out:
  dtypes:
    Gaudi: [Float, BFloat16, Int, Long, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_max_multi_dim_fwd
  output_meta: AminAmaxMeta
  custom_fill_params: FillAminAmaxParams
  op_backend: AminAmax

amin:
  dtypes:
    Gaudi: [Float, BFloat16, Int, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_min_multi_dim_fwd
  output_meta: AminAmaxMeta
  custom_fill_params: FillAminAmaxParams
  op_backend: AminAmax
  out_ids: [0]

amin.out:
  dtypes:
    Gaudi: [Float, BFloat16, Int, Long, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_min_multi_dim_fwd
  output_meta: AminAmaxMeta
  custom_fill_params: FillAminAmaxParams
  op_backend: AminAmax

aminmax:
  output_meta: AminmaxMeta
  dtypes:
    Gaudi: [Float, BFloat16, Int, Long, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: Aminmax
  custom_fill_params: FillAminAmaxParams
  out_ids: [0, 0]

aminmax.out:
  output_meta: AminmaxMeta
  dtypes:
    Gaudi: [Float, BFloat16, Int, Long, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Int, Long, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: Aminmax
  custom_fill_params: FillAminAmaxParams

_aminmax:
  output_meta: AminmaxMeta
  dtypes:
    Gaudi: [Float, BFloat16, Long, Int, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Long, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Long, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: Aminmax
  custom_fill_params: FillAminAmaxParams
  out_ids: [0, 0]

_aminmax.dim:
  output_meta: AminmaxMeta
  dtypes:
    Gaudi: [Float, BFloat16, Long, Int, Byte, Short, Char]
    Gaudi2: [Float, BFloat16, Long, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [Float, BFloat16, Long, Int, Byte, Short, Char, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: Aminmax
  custom_fill_params: FillAminAmaxParams
  out_ids: [0, 0]

any.all_out:
  output_meta: AllAnyMeta
  op_validator: AnySharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: Any

any:
  output_meta: AllAnyMeta
  op_validator: AnySharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: Any
  out_ids: [0]

any.dim:
  output_meta: AllAnyDimMeta
  op_validator: AnySharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AnyDim
  out_ids: [0]

any.dims:
  output_meta: AllAnyDimMeta
  op_validator: AnySharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AnyDims
  out_ids: [0]

any.dims_out:
  output_meta: AllAnyDimMeta
  op_validator: AnySharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AnyDims

any.out:
  output_meta: AllAnyDimMeta
  op_validator: AnySharedMeta
  dtypes:
    Gaudi: [Char, Float, BFloat16, Int]
    Gaudi2: [Char, Float, BFloat16, Int, Short, Half]
    Gaudi3: [Char, Float, BFloat16, Int, Short, Half]
  op_backend: AnyDim

arange:
  output_meta: ArangeDefaultEndMeta
  op_backend: ArangeDefaultEnd
  guid: range
  dtypes:
    Gaudi: [Float, BFloat16, Long, Int, Short, Char, Byte]
    Gaudi2: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
    Gaudi3: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
  custom_fill_params: FillArangeDefaultEndParams
  out_ids: [0]
  op_validator: ArangeDefaultEndSharedMeta

arange.start:
  output_meta: ArangeDefaultStartEndMeta
  op_backend: ArangeDefaultStartEnd
  guid: range
  dtypes:
    Gaudi: [Float, BFloat16, Long, Int, Short, Char, Byte]
    Gaudi2: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
    Gaudi3: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
  custom_fill_params: FillArangeDefaultStartEndParams
  out_ids: [0]
  op_validator: ArangeDefaultStartEndSharedMeta

arange.start_step:
  output_meta: ArangeDefaultStartEndStepMeta
  op_backend: ArangeDefaultStartEndStep
  op_frontend: LazyArange
  guid: range
  dtypes:
    Gaudi: [Float, BFloat16, Long, Int, Short, Char, Byte]
    Gaudi2: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
    Gaudi3: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
  custom_fill_params: FillArangeDefaultStartEndStepParams
  out_ids: [0]
  schema_args: "(Tensor h2d_tensor, Tensor shape_tensor,*, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)"
  op_validator: ArangeDefaultStartStepSharedMeta

arange.start_out:
  op_backend: Arange
  op_frontend: ArangeFE
  guid: range
  dtypes:
    Gaudi: [Float, BFloat16, Long, Int, Short, Char, Byte]
    Gaudi2: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
    Gaudi3: [Float, BFloat16, Long, Int, Short, Char, Byte, Half]
  output_meta: ArangeStartOutMeta
  custom_fill_params: FillArangeParams
  schema_args: "(Scalar start, Scalar end, Scalar step, *, Tensor? h2d_tensor=None, Tensor? shape_tensor=None, Tensor(a!) out) -> Tensor(a!)"
  op_validator: ArangeDefaultStartOutSharedMeta

argmax:
  output_meta: ArgMinMaxMeta
  custom_fill_params: FillArgMinMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
  guid: argmax_multi_dim_fwd
  out_ids: [0]

argmax.out:
  output_meta: ArgMinMaxMeta
  custom_fill_params: FillArgMinMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
  guid: argmax_multi_dim_fwd

argmin:
  output_meta: ArgMinMaxMeta
  custom_fill_params: FillArgMinMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
  guid: argmin_multi_dim_fwd
  out_ids: [0]

argmin.out:
  output_meta: ArgMinMaxMeta
  custom_fill_params: FillArgMinMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half]
  guid: argmin_multi_dim_fwd

asin:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: asin_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

asin.out:
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  promote_int_to_float: [self]
  safe_cast_check: false
  guid: asin_fwd
  op_validator: check-node-with-shared-layer

asin_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: asin_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

asinh:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: asinh_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

asinh.out:
  promote_int_to_float: [self]
  safe_cast_check: false
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: asinh_fwd
  op_validator: check-node-with-shared-layer

asinh_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: asinh_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

atan:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: atan_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

atan.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: atan_fwd
  op_validator: check-node-with-shared-layer

atan_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: atan_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

atan2:
  broadcast: true
  promote_int_to_float: [self, other]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: atan2_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

atan2_:
  promote_int_to_float: [self, other]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: atan2_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

atan2.out:
  broadcast: true
  promote_int_to_float: [self, other]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: atan2_fwd
  op_validator: check-node-with-shared-layer

_adaptive_avg_pool2d:
  custom_fill_params: FillAdaptiveAvgPool2dParamsFwd
  output_meta: AdaptiveAvgPool2dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: adaptive_avg_pool_2d_fwd
  op_backend: AdaptiveAvgPool2dFwd
  out_ids: [0]
  op_validator: AdaptiveAvgPool2dFwdSharedMeta

adaptive_avg_pool2d.out:
  custom_fill_params: FillAdaptiveAvgPool2dParamsFwd
  output_meta: AdaptiveAvgPool2dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: adaptive_avg_pool_2d_fwd
  op_backend: AdaptiveAvgPool2dFwd
  op_validator: AdaptiveAvgPool2dFwdSharedMeta

_adaptive_avg_pool2d_backward:
  custom_fill_params: FillAdaptiveAvgPool2dParamsBwd
  output_meta: AdaptiveAvgPool2dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: complex_adaptive_avg_pool_2d_bwd
  op_backend: AdaptiveAvgPool2dBwd
  out_ids: [1]
  op_validator: AdaptiveAvgPool2dBwdSharedMeta

avg_pool2d:
  custom_fill_params: Fillavgpool2dParamsFwd
  output_meta: Avgpool2dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: avg_pool_2d_fwd
  out_ids: [0]
  op_backend: Avgpool2dFwd
  op_validator: AvgPool2dFwdSharedMeta

avg_pool2d.out:
  custom_fill_params: Fillavgpool2dParamsFwd
  output_meta: Avgpool2dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: avg_pool_2d_fwd
  op_backend: Avgpool2dFwd
  op_validator: AvgPool2dFwdSharedMeta

avg_pool2d_backward.grad_input:
  custom_fill_params: Fillavgpool2dParamsBwd
  output_meta: Avgpool2dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: Avgpool2dBwd
  op_validator: AvgPool2dBwdSharedMeta

avg_pool2d_backward:
  custom_fill_params: Fillavgpool2dParamsBwd
  output_meta: Avgpool2dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: Avgpool2dBwd
  out_ids: [0]
  op_validator: AvgPool2dBwdSharedMeta

avg_pool3d:
  custom_fill_params: FillAvgPool3dParamsFwd
  output_meta: AvgPool3dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: avg_pool_3d_fwd
  out_ids: [0]
  op_backend: Avgpool3dFwd
  op_validator: AvgPool3dFwdSharedMeta

avg_pool3d.out:
  custom_fill_params: FillAvgPool3dParamsFwd
  output_meta: AvgPool3dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: avg_pool_3d_fwd
  op_backend: Avgpool3dFwd
  op_validator: AvgPool3dFwdSharedMeta

avg_pool3d_backward:
  custom_fill_params: FillAvgPool3dParamsBwd
  output_meta: AvgPool3dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: avg_pool_3d_bwd
  op_backend: AvgPool3dBwd
  out_ids: [0]
  op_validator: AvgPool3dBwdSharedMeta

avg_pool3d_backward.grad_input:
  custom_fill_params: FillAvgPool3dParamsBwd
  output_meta: AvgPool3dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: avg_pool_3d_bwd
  op_backend: AvgPool3dBwd
  op_validator: AvgPool3dBwdSharedMeta

_adaptive_avg_pool3d:
  custom_fill_params: FillAdaptiveAvgPool3dParamsFwd
  output_meta: AdaptiveAvgPool3dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: adaptive_avg_pool_3d_fwd
  op_backend: AdaptiveAvgPool3dFwd
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]
  out_ids: [0]
  op_validator: AdaptiveAvgPool3dFwdSharedMeta

adaptive_avg_pool3d.out:
  custom_fill_params: FillAdaptiveAvgPool3dParamsFwd
  output_meta: AdaptiveAvgPool3dMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: adaptive_avg_pool_3d_fwd
  op_backend: AdaptiveAvgPool3dFwd
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]
  op_validator: AdaptiveAvgPool3dFwdSharedMeta

_adaptive_avg_pool3d_backward:
  output_meta: AdaptiveAvgPool3dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: complex_adaptive_avg_pool_3d_bwd
  op_backend: AdaptiveAvgPool3dBwd
  out_ids: [1]
  op_validator: AdaptiveAvgPool3dBwdSharedMeta

adaptive_avg_pool3d_backward.grad_input:
  output_meta: AdaptiveAvgPool3dBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: complex_adaptive_avg_pool_3d_bwd
  op_backend: AdaptiveAvgPool3dBwd

atanh:
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: atanh_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

atanh.out:
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: atanh_fwd
  promote_int_to_float: [self]
  safe_cast_check: false
  op_validator: check-node-with-shared-layer

atanh_:
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float]
    Gaudi3: [Float]
  guid: atanh_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

baddbmm:
  output_meta: BaddbmmMeta
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  guid: batch_gemm
  op_backend: Baddbmm
  out_ids: [0]
  op_validator: BAddBMMSharedMeta

baddbmm_:
  output_meta: BaddbmmMeta
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  guid: batch_gemm
  op_backend: Baddbmm
  inplace_ids: [0]
  op_validator: BAddBMMSharedMeta


baddbmm.out:
  output_meta: BaddbmmMeta
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  guid: batch_gemm
  op_backend: Baddbmm
  op_validator: BAddBMMSharedMeta

bernoulli:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_bernoulli_fwd
  op_frontend: GeneratorToSeed
  op_backend: Bernoulli
  out_ids: [0]
  schema_args: "(Tensor self, *, Tensor? seed=None) -> Tensor"

bernoulli_.float:
  custom_fill_params: FillBernoulliWithPParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_bernoulli_fwd
  inplace_ids: [0]
  op_frontend: BernoulliFE
  op_backend: BernoulliWithP
  schema_args: "(Tensor(a!) self, float p, *, Tensor? seed=None) -> Tensor(a!)"

bernoulli_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_bernoulli_fwd
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: BernoulliWithP
  schema_args: "(Tensor(a!) self, Tensor p, *, Tensor? seed=None) -> Tensor(a!)"

bernoulli.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_bernoulli_fwd
  op_frontend: GeneratorToSeedOut
  op_backend: BernoulliOut
  schema_args: "(Tensor self, *, Tensor? seed=None, Tensor(a!) out) -> Tensor(a!)"

bernoulli.float_out:
  custom_fill_params: FillBernoulliWithPParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_bernoulli_fwd
  op_frontend: BernoulliOutFE
  op_backend: BernoulliWithP
  schema_args: "(Tensor self, float p, *, Tensor? seed=None, Tensor(a!) out) -> Tensor(a!)"

binary_cross_entropy:
  output_meta: BinaryCrossEntropyFwdMetaData
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  op_backend: BinaryCrossEntropyFwd
  out_ids: [0]

binary_cross_entropy_backward:
  output_meta: BinaryCrossEntropyBwdMetaData
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  op_backend: BinaryCrossEntropyBwd
  out_ids: [0]

binary_cross_entropy.out:
  output_meta: BinaryCrossEntropyFwdMetaData
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  op_backend: BinaryCrossEntropyFwd

binary_cross_entropy_backward.grad_input:
  output_meta: BinaryCrossEntropyBwdMetaData
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  op_backend: BinaryCrossEntropyBwd

binary_cross_entropy_with_logits:
  output_meta: BinaryCrossEntropyLogitsFwdMetaData
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  op_backend: BinaryCrossEntropyWithLogitsFwd
  fallback_check: [BCELogitsFallbackCheck, self]
  out_ids: [0]

bitwise_and.Scalar:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  op_frontend: LazyBitwiseScalar
  guid: bitwise_and_fwd
  out_ids: [0]
  scalar_ids: [1]

bitwise_and.Tensor:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  guid: bitwise_and_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_and.Tensor_out:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  guid: bitwise_and_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_and_.Tensor:
  broadcast: true
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  guid: bitwise_and_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_left_shift.Scalar_Tensor:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  op_frontend: ScalarTypeConversion
  out_ids: [1]
  scalar_ids: [0]

bitwise_left_shift.Tensor:
  broadcast: true
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_left_shift.Tensor_out:
  broadcast: true
  dtypes: [Int, Char, Byte, Short, Long]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_left_shift.Tensor_Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_left_shift.Tensor_Scalar_out:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_left_shift_.Tensor:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_left_shift_.Tensor_Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillLeftShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_not:
  dtypes: [Int, Short, Byte, Char]
  guid: bitwise_not_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

bitwise_not.out:
  dtypes: [Int, Short, Byte, Char]
  guid: bitwise_not_fwd
  op_validator: check-node-with-shared-layer

bitwise_not_:
  dtypes: [Int, Short, Byte, Char]
  guid: bitwise_not_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

bitwise_or.Scalar:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  op_frontend: LazyBitwiseScalar
  guid: bitwise_or_fwd
  promote_to_common_type: [self, other]
  out_ids: [0]
  scalar_ids: [1]

bitwise_or.Tensor:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  guid: bitwise_or_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_or.Tensor_out:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  guid: bitwise_or_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_or_.Tensor:
  broadcast: true # WA to make DS test pass SW-155788
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Short, Byte, Char]
    Gaudi3: [Int, Short, Byte, Char]
  guid: bitwise_or_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_right_shift.Scalar_Tensor:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  op_frontend: ScalarTypeConversion
  out_ids: [1]
  scalar_ids: [0]

bitwise_right_shift.Tensor:
  broadcast: true
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_right_shift.Tensor_out:
  broadcast: true
  dtypes: [Long, Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_right_shift.Tensor_Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  out_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_right_shift.Tensor_Scalar_out:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_right_shift_.Tensor:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_right_shift_.Tensor_Scalar:
  dtypes: [Int, Char, Byte, Short]
  custom_fill_params: FillRightShiftParams
  guid: bitshift_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_xor.Scalar:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Long, Short, Byte, Char]
    Gaudi3: [Int, Long, Short, Byte, Char]
  op_frontend: LazyBitwiseScalar
  guid: bitwise_xor_fwd
  out_ids: [0]
  scalar_ids: [1]

bitwise_xor.Tensor:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Long, Short, Byte, Char]
    Gaudi3: [Int, Long, Short, Byte, Char]
  guid: bitwise_xor_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_xor.Tensor_out:
  output_meta: BitwiseLogicalMeta
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Long, Short, Byte, Char]
    Gaudi3: [Int, Long, Short, Byte, Char]
  guid: bitwise_xor_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bitwise_xor_.Tensor:
  broadcast: true
  dtypes:
    Gaudi: [Int, Short, Byte, Char]
    Gaudi2: [Int, Long, Short, Byte, Char]
    Gaudi3: [Int, Long, Short, Byte, Char]
  guid: bitwise_xor_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

bmm:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  output_meta: BmmMeta
  guid: batch_gemm
  out_ids: [0]
  op_validator: check-node-with-shared-layer

bmm.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  output_meta: BmmMeta
  guid: batch_gemm
  op_validator: check-node-with-shared-layer

bucketize.Scalar:
  custom_fill_params: FillBucketizeParams
  output_meta: BucketizeMeta
  guid: search_sorted_fwd
  promote_to_common_type: [self, boundaries]
  tpc_input_order: [1, 0]
  scalar_ids: [0]
  out_ids: [1]
  op_validator: check-node-with-shared-layer

bucketize.Tensor:
  custom_fill_params: FillBucketizeParams
  output_meta: BucketizeMeta
  guid: search_sorted_fwd
  promote_to_common_type: [self, boundaries]
  tpc_input_order: [1, 0]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

bucketize.Tensor_out:
  custom_fill_params: FillBucketizeParams
  output_meta: BucketizeMeta
  guid: search_sorted_fwd
  promote_to_common_type: [self, boundaries]
  tpc_input_order: [1, 0]
  op_validator: check-node-with-shared-layer

cat:
  promote_to_common_type: [tensors]
  output_meta: CatMeta
  st_meta: CatSTMeta
  guid: concat
  op_backend: CatHabanaOperator
  out_ids: [0]
  op_validator: CatSharedMeta

cat.out:
  promote_to_common_type: [tensors]
  output_meta: CatMeta
  st_meta: CatSTMeta
  guid: concat
  op_backend: CatHabanaOperator
  op_validator: CatSharedMeta

ceil:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: ceil_fwd
  out_ids: [0]
  op_backend: RoundingFunc
  op_validator: RoundingCeilSharedMeta

ceil.out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: ceil_fwd
  op_backend: RoundingFunc
  op_validator: RoundingCeilSharedMeta

ceil_:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: ceil_fwd
  inplace_ids: [0]
  op_backend: RoundingFunc
  op_validator: RoundingCeilSharedMeta

channel_shuffle:
  output_meta: ChannelShuffleMeta
  custom_fill_params: FillChannelShuffleParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: channel_shuffle
  out_ids: [0]

cholesky:
  dtypes: [Float]
  guid: cholesky_fwd
  op_backend: Cholesky
  out_ids: [0]

cholesky.out:
  dtypes: [Float]
  guid: cholesky_fwd
  op_backend: Cholesky

clamp:
  custom_fill_params: FillClampParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min, max]
  output_meta: ClampMeta
  guid: clamp_pt_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

clamp.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min, max]
  output_meta: ClampMeta
  op_backend: clampTensor
  out_ids: [0]
  op_validator: ClampSharedMeta

clamp_:
  custom_fill_params: FillClampParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min, max]
  guid: clamp_pt_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

clamp_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min, max]
  op_backend: clampTensor
  inplace_ids: [0]
  op_validator: ClampSharedMeta

clamp.out:
  custom_fill_params: FillClampParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min, max]
  guid: clamp_pt_fwd
  output_meta: ClampMeta
  op_backend: clamp
  op_validator: ClampSharedMeta

clamp.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min, max]
  output_meta: ClampMeta
  op_backend: clampTensor
  op_validator: ClampSharedMeta

clamp_max:
  custom_fill_params: FillClampMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: clamp_pt_fwd
  out_ids: [0]
  promote_to_common_type: [self, max]
  op_validator: check-node-with-shared-layer

clamp_max.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, max]
  broadcast: true
  guid: clamp_pt_fwd
  op_backend: clampMaxTensor
  out_ids: [0]
  op_validator: ClampMaxSharedMeta

clamp_max_:
  custom_fill_params: FillClampMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, max]
  guid: clamp_pt_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

clamp_max_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, max]
  guid: clamp_pt_fwd
  op_backend: clampMaxTensor
  inplace_ids: [0]
  op_validator: ClampMaxSharedMeta

clamp_max.out:
  custom_fill_params: FillClampMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, max]
  guid: clamp_pt_fwd
  op_backend: clamp
  op_validator: ClampMaxSharedMeta

clamp_max.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, max]
  broadcast: true
  op_backend: clampMaxTensor
  op_validator: ClampMaxSharedMeta

clamp_min:
  custom_fill_params: FillClampMinParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min]
  guid: clamp_pt_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

clamp_min.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min]
  broadcast: true
  guid: clamp_pt_fwd
  op_backend: clampMinTensor
  out_ids: [0]
  op_validator: ClampMinSharedMeta

clamp_min_:
  custom_fill_params: FillClampMinParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min]
  guid: clamp_pt_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

clamp_min_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min]
  guid: clamp_pt_fwd
  op_backend: clampMinTensor
  inplace_ids: [0]
  op_validator: ClampMinSharedMeta

clamp_min.out:
  custom_fill_params: FillClampMinParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min]
  guid: clamp_pt_fwd
  op_backend: clamp
  op_validator: ClampMinSharedMeta

clamp_min.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, min]
  broadcast: true
  op_backend: clampMinTensor
  op_validator: ClampMinSharedMeta

clone:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: identity
  output_meta: CloneMeta
  out_ids: [0]
  no_compute_flag: true
  op_validator: check-node-with-shared-layer

lift_fresh_copy:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: identity
  out_ids: [0]
  no_compute_flag: true

complex:
  override_fn: complex_hpu

constant_pad_nd:
  output_meta: ConstantPadMeta
  op_backend: ConstantPad
  custom_fill_params: FillConstantPadParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Half, Short, Char, Byte, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Half, Short, Char, Byte, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  out_ids: [0]
  lazy:
    acc_thread: true
    override_fn: constant_pad_hpu_lazy
#  schema_args: "(Tensor self, Tensor pad_tensor, Tensor output_shape_tensor, Scalar value, SymInt[] self_size) -> Tensor"

convolution_overrideable:
  output_meta: ConvolutionOverrideableMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: ConvolutionOverrideableFE
  op_backend: ConvolutionOverrideable
  out_ids: [0]

convolution:
  output_meta: ConvolutionOverrideableMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: ConvolutionOverrideableFE
  op_backend: ConvolutionOverrideable
  out_ids: [0]

convolution_backward_overrideable:
  output_meta: ConvolutionOverrideableMetaBwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: ConvolutionBackwardOverrideableFE
  op_backend: ConvolutionBackwardOverrideable
  out_ids: [0, 0, 0]

convolution_backward:
  output_meta: ConvolutionOverrideableMetaBwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: ConvolutionBackwardOverrideableFE
  op_backend: ConvolutionBackwardOverrideable
  # guid is specified here to distinguish between convolution_backward_overrideable
  # and convolution_backward, which takes additional bias_sizes argument
  guid: convolution_backward
  out_ids: [0, 0, 0]

copysign.out:
  broadcast: true
  dtypes: [BFloat16, Float, Int]
  guid: copy_sign_fwd
  promote_int_to_float: [self, other]
  op_validator: check-node-with-shared-layer

copysign.Scalar_out:
  dtypes: [BFloat16, Float, Int]
  guid: copy_sign_fwd
  promote_int_to_float: [self, other]
  scalar_ids: [1]
  op_validator: check-node-with-shared-layer

copysign_.Scalar:
  dtypes: [BFloat16, Float, Int]
  guid: copy_sign_fwd
  inplace_ids: [0]
  promote_int_to_float: [self, other]
  scalar_ids: [1]
  op_validator: check-node-with-shared-layer

copysign_.Tensor:
  dtypes: [BFloat16, Float, Int]
  guid: copy_sign_fwd
  inplace_ids: [0]
  promote_int_to_float: [self, other]
  op_validator: check-node-with-shared-layer

copysign.Scalar:
  dtypes: [BFloat16, Float, Int]
  guid: copy_sign_fwd
  scalar_ids: [1]
  out_ids: [0]
  promote_int_to_float: [self, other]
  op_validator: check-node-with-shared-layer

copysign.Tensor:
  broadcast: true
  dtypes: [BFloat16, Float, Int]
  guid: copy_sign_fwd
  out_ids: [0]
  promote_int_to_float: [self, other]
  op_validator: check-node-with-shared-layer

cos:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: cos_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

cos.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: cos_fwd
  op_validator: check-node-with-shared-layer

cos_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: cos_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

cosh:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float, Half]
    Gaudi3: [Float, Half]
  guid: cosh_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

cosh.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float, Half]
    Gaudi3: [Float, Half]
  guid: cosh_fwd
  op_validator: check-node-with-shared-layer

cosh_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [Float]
    Gaudi2: [Float, Half]
    Gaudi3: [Float, Half]
  guid: cosh_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

count_nonzero.dim_IntList:
  custom_fill_params: FillCountNonzeroParams
  output_meta: CountNonzeroMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Short, Char]
    Gaudi2: [BFloat16, Float, Int, Long, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Short, Char, Half]
  guid: count_non_zero_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

count_nonzero:
  custom_fill_params: FillCountNonzeroParams
  output_meta: CountNonzeroMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Short, Char]
    Gaudi2: [BFloat16, Float, Int, Long, Short, Char, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Short, Char, Half]
  guid: count_non_zero_fwd
  op_validator: check-node-with-shared-layer
  out_ids: [0]

cumprod:
  custom_fill_params: FillCumsumParams
  dtypes: [BFloat16, Float, Int]
  guid: cumprod_fwd
  output_meta: CumsumMeta
  op_backend: CumsumHabanaOperator
  out_ids: [0]
  op_validator: FillCumProdSharedMeta

cumprod.out:
  custom_fill_params: FillCumsumParams
  dtypes: [BFloat16, Float, Int]
  guid: cumprod_fwd
  output_meta: CumsumMeta
  op_backend: CumsumHabanaOperator
  op_validator: FillCumProdSharedMeta

cumprod_:
  custom_fill_params: FillCumsumParams
  dtypes: [BFloat16, Float, Int]
  guid: cumprod_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

cumsum:
  custom_fill_params: FillCumsumParams
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Half, Char]
    Gaudi3: [BFloat16, Float, Long, Int, Half, Char]
  guid: cumsum_fwd
  output_meta: CumsumMeta
  op_backend: CumsumHabanaOperator
  out_ids: [0]
  op_validator: FillCumSumSharedMeta

cumsum.out:
  custom_fill_params: FillCumsumParams
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Half, Char]
    Gaudi3: [BFloat16, Float, Long, Int, Half, Char]
  guid: cumsum_fwd
  output_meta: CumsumMeta
  op_backend: CumsumHabanaOperator
  op_validator: FillCumSumSharedMeta

cumsum_:
  custom_fill_params: FillCumsumParams
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Half, Char]
    Gaudi3: [BFloat16, Float, Long, Int, Half, Char]
  guid: cumsum_fwd
  output_meta: CumsumMeta
  op_backend: CumsumHabanaOperator
  inplace_ids: [0]
  op_validator: FillCumSumSharedMeta

diag.out:
  output_meta: DiagMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  custom_fill_params: FillDiagParams
  op_backend: Diag

div.out:
  broadcast: true
  guid: div
  promote_int_to_float: [self, other]
  op_backend: Divide
  op_frontend: BinaryScalarFE

div.out_mode:
  fallback_check: [DivTensorModeFallbackCheck, self, other, rounding_mode]
  guid: div
  op_backend: DivRoundModeOperator
  output_meta: DivModeMeta

div.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: div
  op_frontend: BinaryScalarToTensor_Int2Float
  out_ids: [0]
  scalar_ids: [1]
  promote_int_to_float: [self, other]
  op_backend: Divide

div_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: div
  op_frontend: LazyDivScalarInplace
  inplace_ids: [0]
  scalar_ids: [1]
  promote_int_to_float: [self, other]
  op_backend: Divide

div.Scalar_mode:
  fallback_check: [DivScalarModeFallbackCheck, self, other, rounding_mode]
  guid: div
  op_frontend: DivMode
  op_backend: DivRoundModeOperator
  out_ids: [0]
  scalar_ids: [1]
  output_meta: DivModeMeta

div_.Scalar_mode:
  fallback_check: [DivScalarModeFallbackCheck, self, other, rounding_mode]
  guid: div
  op_frontend: DivMode
  op_backend: DivRoundModeOperator
  inplace_ids: [0]
  scalar_ids: [1]

div.Tensor:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: div
  out_ids: [0]
  promote_int_to_float: [self, other]
  op_backend: Divide
  op_frontend: BinaryScalarFE

div.Tensor_mode:
  fallback_check: [DivTensorModeFallbackCheck, self, other, rounding_mode]
  guid: div
  op_frontend: DivMode
  op_backend: DivRoundModeOperator
  output_meta: DivModeMeta
  out_ids: [0]

div_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: div
  inplace_ids: [0]
  promote_int_to_float: [self, other]
  op_backend: Divide
  op_frontend: BinaryScalarFE

div_.Tensor_mode:
  fallback_check: [DivTensorModeFallbackCheck, self, other, rounding_mode]
  guid: div
  op_frontend: DivMode
  op_backend: DivRoundModeOperator
  inplace_ids: [0]

div.Scalar_mode_out:
  fallback_check: [DivScalarModeFallbackCheck, self, other, rounding_mode]
  guid: div
  op_frontend: DivMode
  op_backend: DivRoundModeOperator
  output_meta: DivModeMeta
  scalar_ids: [1]

div.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: div
  op_frontend: LazyDivScalarInplace
  promote_int_to_float: [self, other]
  scalar_ids: [1]
  op_backend: Divide

dot:
  output_meta: DotMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn, Int]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn, Int]
  guid: dot_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

dot.out:
  output_meta: DotMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn, Int]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn, Int]
  guid: dot_fwd
  op_validator: check-node-with-shared-layer

elu:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  custom_fill_params: FillEluParams
  guid: elu_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

elu_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  custom_fill_params: FillEluParams
  guid: elu_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

elu.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  custom_fill_params: FillEluParams
  guid: elu_fwd
  op_validator: check-node-with-shared-layer

elu_backward:
  custom_fill_params: FillEluBackwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: elu_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

elu_backward.grad_input:
  custom_fill_params: FillEluBackwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: elu_bwd
  op_validator: check-node-with-shared-layer

embedding:
  dtypes:
    Gaudi:
      weight: [BFloat16, Float, Int, Char, Short, Byte]
      indices: [Int, Long]
    Gaudi2:
      weight: [BFloat16, Float, Half, Int, Char, Short, Byte, Float8_e5m2, Float8_e4m3fn]
      indices: [Int, Long]
    Gaudi3:
      weight: [BFloat16, Float, Half, Int, Char, Short, Byte, Float8_e5m2, Float8_e4m3fn]
      indices: [Int, Long]
  fallback_check: [EmbeddingFallbackCheck, scale_grad_by_freq, sparse]
  output_meta: EmbeddingMeta
  guid: embedding_pt_fwd
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

embedding_dense_backward:
  custom_fill_params: FillEmbeddingDenseBackwardParams
  dtypes:
    Gaudi:
      grad_output: [BFloat16, Float]
      indices: [Int, Long]
    Gaudi2:
      grad_output: [BFloat16, Float, Half]
      indices: [Int, Long]
    Gaudi3:
      grad_output: [BFloat16, Float, Half]
      indices: [Int, Long]
  output_meta: EmbeddingDenseBwdMeta
  guid: embedding_dense_pt_bwd
  op_backend: EmbeddingDenseBwd
  out_ids: [0]

embedding_renorm_:
  dtypes:
    self: [Float]
    indices: [Long, Int]
  custom_fill_params: FillEmbeddingRenormFwdParams
  guid: embedding_renorm_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

embedding_renorm:
  dtypes:
    self: [Float]
    indices: [Long, Int]
  custom_fill_params: FillEmbeddingRenormFwdParams
  guid: embedding_renorm_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

equal:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  op_backend: Equal
  out_ids: [0]

eq.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  guid: equal_fwd
  output_meta: CompareMeta
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

eq.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  guid: equal_fwd
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

eq_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  guid: equal_fwd
  output_meta: CompareMeta
  scalar_ids: [1]
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

eq_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  guid: equal_fwd
  output_meta: CompareMeta
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

eq.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  guid: equal_fwd
  op_frontend: CompareScalarToTensor
  output_meta: CompareMeta
  scalar_ids: [1]
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true

eq.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
    Gaudi3: [BFloat16, Float, Half, Int, Char, Byte, Long, Short]
  guid: equal_fwd
  output_meta: CompareMeta
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

erf:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: erf_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

erf_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: erf_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

erf.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: erf_fwd
  op_validator: check-node-with-shared-layer

erfc:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: erfc_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

erfc_:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: erfc_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

erfc.out:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: erfc_fwd
  op_validator: check-node-with-shared-layer

erfinv:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: erfinv_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

erfinv_:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: erfinv_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

erfinv.out:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: erfinv_fwd
  op_validator: check-node-with-shared-layer

exp:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Short, Half]
    Gaudi3: [BFloat16, Float, Short, Half]
  guid: exp_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

exp_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Short, Half]
    Gaudi3: [BFloat16, Float, Short, Half]
  guid: exp_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

exp.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Short, Half]
    Gaudi3: [BFloat16, Float, Short, Half]
  guid: exp_fwd
  op_validator: check-node-with-shared-layer

exp2:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: pow2_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

exp2.out:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: pow2_fwd
  op_validator: check-node-with-shared-layer

exp2_:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: pow2_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

expm1:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: expm1_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

expm1.out:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: expm1_fwd
  op_validator: check-node-with-shared-layer

expand:
  override_fn: expand_hpu_lazy
  acc_thread: true

expm1_:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: expm1_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

exponential:
  custom_fill_params: FillExponentialParams
  dtypes: [BFloat16, Float]
  op_frontend: GeneratorToSeed
  op_backend: ExponentialSeedTensorInput
  out_ids: [0]
  output_meta: ExponentialMeta
  schema_args: "(Tensor self, float lambd=1.0, *, Tensor seed) -> Tensor"
  op_validator: ExponentialSharedMeta

exponential_:
  custom_fill_params: FillExponentialParams
  dtypes: [BFloat16, Float]
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: ExponentialSeedTensorInput
  schema_args: "(Tensor(a!) self, float lambd=1.0, *, Tensor seed) -> Tensor(a!)"
  op_validator: ExponentialSharedMeta

exponential.out:
  custom_fill_params: FillExponentialParams
  dtypes: [BFloat16, Float]
  op_frontend: GeneratorToSeedOut
  op_backend: ExponentialSeedTensorInput
  output_meta: ExponentialMeta
  schema_args: "(Tensor self, float lambd=1.0, *, Tensor seed, Tensor(a!) out) -> Tensor(a!)"
  op_validator: ExponentialSharedMeta

eye.out:
  output_meta: EyeMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: EyeOpOut
  op_validator: EyeSharedMeta

eye.m_out:
  output_meta: EyeMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: EyeOpOut
  op_validator: EyeSharedMeta

fill.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: FillScalar
  op_frontend: FillFE
  out_ids: [0]
  op_validator: FillScalarSharedMeta

fill.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: FillScalar
  op_frontend: FillFE
  op_validator: FillScalarSharedMeta

fill.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: Fill
  op_validator: FillSharedMeta

fill_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: FillScalar
  op_frontend: FillFE
  inplace_ids: [0]
  op_validator: FillScalarSharedMeta

fill_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: Fill
  inplace_ids: [0]
  op_validator: FillSharedMeta

flip:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  op_backend: Flip
  out_ids: [0]
  #op_validator: FlipSharedMeta SW-199509 & SW-202956

floor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: floor_fwd
  op_backend: RoundingFunc
  out_ids: [0]
  op_validator: RoundingFloorSharedMeta

floor.out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: floor_fwd
  op_backend: RoundingFunc
  op_validator: RoundingFloorSharedMeta

floor_:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half]
  guid: floor_fwd
  inplace_ids: [0]
  op_backend: RoundingFunc
  op_validator: RoundingFloorSharedMeta

floor_divide.out:
  custom_fill_params: FillFloorDivideParams
  broadcast: true
  dtypes: [BFloat16, Float, Int, Byte, Char, Long]
  guid: floor_divide_fwd
  promote_to_common_type: [self, other]
  op_frontend: BinaryScalarFE
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-188025

floor_divide:
  custom_fill_params: FillFloorDivideParams
  broadcast: true
  dtypes: [BFloat16, Float, Int, Byte, Char, Long]
  guid: floor_divide_fwd
  promote_to_common_type: [self, other]
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-188025

floor_divide_.Tensor:
  custom_fill_params: FillFloorDivideParams
  dtypes: [BFloat16, Float, Int, Byte, Char, Long]
  guid: floor_divide_fwd
  promote_to_common_type: [self, other]
  inplace_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-188025

floor_divide.Scalar:
  custom_fill_params: FillFloorDivideParams
  broadcast: true
  dtypes: [BFloat16, Float, Int, Byte, Char, Long]
  guid: floor_divide_fwd
  promote_to_common_type: [self, other]
  scalar_ids: [1]
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-188025

frac:
  dtypes: [BFloat16, Float]
  op_backend: Frac
  out_ids: [0]
  op_validator: FracSharedMeta

frac_:
  dtypes: [BFloat16, Float]
  op_backend: Frac
  inplace_ids: [0]
  op_validator: FracSharedMeta

frac.out:
  dtypes: [BFloat16, Float]
  op_backend: Frac
  op_validator: FracSharedMeta

frexp.Tensor:
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  output_meta: FrexpMeta
  op_backend: Frexp
  guid: frexp
  out_ids: [0, 0]
  op_validator: FrexpSharedMeta

frexp.Tensor_out:
  output_meta: FrexpMeta
  dtypes:
    Gaudi: [Float, BFloat16]
    Gaudi2: [Float, BFloat16, Half]
    Gaudi3: [Float, BFloat16, Half]
  guid: frexp
  op_backend: Frexp
  op_validator: FrexpSharedMeta

fmod.Scalar:
  dtypes: [BFloat16, Float, Int]
  guid: mod_fwd
  out_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmod.Scalar_out:
  dtypes: [BFloat16, Float, Int]
  guid: mod_fwd
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmod.Tensor:
  broadcast: true
  dtypes: [BFloat16, Float, Int]
  guid: mod_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmod.Tensor_out:
  broadcast: true
  dtypes: [BFloat16, Float, Int, Long]
  guid: mod_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmod_.Scalar:
  dtypes: [BFloat16, Float, Int]
  guid: mod_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmod_.Tensor:
  dtypes: [BFloat16, Float, Int]
  guid: mod_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

gather:
  custom_fill_params: FillGatherParams
  output_meta: GatherMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Int, Long]
  op_backend: GatherElementsOperator
  guid: gather_elements_fwd
  out_ids: [0]
  op_validator: GatherSharedMeta

gather.out:
  custom_fill_params: FillGatherParams
  output_meta: GatherMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Int, Long]
  op_backend: GatherElementsOperator
  guid: gather_elements_fwd
  op_validator: GatherSharedMeta

ge.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_equal_fwd
  scalar_ids: [1]
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

ge.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_equal_fwd
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

ge_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_equal_fwd
  scalar_ids: [1]
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

ge_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_equal_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

ge.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_equal_fwd
  op_frontend: CompareScalarToTensor
  scalar_ids: [1]
  out_ids: [0]
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: CompareGeSharedMeta

ge.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_equal_fwd
  output_meta: CompareMeta
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

gelu:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: Gelu
  output_meta: GeluMeta
  out_ids: [0]
  op_validator: GeluSharedMeta

gelu_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: Gelu
  inplace_ids: [0]
  op_validator: GeluSharedMeta

gelu.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  output_meta: GeluMeta
  op_backend: Gelu
  op_validator: GeluSharedMeta

gelu_backward:
  custom_fill_params: FillGeluBwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: cgelu_bwd

  out_ids: [0]
  op_validator: check-node-with-shared-layer

gelu_backward.grad_input:
  custom_fill_params: FillGeluBwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: cgelu_bwd
  op_validator: check-node-with-shared-layer

geometric_:
  custom_fill_params: FillRandomNegativeBinomialParams
  dtypes: [BFloat16, Float]
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: Geometric
  schema_args: "(Tensor(a!) self, float p, Tensor seed) -> Tensor(a!)"
  op_validator: GeometricSharedMeta

geometric.out:
  custom_fill_params: FillRandomNegativeBinomialParams
  dtypes: [BFloat16, Float]
  op_frontend: GeneratorToSeedOut
  op_backend: Geometric
  schema_args: "(Tensor self, float p, Tensor seed, Tensor(a!) out) -> Tensor(a!)"
  op_validator: GeometricSharedMeta

glu:
  dtypes: [Float]
  guid: glu_fwd
  custom_fill_params: FillGluFwdParams
  output_meta: GluMeta
  out_ids: [0]
  op_validator: check-node-with-shared-layer

glu.out:
  guid: glu_fwd
  custom_fill_params: FillGluFwdParams
  output_meta: GluMeta
  dtypes: [Float]
  op_validator: check-node-with-shared-layer

glu_backward:
  output_meta: GluBwdMeta
  dtypes: [Float]
  custom_fill_params: FillGluBwdParams
  guid: glu_bwd
  out_ids: [0]
  safe_cast_check: false
  op_validator: check-node-with-shared-layer

glu_backward.grad_input:
  output_meta: GluBwdMeta
  custom_fill_params: FillGluBwdParams
  dtypes: [Float]
  guid: glu_bwd
  op_validator: check-node-with-shared-layer

grid_sampler_2d:
  custom_fill_params: FillGridSamplerParams
  output_meta: GridSampler2dMeta
  dtypes: [BFloat16, Float]
  guid: grid_sampler_fwd
  synapse_layouts:
  - [WHCN, AWHN]
  - [WHCN]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

grid_sampler_3d:
  custom_fill_params: FillGridSamplerParams
  output_meta: GridSampler3dMeta
  dtypes: [BFloat16, Float]
  guid: grid_sampler_fwd
  synapse_layouts:
  - [WHDCN, AWHDN]
  - [WHDCN]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

native_group_norm:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: native_group_norm_fwd
  custom_fill_params: FillNativeGroupNormParams
  op_backend: NativeGroupNormFwd
  output_meta: GroupNormFwdMeta
  out_ids: [0, 0, 0]

native_group_norm_backward:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  output_meta: GroupNormBwdMeta
  op_backend: NativeGroupNormBwdHabanaOperator
  synapse_layouts:
  - [WHCN, WHCN, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, WHCN, DONT_CARE, DONT_CARE, DONT_CARE]
  out_ids: [0, 0, 0]
  lazy:
    acc_thread: true
    override_fn: native_group_norm_backward_hpu_lazy

gt.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Half]
  guid: greater_fwd
  output_meta: CompareMeta
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

gt.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_fwd
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

gt_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_fwd
  output_meta: CompareMeta
  scalar_ids: [1]
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

gt_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_fwd
  output_meta: CompareMeta
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

gt.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_fwd
  op_frontend: CompareScalarToTensor
  output_meta: CompareMeta
  scalar_ids: [1]
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: CompareGtSharedMeta

gt.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: greater_fwd
  output_meta: CompareMeta
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

hardshrink:
  dtypes: [Float, BFloat16]
  guid: shrink_fwd
  op_backend: HardShrinkFwd
  out_ids: [0]
  op_validator: HardShrinkFwdSharedMeta

hardshrink.out:
  dtypes: [Float, BFloat16]
  guid: shrink_fwd
  op_backend: HardShrinkFwd
  op_validator: HardShrinkFwdSharedMeta

hardshrink_backward:
  dtypes: [Float, BFloat16]
  guid: shrink_bwd
  op_backend: HardShrinkBwd
  out_ids: [0]
  op_validator: HardShrinkBwdSharedMeta

hardshrink_backward.grad_input:
  dtypes: [Float, BFloat16]
  guid: shrink_bwd
  op_backend: HardShrinkBwd
  op_validator: HardShrinkBwdSharedMeta

hardsigmoid.out:
  custom_fill_params: FillHardSigmoidParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: hard_sigmoid_fwd
  op_validator: check-node-with-shared-layer

hardsigmoid_backward.grad_input:
  custom_fill_params: FillHardSigmoidParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: hard_sigmoid_bwd
  op_validator: check-node-with-shared-layer

hardsigmoid:
  custom_fill_params: FillHardSigmoidParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: hard_sigmoid_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hardsigmoid_:
  custom_fill_params: FillHardSigmoidParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: hard_sigmoid_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

hardsigmoid_backward:
  custom_fill_params: FillHardSigmoidParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: hard_sigmoid_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hardswish:
  dtypes: [BFloat16, Float]
  guid: hard_swish_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hardswish.out:
  dtypes: [BFloat16, Float]
  guid: hard_swish_fwd
  op_validator: check-node-with-shared-layer

hardswish_:
  dtypes: [BFloat16, Float]
  guid: hard_swish_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

hardswish_backward:
  dtypes: [BFloat16, Float]
  guid: hard_swish_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hardtanh:
  custom_fill_params: FillClampParams
  dtypes: [BFloat16, Float, Int]
  guid: clamp_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hardtanh_:
  custom_fill_params: FillClampParams
  dtypes: [BFloat16, Float, Int]
  guid: clamp_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

hardtanh.out:
  custom_fill_params: FillClampParams
  dtypes: [BFloat16, Float, Int]
  guid: clamp_fwd
  op_validator: check-node-with-shared-layer

hardtanh_backward:
  custom_fill_params: FillHardTanhBwdParams
  dtypes: [BFloat16, Float]
  guid: hardtanh_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hardtanh_backward.grad_input:
  custom_fill_params: FillHardTanhBwdParams
  dtypes: [BFloat16, Float]
  guid: hardtanh_bwd
  op_validator: check-node-with-shared-layer

huber_loss:
  custom_fill_params: FillHuberLossFwdParams
  output_meta: HuberLossMeta
  dtypes: [BFloat16, Float]
  guid: huber_loss_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

huber_loss.out:
  custom_fill_params: FillHuberLossFwdParams
  output_meta: HuberLossMeta
  dtypes: [BFloat16, Float]
  guid: huber_loss_fwd
  op_validator: check-node-with-shared-layer

huber_loss_backward:
  output_meta: HuberLossBackwardMeta
  dtypes: [BFloat16, Float]
  op_backend: HuberLossBwdOperator
  out_ids: [0]
  op_validator: HuberLossBackwardSharedMeta

huber_loss_backward.out:
  output_meta: HuberLossBackwardMeta
  dtypes: [BFloat16, Float]
  op_backend: HuberLossBwdOperator
  op_validator: HuberLossBackwardSharedMeta

heaviside:
  broadcast: true
  dtypes: [BFloat16, Float, Int]
  guid: heaviside_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

heaviside.out:
  broadcast: true
  dtypes: [BFloat16, Float, Int]
  guid: heaviside_fwd
  op_validator: check-node-with-shared-layer

heaviside_:
  dtypes: [BFloat16, Float, Int]
  guid: heaviside_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

hypot:
  broadcast: true
  dtypes: [BFloat16, Float]
  guid: hypot_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

hypot.out:
  broadcast: true
  dtypes: [BFloat16, Float]
  guid: hypot_fwd
  op_validator: check-node-with-shared-layer

hypot_:
  dtypes: [BFloat16, Float]
  guid: hypot_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

index.Tensor:
  output_meta: IndexMeta
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Long, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Char, Byte, Half]
  guid: index
  fallback_check: [IndexFallbackCheck, indices]
  op_backend: IndexHabanaOperator
  op_frontend: IndexFE
  schema_args: "(Tensor self, Tensor[] indices, bool[] advanced_indexing_dims, int[] self_permute_dims, int num_index_tensors) -> Tensor"
  out_ids: [0]

index.Tensor_out:
  output_meta: IndexMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Half]
  guid: index
  fallback_check: [IndexFallbackCheck, indices]
  op_backend: IndexHabanaOperator
  op_frontend: IndexOutFE
  schema_args: "(Tensor self, Tensor[] indices, bool[] advanced_indexing_dims, int[] self_permute_dims, int num_index_tensors, Tensor(a!) out) -> Tensor(a!)"

isfinite:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  op_backend: _IsFiniteInfNan
  guid: isfinite_fwd
  out_dtypes: [Bool]
  out_ids: [0]
  op_validator: IsFiniteSharedMeta

isinf:
  custom_fill_params: FillisinfParamsFwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  guid: isinf_fwd
  op_backend: _IsFiniteInfNan
  out_dtypes: [Bool]
  out_ids: [0]
  op_validator: IsInfSharedMeta

isinf.out:
  custom_fill_params: FillisinfParamsFwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  out_dtypes: [Bool]
  guid: isinf_fwd
  op_backend: _IsFiniteInfNan
  op_validator: IsInfSharedMeta

isnan:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int, Byte, Char, Short, Long]
    Gaudi3: [BFloat16, Float, Half, Int, Byte, Char, Short, Long]
  guid: isnan_fwd
  op_backend: _IsFiniteInfNan
  out_dtypes: [Bool]
  out_ids: [0]
  op_validator: IsNanSharedMeta

isneginf:
  custom_fill_params: FillisneginfParamsFwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  guid: isinf_fwd
  op_backend: _IsFiniteInfNan
  out_dtypes: [Bool]
  out_ids: [0]
  op_validator: IsInfSharedMeta

isneginf.out:
  custom_fill_params: FillisneginfParamsFwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  out_dtypes: [Bool]
  guid: isinf_fwd
  op_backend: _IsFiniteInfNan
  op_validator: IsInfSharedMeta

isposinf:
  custom_fill_params: FillisposinfParamsFwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  guid: isinf_fwd
  op_backend: _IsFiniteInfNan
  out_dtypes: [Bool]
  out_ids: [0]
  op_validator: IsInfSharedMeta

isposinf.out:
  custom_fill_params: FillisposinfParamsFwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  out_dtypes: [Bool]
  guid: isinf_fwd
  op_backend: _IsFiniteInfNan
  op_validator: IsInfSharedMeta

kl_div:
  dtypes: [BFloat16, Float]
  override_fn: kl_div_hpu_lazy
  acc_thread: true

kthvalue:
  custom_fill_params: FillKthvalueParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  guid: kthvalue_fwd
  output_meta: KthvalueMeta
  out_ids: [0, 0]
  op_validator: check-node-with-shared-layer

kthvalue.values:
  custom_fill_params: FillKthvalueParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  guid: kthvalue_fwd
  output_meta: KthvalueMeta
  op_validator: check-node-with-shared-layer

index_add_:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int]
      index: [Int]
      source: [BFloat16, Float, Int]
    Gaudi2:
      self: [BFloat16, Float, Int, Half]
      index: [Int]
      source: [BFloat16, Float, Int, Half]
    Gaudi3:
      self: [BFloat16, Float, Int, Half]
      index: [Int]
      source: [BFloat16, Float, Int, Half]
  override_fn: index_add_hpu_lazy_
  acc_thread: true

index_copy:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char, Byte, Short]
      index: [Int]
      source: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      source: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      source: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
  guid: index_copy_fwd
  custom_fill_params: FillIndexCopyParams
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

index_copy_:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char, Byte, Short]
      index: [Int]
      source: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      source: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      source: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
  guid: index_copy_fwd
  custom_fill_params: FillIndexCopyParams
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

index_copy.out:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char, Byte, Short]
      index: [Int]
      source: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      source: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      source: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
  guid: index_copy_fwd
  custom_fill_params: FillIndexCopyParams
  op_validator: check-node-with-shared-layer


index_fill_.int_Scalar:
  output_meta: IndexFillMeta
  custom_fill_params: FillIndexCopyParams
  op_backend: IndexFill
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char, Byte, Short]
      index: [Int]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
  guid: index_copy_fwd
  inplace_ids: [0]
  op_validator: IndexFillSharedMeta

index_fill_.int_Tensor:
  output_meta: IndexFillMeta
  custom_fill_params: FillIndexCopyParams
  op_backend: IndexFill
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char, Byte, Short]
      index: [Int]
      value: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      value: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
      value: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
  guid: index_copy_fwd
  inplace_ids: [0]
  op_validator: IndexFillSharedMeta

index_fill.int_Scalar:
  output_meta: IndexFillMeta
  custom_fill_params: FillIndexCopyParams
  op_backend: IndexFill
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char, Byte, Short]
      index: [Int]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn, Long]
      index: [Int, Long]
  guid: index_copy_fwd
  out_ids: [0]
  op_validator: IndexFillSharedMeta

index_select:
  out_ids: [0]
  hw_scaling_ids: [0]
  output_meta: IndexSelectMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: gather_fwd
  custom_fill_params: FillIndexSelectParams
  fallback_check: [IndexSelectFallbackCheck, self]
  op_validator: check-node-with-shared-layer

index_select.out:
  output_meta: IndexSelectMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Byte, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: gather_fwd
  custom_fill_params: FillIndexSelectParams
  fallback_check: [IndexSelectFallbackCheck, self]
  op_validator: check-node-with-shared-layer

isin.Tensor_Tensor:
  custom_fill_params: FillIsinParams
  guid: isin_fwd
  op_validator: check-node-with-shared-layer
  out_ids: [0]
  output_meta: IsinMeta
  promote_to_common_type: [elements, test_elements]

isin.Tensor_Scalar:
  custom_fill_params: FillIsinParams
  guid: isin_fwd
  op_validator: check-node-with-shared-layer
  out_ids: [0]
  output_meta: IsinMeta
  promote_to_common_type: [elements, test_element]
  scalar_ids: [1]

isin.Scalar_Tensor:
  custom_fill_params: FillIsinParams
  guid: isin_fwd
  op_validator: check-node-with-shared-layer
  out_ids: [1]
  output_meta: ScalarIsinMeta
  promote_to_common_type: [element, test_elements]
  scalar_ids: [0]

isin.Tensor_Tensor_out:
  custom_fill_params: FillIsinParams
  guid: isin_fwd
  op_validator: check-node-with-shared-layer
  output_meta: IsinMeta
  promote_to_common_type: [elements, test_elements]
  safe_cast_check: false

isin.Tensor_Scalar_out:
  custom_fill_params: FillIsinParams
  guid: isin_fwd
  op_validator: check-node-with-shared-layer
  output_meta: IsinMeta
  promote_to_common_type: [elements, test_element]
  safe_cast_check: false
  scalar_ids: [1]

isin.Scalar_Tensor_out:
  custom_fill_params: FillIsinParams
  guid: isin_fwd
  op_validator: check-node-with-shared-layer
  output_meta: ScalarIsinMeta
  promote_to_common_type: [element, test_elements]
  safe_cast_check: false
  scalar_ids: [0]

le.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_equal_fwd
  scalar_ids: [1]
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

le.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_equal_fwd
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

le_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half]
  guid: less_equal_fwd
  output_meta: CompareMeta
  scalar_ids: [1]
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

le_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half]
  guid: less_equal_fwd
  output_meta: CompareMeta
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

le.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half]
  guid: less_equal_fwd
  op_frontend: CompareScalarToTensor
  output_meta: CompareMeta
  scalar_ids: [1]
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: CompareLeSharedMeta

le.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half]
  guid: less_equal_fwd
  output_meta: CompareMeta
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

leaky_relu_backward.grad_input:
  custom_fill_params: FillLeakyReluBackwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: leakyrelu_bwd
  op_validator: check-node-with-shared-layer

leaky_relu_backward:
  custom_fill_params: FillLeakyReluBackwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: leakyrelu_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

leaky_relu:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  custom_fill_params: FillLeakyReluParams
  guid: leakyrelu_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

leaky_relu_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  custom_fill_params: FillLeakyReluParams
  guid: leakyrelu_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

leaky_relu.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  custom_fill_params: FillLeakyReluParams
  guid: leakyrelu_fwd
  op_validator: check-node-with-shared-layer

lerp.Scalar:
  output_meta: LerpMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: Lerp
  scalar_ids: [2]
  out_ids: [0]
  op_validator: LerpSharedMeta

lerp.Tensor:
  output_meta: LerpMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: Lerp
  out_ids: [0]
  op_validator: LerpSharedMeta

lerp.Scalar_out:
  output_meta: LerpMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: Lerp
  scalar_ids: [2]
  op_validator: LerpSharedMeta

lerp.Tensor_out:
  output_meta: LerpMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: Lerp
  op_validator: LerpSharedMeta

lerp_.Scalar:
  output_meta: LerpMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: Lerp
  scalar_ids: [2]
  inplace_ids: [0]
  op_validator: LerpSharedMeta

lerp_.Tensor:
  output_meta: LerpMeta
  dtypes: [BFloat16, Float, Int]
  op_backend: Lerp
  inplace_ids: [0]
  op_validator: LerpSharedMeta

linalg_cross:
  dtypes: [BFloat16, Float, Int]
  op_backend: LinAlgCross
  out_ids: [0]

linalg_cross.out:
  dtypes: [BFloat16, Float, Int]
  op_backend: LinAlgCross

linalg_vector_norm:
  output_meta: VecNormMeta
  dtypes: [BFloat16, Float]
  op_backend: VecNormOp
  out_ids: [0]

linalg_vector_norm.out:
  output_meta: VecNormMeta
  dtypes: [BFloat16, Float]
  op_backend: VecNormOp

linalg_cholesky_ex:
  dtypes: [Float]
  guid: cholesky_fwd
  op_backend: Cholesky
  out_ids: [0, 0]
  output_meta: CholeskyMeta

linalg_cholesky_ex.L:
  dtypes: [Float]
  guid: cholesky_fwd
  op_backend: Cholesky

linear:
  output_meta: LinearMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: linear_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

linear_backward:
  output_meta: LinearBackwardMeta
  custom_fill_params: FillLinearBwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: linear_temp_bwd
  out_ids: [0, 0, 0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

linspace.Tensor_Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Half, Long]
  op_backend: LinspaceOut
  output_meta: LinspaceMeta
  out_ids: [0]

linspace.Scalar_Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Half, Long]
  op_backend: LinspaceOut
  output_meta: LinspaceMeta
  out_ids: [0]

linspace.out:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Half]
    Gaudi3: [BFloat16, Float, Int, Half]
  op_backend: LinspaceOut
  output_meta: LinspaceMeta

log.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: log_fwd
  op_validator: check-node-with-shared-layer

log:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: log_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

log_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: log_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

log1p:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: log1p_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

log1p_:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: log1p_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

log1p.out:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: log1p_fwd
  op_validator: check-node-with-shared-layer

log10:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: log10_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

log10_:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: log10_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

log10.out:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: log10_fwd
  op_validator: check-node-with-shared-layer

log2.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: log2_fwd
  op_validator: check-node-with-shared-layer

log2:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: log2_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

log2_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: log2_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

logaddexp:
  broadcast: true
  dtypes: [BFloat16, Float]
  guid: logaddexp_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

logaddexp.out:
  broadcast: true
  dtypes: [BFloat16, Float]
  guid: logaddexp_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

logaddexp2:
  broadcast: true
  dtypes: [BFloat16, Float]
  guid: logaddexp2_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

logaddexp2.out:
  broadcast: true
  dtypes: [BFloat16, Float]
  guid: logaddexp2_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

logcumsumexp:
  dtypes: [BFloat16, Float]
  guid: log_cumsum_exp_fwd
  custom_fill_params: FillCumsumParams
  out_ids: [0]
  op_validator: check-node-with-shared-layer

_logcumsumexp:
  dtypes: [BFloat16, Float]
  guid: log_cumsum_exp_fwd
  custom_fill_params: FillCumsumParams
  out_ids: [0]
  op_validator: check-node-with-shared-layer

log_normal_:
  custom_fill_params: FillLogNormalParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: log_normal_fwd
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: RandomSeedTensorInput
  schema_args: "(Tensor(a!) self, float mean=1, float std=2, *, Tensor seed) -> Tensor(a!)"

log_sigmoid_backward:
  dtypes: [Float]
  op_backend: LogSigmoidBackward
  out_ids: [0]

log_sigmoid_backward.grad_input:
  dtypes: [Float]
  op_backend: LogSigmoidBackward

log_sigmoid_forward:
  output_meta: LogSigmoidFwdMeta
  dtypes: [Float]
  op_backend: LogSigmoidForward
  out_ids: [0, 0]

log_sigmoid_forward.output:
  output_meta: LogSigmoidFwdMeta
  dtypes: [Float]
  op_backend: LogSigmoidForward

_log_softmax:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: logsoftmax_fwd
  custom_fill_params: FillLogSoftmaxParams
  out_ids: [0]
  op_validator: check-node-with-shared-layer

_log_softmax.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: logsoftmax_fwd
  custom_fill_params: FillLogSoftmaxParams
  op_validator: check-node-with-shared-layer

_log_softmax_backward_data:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: logsoftmax_bwd_data
  custom_fill_params: FillLogSoftmaxBackwardParams
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

_log_softmax_backward_data.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: logsoftmax_bwd_data
  custom_fill_params: FillLogSoftmaxBackwardParams
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

logcumsumexp.out:
  dtypes: [BFloat16, Float]
  guid: log_cumsum_exp_fwd
  custom_fill_params: FillCumsumParams
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

_logcumsumexp.out:
  dtypes: [BFloat16, Float]
  guid: log_cumsum_exp_fwd
  custom_fill_params: FillCumsumParams
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

logical_and:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Long, Int, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Long, Int, Byte, Char]
  guid: and
  out_ids: [0]
  op_validator: LogicalBinaryAndSharedMeta

logical_and_:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Long, Int, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Long, Int, Byte, Char]
  guid: and
  inplace_ids: [0]
  op_validator: LogicalBinaryAndSharedMeta

logical_and.out:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Long, Int, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Long, Int, Byte, Char]
  guid: and
  op_validator: LogicalBinaryAndSharedMeta

logical_not:
  output_meta: LogicalNotMeta
  op_backend: LogicalNotOut
  dtypes:
    Gaudi: [Float, BFloat16, Int, Short, Byte, Char]
    Gaudi2: [Float, BFloat16, Int, Short, Half, Byte, Char]
    Gaudi3: [Float, BFloat16, Int, Short, Half, Byte, Char]
  guid: not
  out_ids: [0]
  op_validator: LogicalNotSharedMeta

logical_not_:
  output_meta: LogicalNotMeta
  dtypes:
    Gaudi: [Float, BFloat16, Int, Short, Byte, Char]
    Gaudi2: [Float, BFloat16, Int, Short, Half, Byte, Char]
    Gaudi3: [Float, BFloat16, Int, Short, Half, Byte, Char]
  guid: not
  inplace_ids: [0]
  safe_cast_check: false
  op_validator: check-node-with-shared-layer

logical_not.out:
  output_meta: LogicalNotMeta
  op_backend: LogicalNotOut
  dtypes:
    Gaudi: [Float, BFloat16, Int, Short, Byte, Char]
    Gaudi2: [Float, BFloat16, Int, Short, Half, Byte, Char]
    Gaudi3: [Float, BFloat16, Int, Short, Half, Byte, Char]
  guid: not
  op_validator: LogicalNotSharedMeta

logical_or:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Byte, Char]
  guid: or
  out_ids: [0]
  op_validator: LogicalBinaryOrSharedMeta

logical_or_:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Byte, Char]
  guid: or
  inplace_ids: [0]
  op_validator: LogicalBinaryOrSharedMeta

logical_or.out:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Byte, Char]
  guid: or
  op_validator: LogicalBinaryOrSharedMeta

logical_xor:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Byte, Char]
  guid: xor
  out_ids: [0]
  op_validator: LogicalBinaryXorSharedMeta

logical_xor_:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Byte, Char]
  guid: xor
  inplace_ids: [0]
  op_validator: LogicalBinaryXorSharedMeta

logical_xor.out:
  output_meta: LogicalMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte, Char]
    Gaudi2: [BFloat16, Float, Half, Byte, Char]
    Gaudi3: [BFloat16, Float, Half, Byte, Char]
  guid: xor
  op_validator: LogicalBinaryXorSharedMeta

logit:
  custom_fill_params: FillLogitForwardParams
  dtypes: [BFloat16, Float]
  guid: logit_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

logit_:
  custom_fill_params: FillLogitForwardParams
  dtypes: [BFloat16, Float]
  guid: logit_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

logit.out:
  custom_fill_params: FillLogitForwardParams
  dtypes: [BFloat16, Float]
  guid: logit_fwd
  op_validator: check-node-with-shared-layer

logit_backward:
  custom_fill_params: FillLogitBackwardParams
  dtypes: [BFloat16, Float]
  guid: logit_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

logit_backward.grad_input:
  custom_fill_params: FillLogitBackwardParams
  dtypes: [BFloat16, Float]
  guid: logit_bwd
  op_validator: check-node-with-shared-layer

logspace:
  dtypes: [BFloat16, Float, Int]
  op_backend: LogSpace
  output_meta: LogspaceMeta
  out_ids: [0]

logspace.out:
  dtypes: [BFloat16, Float, Int]
  op_backend: LogSpace
  output_meta: LogspaceOutMeta

lt.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_fwd
  scalar_ids: [1]
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

lt.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_fwd
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

lt_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_fwd
  output_meta: CompareMeta
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

lt_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_fwd
  output_meta: CompareMeta
  scalar_ids: [1]
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

lt.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_fwd
  op_frontend: CompareScalarToTensor
  output_meta: CompareMeta
  scalar_ids: [1]
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: CompareLtSharedMeta

lt.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half, Long]
  guid: less_fwd
  output_meta: CompareMeta
  out_ids: [0]
  promote_to_common_type: [self, other]
  handle_bool_inputs: true
  op_validator: check-node-with-shared-layer

_masked_scale:
  output_meta: MaskedScaleMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short, Byte, Char]
    Gaudi2: [BFloat16, Float, Int, Short, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Int, Short, Byte, Char, Half]
  op_backend: MaskedScale
  out_ids: [0]

masked_scatter:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char]
    Gaudi2: [BFloat16, Float, Half, Int, Char]
    Gaudi3: [BFloat16, Float, Half, Int, Char]
  guid: masked_scatter
  out_ids: [0]

masked_scatter_:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char]
    Gaudi2: [BFloat16, Float, Half, Int, Char]
    Gaudi3: [BFloat16, Float, Half, Int, Char]
  guid: masked_scatter
  inplace_ids: [0]

masked_fill_.Scalar:
  custom_fill_params: FillMaskedFillParams
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char]
      mask: [Int, Char]
      value: [BFloat16, Float, Int, Char]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
  guid: masked_fill_fwd
  op_backend: MaskedFill
  inplace_ids: [0]
  scalar_ids: [2]

masked_fill_.Tensor:
  custom_fill_params: FillMaskedFillParams
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char]
      mask: [Int, Char]
      value: [BFloat16, Float, Int, Char]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
  guid: masked_fill_fwd
  op_backend: MaskedFill
  st_meta: MaskedFillSTMeta
  inplace_ids: [0]

masked_fill.Scalar:
  custom_fill_params: FillMaskedFillParams
  output_meta: MaskedFillMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char]
      mask: [Int, Char]
      value: [BFloat16, Float, Int, Char]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
  guid: masked_fill_fwd
  op_backend: MaskedFill
  st_meta: MaskedFillSTMeta
  scalar_ids: [2]
  out_ids: [0]

masked_fill.Tensor:
  custom_fill_params: FillMaskedFillParams
  output_meta: MaskedFillMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Char]
      mask: [Int, Char]
      value: [BFloat16, Float, Int, Char]
    Gaudi2:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Char, Half, Long]
      mask: [Int, Char, Long]
      value: [BFloat16, Float, Int, Char, Half, Long]
  guid: masked_fill_fwd
  op_backend: MaskedFill
  st_meta: MaskedFillSTMeta
  out_ids: [0]

max.dim:
  custom_fill_params: FillMinMaxDimParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_max_fwd
  output_meta: MinMaxMeta
  op_backend: MaxDimOp
  out_ids: [0, 0]

max.dim_max:
  custom_fill_params: FillMinMaxDimParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_max_fwd
  output_meta: MinMaxMeta
  op_backend: MinMaxOut

maximum:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: max_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

maximum.out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: max_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmax:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: max_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmax.out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: max_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

max_pool2d_with_indices:
  custom_fill_params: FillSpatialReduction2DParamsFwd
  output_meta: MaxPool2DMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: pt_maxpool_2d_fwd
  op_backend: MaxPool2DWithIndices
  op_frontend: LazyMaxPool
  out_ids: [0, 0]

max_pool2d_with_indices.out:
  custom_fill_params: FillSpatialReduction2DParamsFwd
  output_meta: MaxPool2DMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: pt_maxpool_2d_fwd
  op_backend: MaxPool2DWithIndices

max_pool2d_with_indices_backward:
  custom_fill_params: FillSpatialReduction2DParamsBwd
  output_meta: MaxPoolMetaBwd
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      grad_output: [BFloat16, Float]
      indices: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Half]
      grad_output: [BFloat16, Float, Half]
      indices: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Half]
      grad_output: [BFloat16, Float, Half]
      indices: [Int, Long]
  op_backend: MaxPool2DWithIndicesBwd
  guid: pt_maxpool_2d_bwd
  out_ids: [0]

max_pool2d_with_indices_backward.grad_input:
  custom_fill_params: FillSpatialReduction2DParamsBwd
  output_meta: MaxPoolMetaBwd
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      grad_output: [BFloat16, Float]
      indices: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Half]
      grad_output: [BFloat16, Float, Half]
      indices: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Half]
      grad_output: [BFloat16, Float, Half]
      indices: [Int, Long]
  op_backend: MaxPool2DWithIndicesBwd
  guid: pt_maxpool_2d_bwd

max_pool3d_with_indices:
  custom_fill_params: FillSpatialReduction3DParamsFwd
  dtypes:
    self: [BFloat16, Float]
    indices: [Int]
  guid: maxpool_3d_fwd
  op_backend: MaxPool3DWithIndicesOut
  output_meta: Maxpool3dWithIndicesMeta
  out_ids: [0, 0]

# Due to (https://jira.habana-labs.com/browse/SW-74263) issue following lines are commentd.
# max_pool3d_with_indices.out:
#   custom_fill_params: FillSpatialReduction3DParamsFwd
#   custom_output_shape: MaxPool3DIndicesOutputShape
#   dtypes:
#     self: [BFloat16, Float]
#     out: [BFloat16, Float]
#     indices: [BFloat16, Float]
#   op_backend: MaxPool3DWithIndicesOut
#   synapse_layouts:
#   - [WHDCN]
#   - [WHDCN, WHDCN]

max_pool3d_with_indices_backward:
  custom_fill_params: FillSpatialReduction3DParamsBwd
  output_meta: MaxPoolMetaBwd
  dtypes:
    self: [BFloat16, Float]
    grad_output: [BFloat16, Float]
    indices: [Int, Long]
  guid: maxpool_3d_bwd
  op_backend: MaxPool3DWithIndicesBwd
  out_ids: [0]

# Due to (https://jira.habana-labs.com/browse/SW-74263) issue following lines are commentd.
# max_pool3d_with_indices_backward.grad_input:
#   custom_fill_params: FillSpatialReduction3DParamsBwd
#   custom_output_shape: MaxPoolOutputShapeBwd
#   dtypes:
#     self: [BFloat16, Float]
#     grad_output: [BFloat16, Float]
#     indices: [Byte, Int]
#   op_backend: MaxPool3DWithIndicesBwd
#   synapse_layouts:
#   - [WHDCN, WHDCN]
#   - [WHDCN]

mean:
  output_meta: ReductionOpMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: reduce_mean_multi_dim_fwd
  op_backend: ReductionOp
  promote_to_common_type: [self]
  out_ids: [0]
  acc_thread: true

mean.dim:
  output_meta: ReductionOpListMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: reduce_mean_multi_dim_fwd
  op_backend: ReductionOpList
  promote_to_common_type: [self]
  out_ids: [0]

mean.out:
  output_meta: ReductionOpListMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: reduce_mean_multi_dim_fwd
  op_backend: ReductionOpList
  promote_to_common_type: [self]

median:
  output_meta: MedianOutputMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  guid: median
  out_ids: [0]

median.dim:
  output_meta: MedianDimOutputMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  op_backend: Mediandim
  out_ids: [0, 0]

median.dim_values:
  output_meta: MedianDimOutputMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Half, Int]
    Gaudi3: [BFloat16, Float, Half, Int]
  op_backend: Mediandim

max:
  output_meta: ReduceMinMaxMeta
  custom_fill_params: FillMinMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_max_multi_dim_fwd
  out_ids: [0]

min:
  output_meta: ReduceMinMaxMeta
  custom_fill_params: FillMinMaxParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_min_multi_dim_fwd
  out_ids: [0]

min.dim:
  custom_fill_params: FillMinMaxDimParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_min_fwd
  output_meta: MinMaxMeta
  op_backend: MinMaxOut
  out_ids: [0, 0]

min.dim_min:
  custom_fill_params: FillMinMaxDimParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Half, Long, Float8_e5m2, Float8_e4m3fn]
  guid: reduce_min_fwd
  output_meta: MinMaxMeta
  op_backend: MinMaxOut

fmin:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: min_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

fmin.out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: min_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

minimum:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: min_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

minimum.out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: min_fwd
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

mish:
  dtypes: [BFloat16, Float]
  guid: mish_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

mish_:
  dtypes: [BFloat16, Float]
  guid: mish_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

mish.out:
  dtypes: [BFloat16, Float]
  guid: mish_fwd
  op_validator: check-node-with-shared-layer

mish_backward:
  dtypes: [BFloat16, Float]
  op_backend: Mishbackward
  out_ids: [0]

mm:
  output_meta: MmMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: gemm
  out_ids: [0]

mm.out:
  output_meta: MmMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: gemm

mse_loss:
  custom_fill_params: FillMseLossParams
  output_meta: MseLossFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: mse_loss_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

mse_loss_backward:
  custom_fill_params: FillMseLossParams
  output_meta: MseLossBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: mse_loss_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

mse_loss.out:
  custom_fill_params: FillMseLossParams
  output_meta: MseLossFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: mse_loss_fwd
  op_validator: check-node-with-shared-layer

mse_loss_backward.grad_input:
  custom_fill_params: FillMseLossParams
  output_meta: MseLossBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: mse_loss_bwd
  op_validator: check-node-with-shared-layer

mul.Tensor:
  dtypes:
    Gaudi: [BFloat16, Byte, Char, Float, Short, Int]
    Gaudi2: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mult_fwd
  st_meta: BinarySTMeta
  out_ids: [0]
  broadcast: true
  promote_to_common_type: [self, other]
  op_frontend: BinaryScalarFE

mul.Scalar:
  dtypes:
    Gaudi: [BFloat16, Byte, Char, Float, Int, Short]
    Gaudi2: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mult_fwd
  out_ids: [0]
  scalar_ids: [1]
  st_meta: BinarySTMeta
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

mul.Scalar_out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Byte, Char, Float, Int, Short]
    Gaudi2: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mult_fwd
  st_meta: BinarySTMeta
  promote_to_common_type: [self, other]
  scalar_ids: [1]
  op_validator: check-node-with-shared-layer

mul_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Byte, Char, Float, Int, Short]
    Gaudi2: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mult_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  op_frontend: BinaryScalarFE

mul_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Byte, Char, Float, Int, Short]
    Gaudi2: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Char, Float, Int, Long, Short, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mult_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

mul.out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Byte, Char, Float, Int, Short, Long]
    Gaudi2: [BFloat16, Byte, Char, Float, Int, Short, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Char, Float, Int, Short, Half, Long, Float8_e5m2, Float8_e4m3fn]
  guid: mult_fwd
  st_meta: BinarySTMeta
  op_frontend: BinaryScalarFE
  promote_to_common_type: [self, other]

multi_margin_loss.out:
  custom_fill_params: FillMultiMarginLossParams
  guid: multi_margin_loss_fwd
  op_validator: check-node-with-shared-layer

multi_margin_loss:
  custom_fill_params: FillMultiMarginLossParams
  guid: multi_margin_loss_fwd
  op_validator: check-node-with-shared-layer
  out_ids: [0]
  output_meta: MultiMarginLossMeta

multi_margin_loss_backward:
  custom_fill_params: FillMultiMarginLossBackwardParams
  guid: multi_margin_loss_bwd
  out_ids: [1]
  op_validator: check-node-with-shared-layer
  output_meta: MultiMarginLossBackwardMeta

multi_margin_loss_backward.grad_input:
  custom_fill_params: FillMultiMarginLossBackwardParams
  guid: multi_margin_loss_bwd
  op_validator: check-node-with-shared-layer

multinomial:
  custom_fill_params: FillMultinomialParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_multinomial_pt_fwd
  out_ids: [0]
  op_frontend: GeneratorToSeed
  output_meta: MultinomialMeta
  schema_args: "(Tensor self, int num_samples, bool replacement, Tensor seed) -> Tensor"

multinomial.out:
  custom_fill_params: FillMultinomialParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_multinomial_pt_fwd
  op_frontend: GeneratorToSeedOut
  output_meta: MultinomialMeta
  schema_args: "(Tensor self, int num_samples, bool replacement, Tensor seed,  Tensor(a!) out) -> Tensor(a!)"

mv:
  output_meta: MvOpsMeta
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mv_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

mv.out:
  output_meta: MvOpsMeta
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Half, Float8_e5m2, Float8_e4m3fn]
  guid: mv_fwd
  op_validator: check-node-with-shared-layer

nan_to_num:
  dtypes: [Float, Int, BFloat16]
  op_backend: NantoNum
  out_ids: [0]

nan_to_num_:
  dtypes: [Float, Int, BFloat16]
  op_backend: NantoNum
  inplace_ids: [0]

nan_to_num.out:
  dtypes: [Float, Int, BFloat16]
  op_backend: NantoNum

nansum:
  output_meta: NanSumIntListMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Half]
  op_backend: NansumList
  out_ids: [0]

nansum.out:
  output_meta: NanSumIntListMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Byte, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Byte, Char, Short, Half]
    Gaudi3: [BFloat16, Float, Int, Byte, Char, Short, Half]
  op_backend: NansumList

_native_batch_norm_legit:
  custom_fill_params: FillBatchNormFwdParams
  output_meta: BatchNormFwdMeta
  dtypes:
    Gaudi:
      input: [BFloat16, Float]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi2:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi3:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
  op_backend: BatchNormOpBackend
  out_ids: [0, 0, 0]
  synapse_layouts:
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]

_native_batch_norm_legit_no_training:
  custom_fill_params: FillBatchNormNoTrainingFwdParams
  output_meta: BatchNormFwdMeta
  dtypes:
    Gaudi:
      input: [BFloat16, Float]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi2:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi3:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
  guid: batch_norm_inf_reshape_fwd
  op_backend: BatchNormNoTrainingOpBackend
  out_ids: [0, 0, 0]

_native_batch_norm_legit.no_stats:
  custom_fill_params: FillBatchNormNoStatsFwdParams
  output_meta: BatchNormFwdMeta
  dtypes:
    Gaudi:
      input: [BFloat16, Float]
      weight: [Float]
      bias: [Float]
    Gaudi2:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
    Gaudi3:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
  guid: _native_batch_norm_legit.no_stats
  op_backend: BatchNormNoStatsOpBackend
  out_ids: [0, 0, 0]
  synapse_layouts:
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]

_native_batch_norm_legit_functional:
  custom_fill_params: FillBatchNormFwdParams
  output_meta: BatchNormFunctionalFwdMeta
  dtypes:
    Gaudi:
      input: [BFloat16, Float]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi2:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi3:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
  guid: _native_batch_norm_legit_functional
  op_backend: BatchNormOpBackend
  out_ids: [0, 0, 0, 0, 0]
  synapse_layouts:
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]

native_batch_norm:
  custom_fill_params: FillBatchNormFwdParams
  output_meta: BatchNormFwdMeta
  dtypes:
    Gaudi:
      input: [BFloat16, Float]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi2:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
    Gaudi3:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
  op_backend: BatchNormOpBackend
  out_ids: [0, 0, 0]
  synapse_layouts:
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  lazy:
    acc_thread: true
    override_fn: batch_norm_hpu_lazy

native_batch_norm.out:
  custom_fill_params: FillBatchNormFwdParams
  output_meta: BatchNormFwdMeta
  dtypes:
    Gaudi:
      input: [BFloat16, Float]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
      out: [BFloat16, Float]
      save_mean: [Float]
      save_invstd: [Float]
    Gaudi2:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
      out: [BFloat16, Float, Half]
      save_mean: [Float]
      save_invstd: [Float]
    Gaudi3:
      input: [BFloat16, Float, Half]
      weight: [Float]
      bias: [Float]
      running_mean: [Float]
      running_var: [Float]
      out: [BFloat16, Float, Half]
      save_mean: [Float]
      save_invstd: [Float]
  op_backend: BatchNormOpBackend
  synapse_layouts:
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]

native_batch_norm_backward:
  custom_fill_params: FillBatchNormBwdParams
  output_meta: BatchNormBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: BatchNormBwdOpBackend
  out_dtypes: [input, Float, Float]
  out_ids: [0, 1, 1]
  synapse_layouts:
  - [WHCN, WHCN, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN, DONT_CARE, DONT_CARE]
  lazy:
    acc_thread: true
    override_fn: batch_norm_bwd_hpu_lazy

native_layer_norm:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: layer_norm_fwd_pt
  custom_fill_params: FillNativeLayerNormParams
  op_backend: LayerNormHabanaOperator
  output_meta: LayerNormHabanaMeta
  out_ids: [0, 0, 0]

native_layer_norm_backward:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: layer_norm_bwd_pt
  custom_fill_params: FillNativeLayerNormBwdParams
  op_backend: LayerNormBwdHabanaOperator
  output_meta: LayerNormBwdMeta
  out_ids: [0, 0, 0]

ne.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Byte, Char, Half]
  op_backend: NE
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  op_validator: CompareNeSharedMeta

ne.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Byte, Char, Half]
  scalar_ids: [1]
  op_backend: NE
  output_meta: CompareMeta
  promote_to_common_type: [self, other]
  safe_cast_check: false
  op_validator: CompareNeSharedMeta

ne_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Byte, Char, Half]
  op_backend: NE
  scalar_ids: [1]
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  op_validator: CompareNeSharedMeta

ne_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Byte, Char, Half]
  op_backend: NE
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  safe_cast_check: false
  op_validator: CompareNeSharedMeta

ne.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Byte, Char, Half]
  op_frontend: CompareScalarToTensor
  output_meta: CompareMeta
  op_backend: NE
  scalar_ids: [1]
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: CompareNeSharedMeta

ne.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Long, Int, Byte, Char]
    Gaudi2: [BFloat16, Float, Long, Int, Byte, Char, Half]
    Gaudi3: [BFloat16, Float, Long, Int, Byte, Char, Half]
  op_backend: NE
  output_meta: CompareMeta
  out_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: CompareNeSharedMeta

neg.out:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Half]
    Gaudi3: [BFloat16, Float, Int, Half]
  guid: neg_fwd
  op_validator: check-node-with-shared-layer

neg_:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Half]
    Gaudi3: [BFloat16, Float, Int, Half]
  guid: neg_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

neg:
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Half]
    Gaudi3: [BFloat16, Float, Int, Half]
  guid: neg_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

new_zeros:
  output_meta: NewZerosMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
  op_backend: NewZerosOperator
  out_ids: [0]
  op_validator: NewZerosSharedMeta

nextafter:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: nextafter
  broadcast: true
  out_ids: [0]
  op_validator: check-node-with-shared-layer

nextafter_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: nextafter
  broadcast: true
  out_ids: [0]
  op_validator: check-node-with-shared-layer

nextafter.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: nextafter
  broadcast: true
  op_validator: check-node-with-shared-layer

nll_loss_backward:
  custom_fill_params: FillNllLossBwdParams
  output_meta: NllLossBwdMeta
  dtypes:
    Gaudi:
      grad_output: [BFloat16, Float]
      self: [BFloat16, Float]
      target: [Int]
      weight: [BFloat16, Float]
      total_weight: [BFloat16, Float]
    Gaudi2:
      grad_output: [BFloat16, Float, Half]
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      total_weight: [BFloat16, Float, Half]
    Gaudi3:
      grad_output: [BFloat16, Float, Half]
      self: [BFloat16, Float, Half]
      target: [Int]
      weight: [BFloat16, Float, Half]
      total_weight: [BFloat16, Float, Half]
  guid: nll_loss_bwd
  op_backend: NllLossBwd
  out_ids: [0]

nll_loss_forward:
  custom_fill_params: FillNllLossFwdParams
  output_meta: NllLossFwdMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      target: [Int, Long]
      weight: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
  guid: cnll_loss_fwd
  out_ids: [0, 0]
  op_validator: check-node-with-shared-layer

nll_loss2d_backward:
  custom_fill_params: FillNllLossBwdParams
  output_meta: NllLossBwdMeta
  dtypes:
    Gaudi:
      grad_output: [BFloat16, Float]
      self: [BFloat16, Float]
      target: [Int, Long]
      weight: [BFloat16, Float]
      total_weight: [BFloat16, Float]
    Gaudi2:
      grad_output: [BFloat16, Float, Half]
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      total_weight: [BFloat16, Float, Half]
    Gaudi3:
      grad_output: [BFloat16, Float, Half]
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      total_weight: [BFloat16, Float, Half]
  guid: nll_loss_bwd
  op_backend: NllLoss2DBwd
  out_ids: [0]
  synapse_layouts:
  - [DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN]

nll_loss2d_forward:
  custom_fill_params: FillNllLossFwdParams
  output_meta: NllLossFwdMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      target: [Int, Long]
      weight: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
  guid: nll_loss_fwd
  op_backend: NllLoss2DFwd
  out_ids: [0, 0]
  synapse_layouts:
  - [WHCN, WHN, DONT_CARE, DONT_CARE]
  - [WHN]

nll_loss_backward.grad_input:
  custom_fill_params: FillNllLossBwdParams
  output_meta: NllLossBwdMeta
  dtypes:
    Gaudi:
      grad_output: [BFloat16, Float]
      self: [BFloat16, Float]
      target: [Int, Long]
      weight: [BFloat16, Float]
      total_weight: [BFloat16, Float]
    Gaudi2:
      grad_output: [BFloat16, Float, Half]
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      total_weight: [BFloat16, Float, Half]
    Gaudi3:
      grad_output: [BFloat16, Float, Half]
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      total_weight: [BFloat16, Float, Half]
  guid: nll_loss_bwd
  op_backend: NllLossBwd

nll_loss_forward.output:
  custom_fill_params: FillNllLossFwdParams
  output_meta: NllLossFwdMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      target: [Int, Long]
      weight: [BFloat16, Float]
      output: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      output: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      target: [Int, Long]
      weight: [BFloat16, Float, Half]
      output: [BFloat16, Float, Half]
  guid: cnll_loss_fwd
  op_validator: check-node-with-shared-layer

nll_loss2d_backward.grad_input:
  custom_fill_params: FillNllLossBwdParams
  output_meta: NllLossBwdMeta
  dtypes:
    grad_output: [BFloat16, Float]
    self: [BFloat16, Float]
    target: [Long, Int]
    weight: [BFloat16, Float]
    total_weight: [BFloat16, Float]
  guid: nll_loss_bwd
  op_backend: NllLoss2DBwd
  synapse_layouts:
  - [DONT_CARE, DONT_CARE, DONT_CARE, DONT_CARE]
  - [WHCN]

nll_loss2d_forward.output:
  custom_fill_params: FillNllLossFwdParams
  output_meta: NllLossFwdMeta
  dtypes:
    self: [BFloat16, Float]
    target: [Int, Long]
    weight: [BFloat16, Float]
    output: [BFloat16, Float]
  guid: nll_loss_fwd
  op_backend: NllLoss2DFwd
  synapse_layouts:
  - [WHCN, WHN, DONT_CARE, DONT_CARE]
  - [WHN]

normal_:
  custom_fill_params: FillNormalParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: random_normal_fwd
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: RandomSeedTensorInput
  schema_args: "(Tensor(a!) self, float mean=0, float std=1, *, Tensor seed) -> Tensor(a!)"

normal.float_float:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: normal_float_float
  out_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: NormalBE
  schema_args: "(float mean, float std, SymInt[] size, Tensor seed, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor"

normal.Tensor_float:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: NormalBE
  schema_args: "(Tensor mean, float stddev, *, Tensor seed) -> Tensor"

normal.Tensor_float_out:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: GeneratorToSeedOut
  op_backend: NormalBE
  schema_args: "(Tensor mean, float std, *, Tensor seed, Tensor(a!) out) -> Tensor(a!)"

normal.float_Tensor:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: NormalBE
  schema_args: "(float mean, Tensor stddev, *, Tensor seed) -> Tensor"

normal.float_Tensor_out:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: GeneratorToSeedOut
  op_backend: NormalBE
  schema_args: "(float mean, Tensor std, *, Tensor seed, Tensor(a!) out) -> Tensor(a!)"

normal.Tensor_Tensor:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: NormalBE
  schema_args: "(Tensor mean, Tensor stddev, *, Tensor seed) -> Tensor"

normal.Tensor_Tensor_out:
  output_meta: NormalMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: GeneratorToSeedOut
  op_backend: NormalBE
  schema_args: "(Tensor mean, Tensor std, *, Tensor seed, Tensor(a!) out) -> Tensor(a!)"

norm.out:
  output_meta: NormOpMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: NormOpWithDtype

norm.dtype_out:
  output_meta: NormOpMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: NormOpWithDtype

norm.Scalar:
  output_meta: NormMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: NormOpScalar
  out_ids: [0]

norm.ScalarOpt_dim_dtype:
  output_meta: NormOpMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: NormOpWithDtype
  out_ids: [0]

norm.ScalarOpt_dim:
  output_meta: NormOpMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: NormOpWithDtype
  out_ids: [0]

norm.ScalarOpt_dtype:
  output_meta: NormMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: NormOpScalarWithDtype
  out_ids: [0]

_weight_norm_interface:
  output_meta: WeightNormMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_backend: WeightNormOp
  out_ids: [0, 0]

_weight_norm_interface_backward:
  output_meta: WeightNormBwdMeta
  custom_fill_params: FillWeightNormBwdParams
  guid: weight_norm_bwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0, 0]

one_hot:
  output_meta: OneHotMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Half, Long]
  op_backend: OneHot
  out_ids: [0]

permute:
  override_fn: permute_hpu_lazy
  acc_thread: true
  no_compute_flag: true

poisson:
  custom_fill_params: FillPoissonParams
  dtypes: [BFloat16, Float]
  guid: random_poisson_fwd
  out_ids: [0]
  op_frontend: GeneratorToSeed
  schema_args: "(Tensor self, Tensor seed) -> Tensor"

pow_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: pow_fwd
  inplace_ids: [0]
  op_backend: PowOp
  scalar_ids: [1]
  promote_to_common_type: [self, exponent]

pow_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: pow_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, exponent]
  op_validator: check-node-with-shared-layer

pow.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: PowScalar
  guid: pow_fwd
  out_ids: [1]
  scalar_ids: [0]
  promote_to_common_type: [self, exponent]

pow.Scalar_out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: pow_fwd
  scalar_ids: [0]
  promote_to_common_type: [self, exponent]
  op_validator: check-node-with-shared-layer

pow.Tensor_Scalar:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Short, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Short, Char, Byte, Half]
  guid: pow_fwd
  out_ids: [0]
  op_backend: PowOp
  scalar_ids: [1]
  promote_to_common_type: [self, exponent]

pow.Tensor_Scalar_out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Short, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Short, Char, Byte, Half]
  guid: pow_fwd
  op_backend: PowOp
  scalar_ids: [1]
  promote_to_common_type: [self, exponent]

pow.Tensor_Tensor:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Short, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Short, Char, Byte, Half]
  guid: pow_fwd
  out_ids: [0]
  promote_to_common_type: [self, exponent]
  op_validator: check-node-with-shared-layer

pow.Tensor_Tensor_out:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Short, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Short, Char, Byte, Half]
  guid: pow_fwd
  promote_to_common_type: [self, exponent]
  op_validator: check-node-with-shared-layer

_prelu_kernel:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  output_meta: PreluFwdMeta
  guid: prelu_fwd

_prelu_kernel_backward:
  out_ids: [1, 2]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: prelu_bwd
  output_meta: PreluBwdMeta
  op_validator: check-node-with-shared-layer

prod:
  output_meta: ReductionOpMeta
  dtypes:
    Gaudi: [BFloat16, Float, Char, Byte, Short, Int]
    Gaudi2: [BFloat16, Float, Char, Byte, Short, Int, Half, Long]
    Gaudi3: [BFloat16, Float, Char, Byte, Short, Int, Half, Long]
  guid: reduce_prod_multi_dim_fwd
  out_ids: [0]
  op_backend: ReductionOp
  promote_to_common_type: [self]

prod.dim_int:
  output_meta: ReductionOpListMeta
  dtypes:
    Gaudi: [BFloat16, Float, Char, Byte, Short, Int]
    Gaudi2: [BFloat16, Float, Char, Byte, Short, Int, Half, Long]
    Gaudi3: [BFloat16, Float, Char, Byte, Short, Int, Half, Long]
  guid: reduce_prod_multi_dim_fwd
  out_ids: [0]
  op_backend: ReductionOpList
  promote_to_common_type: [self]

prod.int_out:
  output_meta: ReductionOpListMeta
  dtypes:
    Gaudi: [BFloat16, Float, Char, Byte, Short, Int]
    Gaudi2: [BFloat16, Float, Char, Byte, Short, Int, Half, Long]
    Gaudi3: [BFloat16, Float, Char, Byte, Short, Int, Half, Long]
  guid: reduce_prod_multi_dim_fwd
  op_backend: ReductionOpList
  promote_to_common_type: [self]
  safe_cast_check: false

put_:
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int]
      source: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      source: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      source: [BFloat16, Float, Half]
  inplace_ids: [0]
  custom_fill_params: FillPutParams
  guid: put_fwd
  op_validator: check-node-with-shared-layer

put:
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int]
      source: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      source: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      source: [BFloat16, Float, Half]
  out_ids: [0]
  custom_fill_params: FillPutParams
  guid: put_fwd
  op_validator: check-node-with-shared-layer

random_:
  custom_fill_params: FillRandomParams
  dtypes:
    Gaudi: [Byte, Char, Short, BFloat16, Float, Int]
    Gaudi2: [Byte, Char, Short, BFloat16, Half, Float, Int, Long]
    Gaudi3: [Byte, Char, Short, BFloat16, Half, Float, Int, Long]
  guid: random_uniform_fwd
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: RandomSeedTensorInputIntegers
  schema_args: "(Tensor(a!) self, Tensor seed) -> Tensor(a!)"

random_.from:
  custom_fill_params: FillRandomFromParams
  dtypes:
    Gaudi: [Byte, Char, Short, BFloat16, Float, Int]
    Gaudi2: [Byte, Char, Short, BFloat16, Half, Float, Int, Long]
    Gaudi3: [Byte, Char, Short, BFloat16, Half, Float, Int, Long]
  guid: random_uniform_fwd
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: RandomSeedTensorInputIntegers
  schema_args: "(Tensor(a!) self, int from, int? to, Tensor seed) -> Tensor(a!)"

random_.to:
  custom_fill_params: FillRandomToParams
  dtypes:
    Gaudi: [Byte, Char, Short, BFloat16, Float, Int]
    Gaudi2: [Byte, Char, Short, BFloat16, Half, Float, Int, Long]
    Gaudi3: [Byte, Char, Short, BFloat16, Half, Float, Int, Long]
  guid: random_uniform_fwd
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: RandomSeedTensorInputIntegers
  schema_args: "(Tensor(a!) self, int to, Tensor seed) -> Tensor(a!)"

randperm:
  output_meta: RandPermMeta
  dtypes:
    Gaudi: [Int, Long]
    Gaudi2: [Int, Long, Half]
    Gaudi3: [Int, Long, Half]
  guid: randperm
  op_backend: RandPermOp
  out_ids: [0]
  lazy:
    override_fn: randperm_nogen_hpu_lazy
    acc_thread: true
  schema_args: "(Tensor seed, Tensor h2d_tensor, Tensor shape_tensor, *, ScalarType? dtype, Layout? layout, Device? device, bool? pin_memory) -> Tensor"

randperm.generator:
  output_meta: RandPermMeta
  dtypes:
    Gaudi: [Int, Long]
    Gaudi2: [Int, Long, Half]
    Gaudi3: [Int, Long, Half]
  guid: randperm
  op_frontend: GeneratorToSeed
  op_backend: RandPermOp
  out_ids: [0]
  schema_args: "(SymInt n, Tensor seed, ScalarType? dtype, Layout? layout, Device? device, bool? pin_memory) -> Tensor"

randperm.generator_out:
  output_meta: RandPermMeta
  dtypes:
    Gaudi: [Int, Long]
    Gaudi2: [Int, Long, Half]
    Gaudi3: [Int, Long, Half]
  guid: randperm
  op_frontend: GeneratorToSeedOut
  op_backend: RandPermOp
  lazy:
    override_fn: randperm_hpu_lazy
    acc_thread: true
  schema_args: "(SymInt n, Tensor seed, Tensor(a!) out) -> Tensor(a!)"

reciprocal:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reciprocal_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

reciprocal_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reciprocal_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

reciprocal.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Half, Float8_e5m2, Float8_e4m3fn]
  guid: reciprocal_fwd
  op_validator: check-node-with-shared-layer

relu:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: relu_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

relu_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: relu_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

relu.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: relu_fwd
  op_validator: check-node-with-shared-layer

reflection_pad1d:
  output_meta: ReflectionPad1DMeta
  custom_fill_params: FillReflectionPadForwardParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short]
    Gaudi2: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

reflection_pad1d.out:
  output_meta: ReflectionPad1DMeta
  custom_fill_params: FillReflectionPadForwardParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short]
    Gaudi2: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  op_validator: check-node-with-shared-layer

reflection_pad1d_backward:
  output_meta: ReflectionPadBackwardMeta
  custom_fill_params: FillReflectionPadBackwardParams
  op_backend: ReflectionPadBwd
  dtypes: [BFloat16, Float, Int, Short]
  guid: pad_bwd
  out_ids: [0]

reflection_pad1d_backward.grad_input:
  output_meta: ReflectionPadBackwardMeta
  custom_fill_params: FillReflectionPadBackwardParams
  op_backend: ReflectionPadBwd
  dtypes: [BFloat16, Float, Int, Short]
  guid: pad_bwd

reflection_pad2d:
  output_meta: ReflectionPad2DMeta
  custom_fill_params: FillReflectionPadForwardParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short]
    Gaudi2: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

reflection_pad2d.out:
  output_meta: ReflectionPad2DMeta
  custom_fill_params: FillReflectionPadForwardParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short]
    Gaudi2: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  op_validator: check-node-with-shared-layer

reflection_pad2d_backward:
  output_meta: ReflectionPadBackwardMeta
  custom_fill_params: FillReflectionPadBackwardParams
  op_backend: ReflectionPadBwd
  dtypes: [BFloat16, Float, Int, Short]
  guid: pad_bwd
  out_ids: [0]

reflection_pad2d_backward.grad_input:
  output_meta: ReflectionPadBackwardMeta
  custom_fill_params: FillReflectionPadBackwardParams
  op_backend: ReflectionPadBwd
  dtypes: [BFloat16, Float, Int, Short]
  guid: pad_bwd

reflection_pad3d:
  output_meta: ReflectionPad3DMeta
  custom_fill_params: FillReflectionPadForwardParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short]
    Gaudi2: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

reflection_pad3d.out:
  output_meta: ReflectionPad3DMeta
  custom_fill_params: FillReflectionPadForwardParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Short]
    Gaudi2: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Short, Float8_e5m2, Float8_e4m3fn]
  guid: pad_fwd
  op_validator: check-node-with-shared-layer

reflection_pad3d_backward:
  output_meta: ReflectionPadBackwardMeta
  custom_fill_params: FillReflectionPadBackwardParams
  op_backend: ReflectionPadBwd
  dtypes: [BFloat16, Float, Int, Short]
  guid: pad_bwd
  out_ids: [0]

reflection_pad3d_backward.grad_input:
  output_meta: ReflectionPadBackwardMeta
  custom_fill_params: FillReflectionPadBackwardParams
  op_backend: ReflectionPadBwd
  dtypes: [BFloat16, Float, Int, Short]
  guid: pad_bwd

remainder.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Short]
    Gaudi3: [BFloat16, Float, Int, Char, Short]
  guid: rem_fwd
  out_ids: [0]
  promote_to_common_type: [self, other]
  broadcast: true
  op_validator: check-node-with-shared-layer

remainder.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Short]
    Gaudi3: [BFloat16, Float, Int, Char, Short]
  guid: rem_fwd
  out_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

remainder_.Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Short]
    Gaudi3: [BFloat16, Float, Int, Char, Short]
  guid: rem_fwd
  inplace_ids: [0]
  promote_to_common_type: [self, other]
  broadcast: true
  op_validator: check-node-with-shared-layer

remainder_.Scalar:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Short]
    Gaudi3: [BFloat16, Float, Int, Char, Short]
  guid: rem_fwd
  inplace_ids: [0]
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

remainder.Scalar_Tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Long, Char, Short]
    Gaudi3: [BFloat16, Float, Int, Long, Char, Short]
  guid: rem_fwd
  out_ids: [1]
  scalar_ids: [0]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

remainder.Tensor_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Short, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Short, Long]
  guid: rem_fwd
  promote_to_common_type: [self, other]
  broadcast: true
  op_validator: check-node-with-shared-layer

remainder.Scalar_out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Short]
    Gaudi3: [BFloat16, Float, Int, Char, Short]
  guid: rem_fwd
  scalar_ids: [1]
  promote_to_common_type: [self, other]
  op_validator: check-node-with-shared-layer

repeat:
  output_meta: RepeatMeta
  guid: tile_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char]
    Gaudi2: [BFloat16, Float, Int, Long, Half, Char, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Long, Half, Char, Float8_e5m2, Float8_e4m3fn]
  op_backend: RepeatOp
  lazy:
    override_fn: repeat_hpu
  acc_thread: true
  out_ids: [0]

replication_pad1d:
  output_meta: ReplicationPad1DMeta
  custom_fill_params: FillReplicationPad1dFwdParams
  guid: pad_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

replication_pad1d.out:
  output_meta: ReplicationPad1DMeta
  custom_fill_params: FillReplicationPad1dFwdParams
  guid: pad_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  op_validator: check-node-with-shared-layer

replication_pad2d:
  output_meta: ReplicationPad2DMeta
  custom_fill_params: FillReplicationPad2dFwdParams
  guid: pad_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

replication_pad2d.out:
  output_meta: ReplicationPad2DMeta
  custom_fill_params: FillReplicationPad2dFwdParams
  guid: pad_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  op_validator: check-node-with-shared-layer

replication_pad3d:
  output_meta: ReplicationPad3DMeta
  custom_fill_params: FillReplicationPad3dFwdParams
  guid: pad_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  out_ids: [0]
  hw_scaling_ids: [0]
  op_validator: check-node-with-shared-layer

replication_pad3d.out:
  output_meta: ReplicationPad3DMeta
  custom_fill_params: FillReplicationPad3dFwdParams
  guid: pad_fwd
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  op_validator: check-node-with-shared-layer

replication_pad1d_backward:
  output_meta: ReplicationPadBwdMeta
  custom_fill_params: FillReplicationPad1dBwdParams
  dtypes: [BFloat16, Float, Int]
  out_ids: [0]
  op_backend: ReplicationPad1dBwdOp

replication_pad1d_backward.grad_input:
  output_meta: ReplicationPadBwdMeta
  custom_fill_params: FillReplicationPad1dBwdParams
  dtypes: [BFloat16, Float, Int]
  op_backend: ReplicationPad1dBwdOp

replication_pad2d_backward:
  output_meta: ReplicationPadBwdMeta
  custom_fill_params: FillReplicationPad2dBwdParams
  dtypes: [BFloat16, Float, Int]
  out_ids: [0]
  op_backend: ReplicationPad2dBwdOp

replication_pad2d_backward.grad_input:
  output_meta: ReplicationPadBwdMeta
  custom_fill_params: FillReplicationPad2dBwdParams
  dtypes: [BFloat16, Float, Int]
  op_backend: ReplicationPad2dBwdOp

replication_pad3d_backward:
  output_meta: ReplicationPadBwdMeta
  custom_fill_params: FillReplicationPad3dBwdParams
  dtypes: [BFloat16, Float, Int]
  out_ids: [0]
  op_backend: ReplicationPad3dBwdOp

replication_pad3d_backward.grad_input:
  output_meta: ReplicationPadBwdMeta
  custom_fill_params: FillReplicationPad3dBwdParams
  dtypes: [BFloat16, Float, Int]
  op_backend: ReplicationPad3dBwdOp

resize_:
  output_meta: ResizeOutputMeta
  guid: memcpy
  inplace_ids: [0]
  op_backend: ResizeOpBackend

_resize_output_:
  output_meta: ResizeOutputMeta
  guid: memcpy
  inplace_ids: [0]
  op_backend: ResizeOutputOpBackend

roll:
  dtypes:
    Gaudi: [BFloat16, Byte, Float, Int, Char, Short]
    Gaudi2: [BFloat16, Byte, Float, Int, Char, Short, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Byte, Float, Int, Char, Short, Float8_e5m2, Float8_e4m3fn]
  out_ids: [0]
  op_backend: RollHabanaOperator
  custom_fill_params: FillRollParams
  guid: roll

round:
  custom_fill_params: FillRoundParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: round_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

round_:
  custom_fill_params: FillRoundParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: round_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

round.out:
  custom_fill_params: FillRoundParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: round_fwd
  op_validator: check-node-with-shared-layer

round.decimals:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: round_fwd
  custom_fill_params: FillRoundDecimalParams
  out_ids: [0]
  op_validator: check-node-with-shared-layer

round_.decimals:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: round_fwd
  custom_fill_params: FillRoundDecimalParams
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

round.decimals_out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: round_fwd
  custom_fill_params: FillRoundDecimalParams
  op_validator: check-node-with-shared-layer

rrelu_with_noise:
  dtypes: [BFloat16, Float]
  op_frontend: GeneratorToSeed
  op_backend: Rrelu_with_noise
  out_ids: [0]
  schema_args: "(Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, Tensor seed) -> Tensor"

rrelu_with_noise_:
  dtypes: [BFloat16, Float]
  op_frontend: GeneratorToSeed
  op_backend: Rrelu_with_noise
  inplace_ids: [0]
  schema_args: "(Tensor(a!) self, Tensor noise, Scalar lower, Scalar upper, bool training, Tensor seed) -> Tensor(a!)"

rrelu_with_noise.out:
  dtypes: [BFloat16, Float]
  op_frontend: GeneratorToSeedOut
  op_backend: Rrelu_with_noise
  schema_args: "(Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, Tensor seed, Tensor(a!) out) -> Tensor(a!)"

rrelu_with_noise_backward:
  dtypes: [BFloat16, Float]
  op_backend: Rrelu_with_noise_bwd
  out_ids: [0]

rsqrt:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: rsqrt_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

rsqrt_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: rsqrt_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

rsqrt.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: rsqrt_fwd
  op_validator: check-node-with-shared-layer

rsub.Tensor:
  broadcast: true
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, other]
  guid: binary_with_alpha_fwd
  custom_fill_params: FillBinaryRSubParams
  out_ids: [0]
  scalar_ids: [2]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha

rsub.Scalar:
  custom_fill_params: FillBinaryRSubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int, Long]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  promote_to_common_type: [self, other]
  guid: binary_with_alpha_fwd
  out_ids: [0]
  scalar_ids: [1, 2]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha

scalar_tensor:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
  guid: scalar_tensor_fwd
  output_meta: ScalarTensorMeta
  op_backend: ScalarTensor
  out_ids: [0]

scatter.src:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      src: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      src: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      src: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Int, Long]
  op_backend: ScatterOperator
  out_ids: [0]

scatter_.src:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      src: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Float8_e5m2, Float8_e4m3fn]
      src: [BFloat16, Float, Int, Short, Byte, Char, Half, Float8_e5m2, Float8_e4m3fn]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Float8_e5m2, Float8_e4m3fn]
      src: [BFloat16, Float, Int, Short, Byte, Char, Half, Float8_e5m2, Float8_e4m3fn]
      index: [Int, Long]
  op_backend: ScatterOperator
  inplace_ids: [0]

scatter.src_out:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      src: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Long, Int]
      out: [BFloat16, Float, Int, Short, Byte, Char]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      src: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Long, Int]
      out: [BFloat16, Float, Int, Short, Byte, Char, Half]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half]
      src: [BFloat16, Float, Int, Short, Byte, Char, Half]
      index: [Long, Int]
      out: [BFloat16, Float, Int, Short, Byte, Char, Half]
  op_backend: ScatterOperator

scatter.value:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
      index: [Int, Long]
  op_backend: ScatterOperator
  out_ids: [0]

scatter_.value:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int, Long]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
      index: [Int, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
      index: [Int, Long]
  op_backend: ScatterOperator
  inplace_ids: [0]

scatter.value_out:
  dtypes:
    Gaudi:
      self: [BFloat16, Float, Int, Short, Byte, Char]
      index: [Int, Long]
      out: [BFloat16, Float, Int, Short, Byte, Char]
    Gaudi2:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
      index: [Int, Long]
      out: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
    Gaudi3:
      self: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
      index: [Int, Long]
      out: [BFloat16, Float, Int, Short, Byte, Char, Half, Long]
  op_backend: ScatterOperator

scatter.reduce:
  custom_fill_params: ScatterReduceParams
  output_meta: ScatterReduceMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

scatter.reduce_out:
  custom_fill_params: ScatterReduceParams
  output_meta: ScatterReduceMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  op_validator: check-node-with-shared-layer

scatter.value_reduce:
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  op_backend: ScatterWithReduceOperator
  out_ids: [0]

scatter.value_reduce_out:
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  op_backend: ScatterWithReduceOperator

scatter_add:
  custom_fill_params: ScatterAddParams
  output_meta: ScatterAddMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: complex_scatter_add
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

scatter_add.out:
  custom_fill_params: ScatterAddParams
  output_meta: ScatterAddMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: complex_scatter_add
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

scatter_reduce.two:
  custom_fill_params: ScatterReduceParams
  output_meta: ScatterReduceMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

scatter_reduce_.two:
  custom_fill_params: ScatterReduceParams
  output_meta: ScatterReduceMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

scatter_reduce.two_out:
  custom_fill_params: ScatterReduceParams
  output_meta: ScatterReduceMeta
  dtypes:
    Gaudi:
      self: [BFloat16, Float]
      index: [Int, Long]
      src: [BFloat16, Float]
    Gaudi2:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
    Gaudi3:
      self: [BFloat16, Float, Half]
      index: [Int, Long]
      src: [BFloat16, Float, Half]
  guid: scatter_reduce_fwd
  op_validator: check-node-with-shared-layer

searchsorted.Tensor:
  custom_fill_params: FillSearchSortedParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Half]
  guid: search_sorted_fwd
  output_meta: SearchSortedMeta
  promote_to_common_type: [sorted_sequence, self]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

searchsorted.Tensor_out:
  custom_fill_params: FillSearchSortedParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Half]
  guid: search_sorted_fwd
  output_meta: SearchSortedMeta
  promote_to_common_type: [sorted_sequence, self]
  safe_cast_check: false
  op_validator: check-node-with-shared-layer

searchsorted.Scalar:
  custom_fill_params: FillSearchSortedParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Half]
  guid: search_sorted_fwd
  output_meta: SearchSortedMeta
  promote_to_common_type: [sorted_sequence, self]
  out_ids: [0]
  scalar_ids: [1]

searchsorted.Scalar_out:
  custom_fill_params: FillSearchSortedParams
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long, Half]
    Gaudi3: [BFloat16, Float, Int, Long, Half]
  guid: search_sorted_fwd
  output_meta: SearchSortedMeta
  promote_to_common_type: [sorted_sequence, self]
  safe_cast_check: false
  scalar_ids: [1]
  op_validator: check-node-with-shared-layer

select.int:
  output_meta: SelectHpuMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long, Float8_e5m2, Float8_e4m3fn]
  override_fn: select_hpu_lazy
  acc_thread: true
  guid: select
  out_ids: [0]

select_backward:
  output_meta: SelectBackwardMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int]
    Gaudi3: [BFloat16, Float, Int]
  op_backend: SelectBackward
  out_ids: [0]

sgn.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sign_fwd
  op_validator: check-node-with-shared-layer

sgn:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sign_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sgn_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sign_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

sigmoid.out:
  custom_fill_params: FillSigmoidParams
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sigmoid_fwd
  op_validator: check-node-with-shared-layer

sigmoid:
  custom_fill_params: FillSigmoidParams
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sigmoid_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sigmoid_:
  custom_fill_params: FillSigmoidParams
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sigmoid_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

sigmoid_backward:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sigmoid_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sigmoid_backward.grad_input:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sigmoid_bwd
  op_validator: check-node-with-shared-layer

sign.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sign_fwd
  op_validator: check-node-with-shared-layer

sign:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sign_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sign_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sign_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

signbit:
  output_meta: SignbitMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half]
  guid: signbit_fwd
  out_dtypes: [Bool]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

signbit.out:
  output_meta: SignbitMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Half]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Half]
  guid: signbit_fwd
  op_validator: check-node-with-shared-layer

silu:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: silu_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

silu_:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: silu_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

silu.out:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: silu_fwd
  op_validator: check-node-with-shared-layer

silu_backward.grad_input:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  guid: silu_bwd
  op_validator: check-node-with-shared-layer

sin:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sin_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sin.out:
  promote_int_to_float: [self]
  safe_cast_check: false
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sin_fwd
  op_validator: check-node-with-shared-layer

sin_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sin_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

sinc:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: sinc_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sinc.out:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: sinc_fwd
  op_validator: check-node-with-shared-layer

sinc_:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: sinc_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

sinh.out:
  promote_int_to_float: [self]
  safe_cast_check: false
  dtypes: [Float]
  guid: sinh_fwd
  op_validator: check-node-with-shared-layer

sinh:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: sinh_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sinh_:
  dtypes: [Float]
  guid: sinh_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

smooth_l1_loss:
  output_meta: SmoothL1LossMeta
  dtypes: [BFloat16, Float]
  guid: smooth_l1_loss_fwd
  custom_fill_params: FillSmoothL1LossFwdParams
  out_ids: [0]
  op_validator: check-node-with-shared-layer

smooth_l1_loss.out:
  output_meta: SmoothL1LossMeta
  dtypes: [BFloat16, Float]
  guid: smooth_l1_loss_fwd
  custom_fill_params: FillSmoothL1LossFwdParams
  op_validator: check-node-with-shared-layer

smooth_l1_loss_backward:
  output_meta: SmoothL1LossBackwardMeta
  dtypes: [BFloat16, Float]
  op_backend: SmoothL1LossBwdOperator
  out_ids: [0]

smooth_l1_loss_backward.grad_input:
  output_meta: SmoothL1LossBackwardMeta
  dtypes: [BFloat16, Float]
  op_backend: SmoothL1LossBwdOperator

_softmax:
  custom_fill_params: FillSoftmaxForwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: softmax_fwd
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-196893

_softmax.out:
  custom_fill_params: FillSoftmaxForwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: softmax_fwd
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-196893

_softmax_backward_data:
  custom_fill_params: FillSoftmaxBackwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: softmax_bwd
  op_backend: SoftmaxBackward
  out_ids: [0]

_softmax_backward_data.out:
  custom_fill_params: FillSoftmaxBackwardParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: softmax_bwd
  op_backend: SoftmaxBackward

softshrink:
  custom_fill_params: FillsoftshrinkfwdParams
  dtypes: [Float, BFloat16]
  guid: shrink_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

softshrink.out:
  custom_fill_params: FillsoftshrinkfwdParams
  dtypes: [Float, BFloat16]
  guid: shrink_fwd
  op_validator: check-node-with-shared-layer

softshrink_backward:
  custom_fill_params: FillsoftshrinkbwdParams
  dtypes: [Float, BFloat16]
  guid: shrink_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

softshrink_backward.grad_input:
  custom_fill_params: FillsoftshrinkbwdParams
  dtypes: [Float, BFloat16]
  guid: shrink_bwd
  op_validator: check-node-with-shared-layer

softplus:
  custom_fill_params: FillSoftplusParamsFwd
  dtypes: [BFloat16, Float]
  guid: softplus_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

softplus.out:
  custom_fill_params: FillSoftplusParamsFwd
  dtypes: [BFloat16, Float]
  guid: softplus_fwd
  op_validator: check-node-with-shared-layer

softplus_backward:
  custom_fill_params: FillSoftplusParamsBwd
  dtypes: [BFloat16, Float]
  guid: softplus_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

softplus_backward.grad_input:
  custom_fill_params: FillSoftplusParamsBwd
  dtypes: [BFloat16, Float]
  guid: softplus_bwd
  op_validator: check-node-with-shared-layer

special_erfcx:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: erfcx_fwd
  out_ids: [0]

special_erfcx.out:
  promote_int_to_float: [self]
  dtypes: [BFloat16, Float]
  guid: erfcx_fwd

special_xlog1py:
  output_meta: XlogYMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  op_backend: Xlog1PyOperator
  out_ids: [0]

special_xlog1py.other_scalar:
  output_meta: XlogYMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  op_frontend: LazyXlogY
  op_backend: Xlog1PyOperator
  out_ids: [0]

special_xlog1py.other_scalar_out:
  output_meta: XlogYMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long]
    Gaudi3: [BFloat16, Float, Int, Long]
  op_frontend: LazyXlogY
  op_backend: Xlog1PyOperator

special_xlog1py.out:
  output_meta: XlogYMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long]
    Gaudi3: [BFloat16, Float, Int, Long]
  op_backend: Xlog1PyOperator

special_xlog1py.self_scalar:
  output_meta: XlogYMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float]
    Gaudi3: [BFloat16, Float]
  op_frontend: LazyXlogY
  op_backend: Xlog1PyOperator
  out_ids: [1]

special_xlog1py.self_scalar_out:
  output_meta: XlogYMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Long]
    Gaudi2: [BFloat16, Float, Int, Long]
    Gaudi3: [BFloat16, Float, Int, Long]
  op_frontend: LazyXlogY
  op_backend: Xlog1PyOperator

special_entr:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: entr_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

special_entr.out:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: entr_fwd
  op_validator: check-node-with-shared-layer

sqrt:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sqrt_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

sqrt.out:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sqrt_fwd
  op_validator: check-node-with-shared-layer

sqrt_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: sqrt_fwd
  op_validator: check-node-with-shared-layer
  inplace_ids: [0]

squeeze:
  override_fn: squeeze_self_hpu_lazy
  acc_thread: true

squeeze.dim:
  override_fn: squeeze_dim_hpu_lazy
  acc_thread: true

squeeze.dims:
  output_meta: SqueezeDimsMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Float8_e5m2, Float8_e4m3fn]
  guid: squeeze
  op_backend: SqueezeDims
  out_ids: [0]
  hw_scaling_ids: [0]
  lazy:
    acc_thread: true
    override_fn: squeeze_dims_hpu_lazy

squeeze_:
  override_fn: squeeze_hpu_lazy_
  acc_thread: true

squeeze_.dim:
  override_fn: squeeze_dim_hpu_lazy_
  acc_thread: true

std.correction:
  output_meta: StdVarMeta
  dtypes: [BFloat16, Float]
  op_backend: Std
  out_ids: [0]

std.correction_out:
  output_meta: StdVarMeta
  dtypes: [BFloat16, Float]
  op_backend: Std

std_mean.correction:
  output_meta: StdVarMeanMeta
  dtypes: [BFloat16, Float]
  op_backend: StdMean
  out_ids: [0, 0]

sub.Tensor:
  broadcast: true
  custom_fill_params: FillBinarySubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  out_ids: [0]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  scalar_ids: [2]
  promote_to_common_type: [self, other]

sub.Scalar:
  broadcast: true
  custom_fill_params: FillBinarySubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  scalar_ids: [1, 2]
  out_ids: [0]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  promote_to_common_type: [self, other]

sub_.Tensor:
  custom_output_shape: BinaryOutputShapeInplace
  custom_fill_params: FillBinarySubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  inplace_ids: [0]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  scalar_ids: [2]
  promote_to_common_type: [self, other]

sub_.Scalar:
  custom_output_shape: BinaryOutputShapeInplace
  custom_fill_params: FillBinarySubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  scalar_ids: [1, 2]
  inplace_ids: [0]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  promote_to_common_type: [self, other]

sub.Scalar_out:
  broadcast: true
  custom_fill_params: FillBinarySubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  scalar_ids: [1, 2]
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  promote_to_common_type: [self, other]

sub.out:
  broadcast: true
  custom_fill_params: FillBinarySubParams
  dtypes:
    Gaudi: [BFloat16, Float, Short, Int]
    Gaudi2: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Short, Int, Long, Half, Float8_e5m2, Float8_e4m3fn]
  guid: binary_with_alpha_fwd
  st_meta: BinarySTMeta
  op_backend: BinaryWithAlpha
  promote_to_common_type: [self, other]

sum:
  output_meta: ReductionOpMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char]
    Gaudi2: [BFloat16, Float, Int, Char, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Char, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: ReductionOp
  promote_to_common_type: [self]
  guid: reduce_sum_multi_dim_fwd
  out_ids: [0]

sum.dim_IntList:
  output_meta: ReductionOpListMeta
  dtypes:
    Gaudi: [BFloat16, Float, Char, Int]
    Gaudi2: [BFloat16, Float, Int, Char, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Char, Half, Long, Float8_e5m2, Float8_e4m3fn]
  op_backend: ReductionOpList
  promote_to_common_type: [self]
  guid: reduce_sum_multi_dim_fwd
  out_ids: [0]

sum.IntList_out:
  output_meta: ReductionOpListMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Long]
    Gaudi2: [BFloat16, Float, Int, Char, Long, Half, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Char, Long, Half, Float8_e5m2, Float8_e4m3fn]
  op_backend: ReductionOpList
  promote_to_common_type: [self]
  guid: reduce_sum_multi_dim_fwd

t:
  override_fn: t_hpu_lazy
  acc_thread: true

take:
  output_meta: TakeMeta
  dtypes:
    self: [BFloat16, Float, Int]
    index: [Int, Long]
  guid: take_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

take.out:
  output_meta: TakeMeta
  dtypes:
    self: [BFloat16, Float, Int]
    index: [Int, Long]
  guid: take_fwd
  op_validator: check-node-with-shared-layer

tan.out:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: tan_fwd
  op_validator: check-node-with-shared-layer

tan:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: tan_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

tan_:
  promote_int_to_float: [self]
  dtypes: [Float]
  guid: tan_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

tanh:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: tanh_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

tanh.out:
  promote_int_to_float: [self]
  safe_cast_check: false
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: tanh_fwd
  op_validator: check-node-with-shared-layer

tanh_:
  promote_int_to_float: [self]
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: tanh_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

tanh_backward.grad_input:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: tanh_bwd
  op_validator: check-node-with-shared-layer

tanh_backward:
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: tanh_bwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

threshold:
  custom_fill_params: FillThresholdParams
  dtypes: [BFloat16, Float]
  guid: threshold_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

threshold_:
  custom_fill_params: FillThresholdParams
  dtypes: [BFloat16, Float]
  guid: threshold_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

threshold.out:
  custom_fill_params: FillThresholdParams
  dtypes: [BFloat16, Float]
  guid: threshold_fwd
  op_validator: check-node-with-shared-layer

threshold_backward:
  output_meta: ThresholdBwdMeta
  custom_fill_params: FillThresholdBwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: relu_bwd
  op_backend: ThresholdBackward
  out_ids: [0]

threshold_backward.grad_input:
  output_meta: ThresholdBwdMeta
  custom_fill_params: FillThresholdBwdParams
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: relu_bwd
  op_validator: check-node-with-shared-layer

topk:
  dtypes:
    Gaudi: [Float, Int, BFloat16, Short]
    Gaudi2: [Float, Int, BFloat16, Short, Half]
    Gaudi3: [Float, Int, BFloat16, Short, Half]
  output_meta: TopkMeta
  op_backend: Topk
  op_frontend: LazyTopk
  out_ids: [0, 0]
  schema_args: "(Tensor self, Tensor k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)"

topk.values:
  dtypes:
    Gaudi: [Float, Int, BFloat16, Short]
    Gaudi2: [Float, Int, Long, BFloat16, Short, Half]
    Gaudi3: [Float, Int, Long, BFloat16, Short, Half]
  output_meta: TopkMeta
  op_frontend: TopKFE
  op_backend: Topk
  schema_args: "(Tensor self, Tensor k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)"

sort.values_stable:
  dtypes:
    Gaudi: [Float, Int, BFloat16, Short]
    Gaudi2: [Float, Int, Long, BFloat16, Short, Half]
    Gaudi3: [Float, Int, Long, BFloat16, Short, Half]
  custom_output_shape: SortOutputShape
  output_meta: SortStableMeta
  fallback_check: [SortStableFallbackCheck, self, stable, dim, descending]
  op_backend: SortStable

sort.stable:
  dtypes:
    Gaudi: [Float, Int, BFloat16, Short]
    Gaudi2: [Float, Int, Long, BFloat16, Short, Half]
    Gaudi3: [Float, Int, Long, BFloat16, Short, Half]
  fallback_check: [SortStableFallbackCheck, self, stable, dim, descending]
  op_backend: SortStable
  custom_output_shape: SortOutputShape
  output_meta: SortStableMeta
  out_ids: [0, 0]

trace:
  dtypes: [BFloat16, Float, Int]
  output_meta: TraceMeta
  guid: trace_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

transpose.int:
  override_fn: transpose_hpu_lazy
  acc_thread: true
  no_compute_flag: true

tril:
  custom_fill_params: FillTrilParams
  dtypes: [BFloat16, Float, Char]
  guid: matrix_band_part_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

tril.out:
  custom_fill_params: FillTrilParams
  dtypes: [BFloat16, Float, Char]
  guid: matrix_band_part_fwd
  op_validator: check-node-with-shared-layer

tril_:
  custom_fill_params: FillTrilParams
  dtypes: [BFloat16, Float, Char]
  guid: matrix_band_part_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

triu:
  custom_fill_params: FillTriuParams
  dtypes: [BFloat16, Float, Char]
  guid: matrix_band_part_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

triu.out:
  custom_fill_params: FillTriuParams
  dtypes: [BFloat16, Float, Char]
  guid: matrix_band_part_fwd
  op_validator: check-node-with-shared-layer

triu_:
  custom_fill_params: FillTriuParams
  dtypes: [BFloat16, Float, Char]
  guid: matrix_band_part_fwd
  inplace_ids: [0]
  op_validator: check-node-with-shared-layer

tril_indices:
  custom_fill_params: FillTrilIndicesParams
  output_meta: TrilIndicesMeta
  guid: trilu_indices
  out_ids: [0]
  op_backend: TriluIndices

triu_indices:
  custom_fill_params: FillTriuIndicesParams
  output_meta: TriuIndicesMeta
  guid: trilu_indices
  out_ids: [0]
  op_backend: TriluIndices

trunc:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
  guid: trunc_fwd
  out_ids: [0]
  op_backend: RoundingFunc
  op_validator: RoundingTruncSharedMeta

trunc.out:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
  guid: trunc_fwd
  op_backend: RoundingFunc
  op_validator: RoundingTruncSharedMeta

trunc_:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long]
  guid: trunc_fwd
  inplace_ids: [0]
  op_backend: RoundingFunc
  op_validator: RoundingTruncSharedMeta

unbind.int:
  override_fn: unbind_hpu_lazy_
  acc_thread: true

uniform_:
  custom_fill_params: FillPhiloxUniformParams
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int, Half]
    Gaudi3: [BFloat16, Float, Int, Half]
  guid: philox_random_uniform
  inplace_ids: [0]
  op_frontend: GeneratorToSeed
  op_backend: RandomSeedTensorInput
  schema_args: "(Tensor(a!) self, float from=0, float to=1, *, Tensor seed) -> Tensor(a!)"

unique_dim:
  override_fn: unique_dim_hpu_lazy
  fallback_check: [UniqueFallbackCheck, sorted]
  dtypes: [BFloat16, Float, Int]

unsqueeze_:
  override_fn: unsqueeze_hpu_lazy_
  acc_thread: true

unsqueeze:
  override_fn: unsqueeze_hpu_lazy
  acc_thread: true

upsample_bicubic2d:
  custom_fill_params: FillBicubicFwdParams
  output_meta: UpsampleBicubic2DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

upsample_bicubic2d.out:
  custom_fill_params: FillBicubicFwdParams
  output_meta: UpsampleBicubic2DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  op_validator: check-node-with-shared-layer

upsample_bicubic2d.vec:
  only_shared_layer: true
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]

upsample_bicubic2d_backward:
  custom_fill_params: FillBicubicBwdParams
  output_meta: UpsampleBicubic2DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_bwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

upsample_bicubic2d_backward.grad_input:
  custom_fill_params: FillBicubicBwdParams
  output_meta: UpsampleBicubic2DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_bwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  op_validator: check-node-with-shared-layer

upsample_bilinear2d:
  custom_fill_params: FillBilinearFwdParams
  output_meta: UpsampleBilinear2DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

upsample_bilinear2d.out:
  custom_fill_params: FillBilinearFwdParams
  output_meta: UpsampleBilinear2DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  op_validator: check-node-with-shared-layer

upsample_trilinear3d:
  output_meta: UpsampleTrilinear3DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  op_backend: UpSampleTrilinear3DFwdOperator
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]
  out_ids: [0]

upsample_trilinear3d.out:
  output_meta: UpsampleTrilinear3DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  op_backend: UpSampleTrilinear3DFwdOperator
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]

upsample_bilinear2d.vec:
  only_shared_layer: true
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]

upsample_bilinear2d_backward:
  custom_fill_params: FillBilinearBwdParams
  output_meta: UpsampleBilinear2DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_bwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  out_ids: [0]
  op_validator: check-node-with-shared-layer

upsample_bilinear2d_backward.grad_input:
  custom_fill_params: FillBilinearBwdParams
  output_meta: UpsampleBilinear2DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_bwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  op_validator: check-node-with-shared-layer

upsample_linear1d:
  output_meta: UpsampleLinear1DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  op_backend: UpsampleLinear1DFwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]
  out_ids: [0]

upsample_linear1d.out:
  output_meta: UpsampleLinear1DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_fwd
  op_backend: UpsampleLinear1DFwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

upsample_linear1d.vec:
  only_shared_layer: true
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]

upsample_linear1d_backward:
  output_meta: UpsampleLinear1DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_bwd
  op_backend: UpsampleLinear1DBwdOperator
  out_ids: [0]
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

upsample_linear1d_backward.grad_input:
  output_meta: UpsampleLinear1DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  guid: resize_bwd
  op_backend: UpsampleLinear1DBwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

upsample_nearest1d:
  output_meta: UpsampleNearest1DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  op_backend: UpsampleNearest1DFwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]
  out_ids: [0]

upsample_nearest1d.out:
  output_meta: UpsampleNearest1DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  op_backend: UpsampleNearest1DFwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

upsample_nearest1d.vec:
  only_shared_layer: true
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]

upsample_nearest1d_backward:
  output_meta: UpsampleNearest1DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  op_backend: UpsampleNearest1DBwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]
  out_ids: [0]

upsample_nearest1d_backward.grad_input:
  output_meta: UpsampleNearest1DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  op_backend: UpsampleNearest1DBwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

_upsample_nearest_exact1d.out:
  output_meta: UpsampleNearest1DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  op_backend: UpsampleNearestExact1DFwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

_upsample_nearest_exact1d_backward.grad_input:
  output_meta: UpsampleNearest1DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  op_backend: UpsampleNearestExact1DBwdOperator
  synapse_layouts:
  - [WHC, WHC]
  - [WHC]

upsample_nearest2d:
  custom_fill_params: FillNearestFwdParams
  output_meta: UpsampleNearest2DFwdMeta
  op_backend: UpSampleNearest2DOperator
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  out_ids: [0]

upsample_nearest2d.out:
  custom_fill_params: FillNearestFwdParams
  output_meta: UpsampleNearest2DFwdMeta
  op_backend: UpSampleNearest2DOperator
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]

upsample_nearest2d_backward:
  custom_fill_params: FillNearestBwdParams
  output_meta: UpsampleNearest2DBwdMeta
  op_backend: UpSampleNearest2DOperator
  op_frontend: LazyUpsample
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]
  out_ids: [0]
  schema_args: "(Tensor grad_output, int[]? output_size, Tensor input_size, float? scale_h=None, float? scale_w=None) -> Tensor"

upsample_nearest2d_backward.grad_input:
  custom_fill_params: FillNearestBwdParams
  output_meta: UpsampleNearest2DBwdMeta
  op_backend: UpSampleNearest2DOperator
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  synapse_layouts:
  - [WHCN, WHCN]
  - [WHCN]

upsample_nearest3d:
  output_meta: UpsampleNearest3DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  op_backend: UpSampleNearest3DFwdOperator
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]
  out_ids: [0]

upsample_nearest3d.out:
  output_meta: UpsampleNearest3DFwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_fwd
  op_backend: UpSampleNearest3DFwdOperator
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]

upsample_nearest3d_backward:
  output_meta: UpsampleNearest3DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  op_backend: UpSampleNearest3DBwdOperator
  out_ids: [0]
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]

upsample_nearest3d_backward.grad_input:
  output_meta: UpsampleNearest3DBwdMeta
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]
  guid: resize_bwd
  op_backend: UpSampleNearest3DBwdOperator
  synapse_layouts:
  - [WHDCN, WHDCN]
  - [WHDCN]

upsample_nearest2d.vec:
  only_shared_layer: true
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]

upsample_nearest3d.vec:
  only_shared_layer: true
  dtypes:
    Gaudi: [BFloat16, Float, Byte]
    Gaudi2: [BFloat16, Float, Half, Byte]
    Gaudi3: [BFloat16, Float, Half, Byte]

var.correction:
  output_meta: StdVarMeta
  dtypes: [BFloat16, Float]
  op_backend: Var
  out_ids: [0]

var.correction_out:
  output_meta: StdVarMeta
  dtypes: [BFloat16, Float]
  op_backend: Var

var_mean:
  output_meta: StdVarMeanMeta
  dtypes: [BFloat16, Float]
  op_backend: VarMean
  out_ids: [0, 0]

var_mean.correction:
  output_meta: StdVarMeanMeta
  dtypes: [BFloat16, Float]
  op_backend: VarMean
  out_ids: [0, 0]

vdot:
  output_meta: VdotMeta
  dtypes: [BFloat16, Float]
  guid: dot_fwd
  out_ids: [0]
  op_validator: check-node-with-shared-layer

vdot.out:
  output_meta: VdotMeta
  dtypes: [BFloat16, Float]
  guid: dot_fwd
  op_validator: check-node-with-shared-layer

view:
  override_fn: view_hpu
  acc_thread: true

view.dtype:
  override_fn: view_dtype_hpu
  acc_thread: true

where.self:
  guid: where_fwd
  out_ids: [1]
  output_meta: WhereMeta
  op_backend: WhereBackend
  fallback_check: [WhereFallbackCheck, condition, self, other]

where.self_out:
  guid: where_fwd
  output_meta: WhereMeta
  op_backend: WhereBackend
  fallback_check: [WhereFallbackCheck, condition, self, other]

xlogy.OutTensor:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

xlogy.OutScalar_Self:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: LazyXlogY

xlogy.OutScalar_Other:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: LazyXlogY

xlogy.Scalar_Self:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: LazyXlogY
  out_ids: [1]

xlogy.Scalar_Other:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: LazyXlogY
  out_ids: [0]

xlogy_.Scalar_Other:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  op_frontend: LazyXlogY
  inplace_ids: [0]

xlogy.Tensor:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  out_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

xlogy_.Tensor:
  promote_int_to_float: [self, other]
  output_meta: XlogYMeta
  guid: xlogy_fwd
  dtypes:
    Gaudi: [BFloat16, Float]
    Gaudi2: [BFloat16, Float, Half]
    Gaudi3: [BFloat16, Float, Half]
  inplace_ids: [0]
  # op_validator: check-node-with-shared-layer https://jira.habana-labs.com/browse/SW-186280

zero_:
  dtypes:
    Gaudi: [BFloat16, Float, Int, Char, Byte, Short]
    Gaudi2: [BFloat16, Float, Int, Char, Byte, Short, Half, Long, Float8_e5m2, Float8_e4m3fn]
    Gaudi3: [BFloat16, Float, Int, Char, Byte, Short, Half, Long, Float8_e5m2, Float8_e4m3fn]
  op_backend: ZeroHpuLazyOperator
  inplace_ids: [0]
  op_validator: ZeroSharedMeta

slice_backward:
  output_meta: SliceBackwardMeta
  dtypes:
    Gaudi: [BFloat16, Float, Int]
    Gaudi2: [BFloat16, Float, Int]
    Gaudi3: [BFloat16, Float, Int]
  op_backend: SliceBackward
  out_ids: [0]
  lazy:
    override_fn: slice_backward_hpu_lazy

_add_relu.Scalar:
  guid: add_relu_fwd
  scalar_ids: [1, 2]
  out_ids: [0]
  promote_to_common_type: [self, other, alpha]
  op_validator: check-node-with-shared-layer

_add_relu_.Scalar:
  guid: add_relu_fwd
  scalar_ids: [1, 2]
  inplace_ids: [0]
  promote_to_common_type: [self, other, alpha]
  op_validator: check-node-with-shared-layer

_add_relu.Tensor:
  output_meta: AddReluTensorMeta
  guid: add_relu_fwd
  scalar_ids: [2]
  out_ids: [0]
  promote_to_common_type: [self, alpha]
  op_validator: check-node-with-shared-layer

_add_relu_.Tensor:
  output_meta: AddReluTensorMeta
  guid: add_relu_fwd
  scalar_ids: [2]
  inplace_ids: [0]
  promote_to_common_type: [self, alpha]
  op_validator: check-node-with-shared-layer

_add_relu.out:
  output_meta: AddReluTensorMeta
  guid: add_relu_fwd
  scalar_ids: [2]
  promote_to_common_type: [self, alpha]
  op_validator: check-node-with-shared-layer

_ctc_loss:
  output_meta: CtcLossMeta
  guid: ctc_loss_fwd
  dtypes:
    Gaudi: [Float, Int, Long]
    Gaudi2: [Float, Int, Long]
    Gaudi3: [Float, Int, Long]
  op_backend: CtcLoss
  synapse_layouts:
  - [CNT, SN, DONT_CARE, DONT_CARE]
  - [DONT_CARE, SNT]
  out_ids: [2, 0]

_ctc_loss.Tensor:
  output_meta: CtcLossMeta
  guid: ctc_loss_fwd
  dtypes:
    Gaudi: [Float, Int, Long]
    Gaudi2: [Float, Int, Long]
    Gaudi3: [Float, Int, Long]
  op_backend: CtcLoss
  synapse_layouts:
  - [CNT, SN, DONT_CARE, DONT_CARE]
  - [DONT_CARE, SNT]
  out_ids: [2, 0]

_ctc_loss_backward:
  output_meta: CtcLossBackwardMeta
  guid: ctc_loss_bwd
  dtypes:
    Gaudi: [Float, Int, Long]
    Gaudi2: [Float, Int, Long]
    Gaudi3: [Float, Int, Long]
  op_backend: CtcLossBackward
  synapse_layouts:
  - [DONT_CARE, CNT, SN, DONT_CARE, DONT_CARE, DONT_CARE, SNT]
  - [CNT]
  out_ids: [1]

_ctc_loss_backward.Tensor:
  output_meta: CtcLossBackwardMeta
  guid: ctc_loss_bwd
  dtypes:
    Gaudi: [Float, Int, Long]
    Gaudi2: [Float, Int, Long]
    Gaudi3: [Float, Int, Long]
  op_backend: CtcLossBackward
  synapse_layouts:
  - [DONT_CARE, CNT, SN, DONT_CARE, DONT_CARE, DONT_CARE, SNT]
  - [CNT]
  out_ids: [1]

# Below ops override PyTorch implementation. They were previously
# declared via wrap_kernels_declarations.h file in habana_kernels and pt_ver
# directories. Now it's enough to add such op with one of fields:
#  hpu_wrap_all_versions: true
#  hpu_wrap_version_list: ["2.0", "2.2", "2.4"]
#      - for a list of PT versions
#  hpu_wrap_version_range: ["2.0", 0]
#      - for a closed range of PT versions, 0 represents no upper/lower limit

copy_:
  hpu_wrap_all_versions: true

sort:
  hpu_wrap_all_versions: true

masked_select:
  hpu_wrap_all_versions: true

masked_select.out:
  hpu_wrap_all_versions: true

scatter_add_:
  hpu_wrap_all_versions: true

index_add.out:
  hpu_wrap_all_versions: true

nonzero.out:
  hpu_wrap_all_versions: true

batch_norm_stats:
  hpu_wrap_all_versions: true

dropout:
  hpu_wrap_all_versions: true

matmul:
  hpu_wrap_all_versions: true

_reshape_alias:
  hpu_wrap_all_versions: true

_unsafe_view:
  hpu_wrap_all_versions: true

empty.memory_format:
  hpu_wrap_all_versions: true

empty_strided:
  hpu_wrap_all_versions: true

slice.Tensor:
  hpu_wrap_all_versions: true

split.Tensor:
  hpu_wrap_all_versions: true

split_with_sizes:
  hpu_wrap_all_versions: true

_index_put_impl_:
  hpu_wrap_all_versions: true

bincount:
  hpu_wrap_all_versions: true

nonzero:
  hpu_wrap_all_versions: true

_unique:
  hpu_wrap_all_versions: true

_unique2:
  hpu_wrap_all_versions: true

repeat_interleave.Tensor:
  hpu_wrap_all_versions: true

batch_norm_elemt:
  hpu_wrap_all_versions: true

batch_norm_backward_elemt:
  hpu_wrap_all_versions: true

batch_norm_backward_reduce:
  hpu_wrap_all_versions: true

batch_norm_gather_stats_with_counts:
  hpu_wrap_all_versions: true

instance_norm:
  hpu_wrap_all_versions: true

softmax.int:
  hpu_wrap_all_versions: true

pin_memory:
  hpu_wrap_all_versions: true

_pin_memory:
  hpu_wrap_all_versions: true

is_pinned:
  hpu_wrap_all_versions: true

# Custom ops (currently only from 'hpu' namespace)

cast_to_fp8_hybrid:
  custom_op_schema: "hpu::cast_to_fp8_hybrid(Tensor input, Tensor? scale_152=None, Tensor? scale_143=None, bool stochastic_rounding=False, bool is_amax=False) -> (Tensor, Tensor, Tensor)"
  guid: convert_to_fp8_hybrid
  op_backend: CastToFp8Hybrid
  out_ids: [0, 0, 0]
  output_meta: CastToFp8HybridMeta
  custom_fill_params: CastToFp8HybridParams

fake_quant_fp4:
  custom_op_schema: "hpu::fake_quant_fp4(Tensor input, bool stochastic_rounding, int axis, str dtype) -> Tensor"
  custom_fill_params: FillFakeQuantFp4Params
  guid: fake_quantize_fp4
  out_ids: [0]

softmax_fp8:
  custom_op_schema: "hpu::softmax_fp8(Tensor input, int dim, Tensor? input_scale=None, Tensor? output_scale=None, Tensor? inv_attn_heads=None, Tensor? fused_add=None) -> Tensor"
  guid: softmax_fwd
  op_backend: SoftmaxFp8
  out_ids: [0]
  output_meta: SoftmaxFp8Meta

rms_norm:
  custom_op_schema: "hpu::rms_norm(Tensor data_in, Tensor gamma, float epsilon) -> (Tensor, Tensor)"
  guid: rms_norm_ex_fwd
  out_ids: [0, 0]
  output_meta: RMSNormMeta
  custom_fill_params: RMSNormParams

rms_norm_fast:
  custom_op_schema: "hpu::rms_norm_fast(Tensor data_in, Tensor gamma, float epsilon) -> (Tensor, Tensor)"
  guid: rms_norm_fast_fwd
  out_ids: [0, 0]
  output_meta: RMSNormMeta
  custom_fill_params: RMSNormFastParams

rms_norm_backward:
  custom_op_schema: "hpu::rms_norm_backward(Tensor grad_in, Tensor data_in, Tensor gamma, Tensor inverse_rms, bool use_stages, int bwd_mode) -> (Tensor, Tensor)"
  guid: rms_norm_ex_bwd
  out_ids: [0, 0]
  output_meta: RMSNormBwdMeta
  custom_fill_params: RMSNormBwdParams
